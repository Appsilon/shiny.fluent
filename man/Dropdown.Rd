% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components.R, R/documentation.R, R/examples.R
\name{Dropdown}
\alias{Dropdown}
\alias{updateDropdown}
\title{Dropdown}
\usage{
Dropdown(input_id, value = default_value, ...)

updateDropdown(session, input_id, value = NULL, ...)
}
\arguments{
\item{defaultSelectedKeys}{\code{string[] | number[]} \cr Keys that will be initially used to set selected items. This prop is only used when \code{multiSelect} is true (use \code{defaultSelectedKey} for single select). Mutually exclusive with \code{selectedKeys}.}

\item{dropdownWidth}{\code{number} \cr Custom width for dropdown. If value is 0, width of the input field is used.}

\item{isDisabled}{\code{boolean} \cr Deprecated at v0.52.0, use \code{disabled} instead.}

\item{keytipProps}{\code{IKeytipProps} \cr Optional keytip for this dropdown}

\item{multiSelectDelimiter}{\code{string} \cr When multiple items are selected, this will be used to separate values in the dropdown input.}

\item{notifyOnReselect}{\code{boolean} \cr If true, \code{onChange} will still be called when an already-selected item is clicked again in single select mode. (Normally it would not be called in this case.)}

\item{onChange}{\verb{(event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption, index?: number) => void} \cr Callback for when the selected option changes.}

\item{onChanged}{\verb{(option: IDropdownOption, index?: number) => void} \cr}

\item{onRenderCaretDown}{\verb{IRenderFunction<IDropdownProps>} \cr Custom renderer for chevron icon}

\item{onRenderLabel}{\verb{IRenderFunction<IDropdownProps>} \cr Custom renderer for the label.}

\item{onRenderPlaceholder}{\verb{IRenderFunction<IDropdownProps>} \cr Custom renderer for placeholder text}

\item{onRenderPlaceHolder}{\verb{IRenderFunction<IDropdownProps>} \cr Custom renderer for placeholder text}

\item{onRenderTitle}{\verb{IRenderFunction<IDropdownOption[]>} \cr Custom renderer for selected option displayed in input}

\item{options}{\code{IDropdownOption[]} \cr Options for the dropdown. If using \code{defaultSelectedKey} or \code{defaultSelectedKeys}, options must be pure for correct behavior.}

\item{placeHolder}{\code{string} \cr Input placeholder text. Displayed until an option is selected.}

\item{responsiveMode}{\code{ResponsiveMode} \cr By default, the dropdown will render the standard way for screen sizes \code{large} and above, or in a panel on \code{small} and \code{medium} screens. Manually set this prop to override this behavior.}

\item{selectedKeys}{\code{string[] | number[] | null} \cr Keys of the selected items, only used when \code{multiSelect} is true (use \code{selectedKey} for single select). If you provide this, you must maintain selection state by observing onChange events and passing a new prop value in when changed. Passing null will clear the selection. Mutually exclusive with \code{defaultSelectedKeys}.}

\item{styles}{\verb{IStyleFunctionOrObject<IDropdownStyleProps, IDropdownStyles>} \cr Call to provide customized styling that will layer on top of the variant rules.}

\item{theme}{\code{ITheme} \cr Theme provided by higher order component.}
}
\description{
A dropdown menu is a list in which the selected item is always visible while other items are visible on demand by clicking a dropdown button.

For more details and examples visit the official \href{https://developer.microsoft.com/en-us/fluentui#/controls/web/Dropdown}{docs}.
The R package can not handle each and every case, so for advanced use cases
you need to work using the original docs to achieve the desired result.
}
\section{Best practices}{
\subsection{Layout}{
\itemize{
\item Use a dropdown list when there are multiple choices that can be collapsed under one title, if the list of items is too long, or when space is constrained.
\item Use a dropdown list when the selected option is more important than the alternatives (in contrast to radio buttons where all the choices are visible, putting equal emphasis on all options).
}
}

\subsection{Content}{
\itemize{
\item Use sentence-style capitalization—only capitalize the first word. For more info, see \href{https://docs.microsoft.com/style-guide/capitalization}{Capitalization} in the Microsoft Writing Style Guide.
\item The dropdown list label should describe what can be found in the menu.
\item Use shortened statements or single words as list options.
\item If there isn't a default option, use "Select an option" as placeholder text.
\item If "None" is an option, include it.
\item Write the choices using parallel construction. For example, start with the same part of speech or verb tense.
}
}
}

\examples{
library(shiny.fluent)

if (interactive()) {
  options <- list(
    list(key = "A", text = "Option A"),
    list(key = "B", text = "Option B"),
    list(key = "C", text = "Option C")
  )

  shinyApp(
    ui = withReact(
      div(
        Dropdown("dropdown", "A", options = options),
        textOutput("dropdownValue")
      )
    ),
    server = function(input, output) {
      output$dropdownValue <- renderText({
        sprintf("Value: \%s", input$dropdown)
      })
    }
  )
}
}
