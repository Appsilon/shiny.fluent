% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components.R, R/documentation.R, R/examples.R
\name{Dialog}
\alias{Dialog}
\alias{DialogFooter}
\title{Dialog}
\usage{
Dialog(...)

DialogFooter(...)
}
\arguments{
\item{closeButtonAriaLabel}{\code{string} \cr Label to be passed to to aria-label of close button}

\item{draggableHeaderClassName}{\code{string} \cr The classname for when the header is draggable}

\item{isMultiline}{\code{boolean} \cr Is inside a multiline wrapper}

\item{responsiveMode}{\code{ResponsiveMode} \cr Responsive mode passed in from decorator.}

\item{showCloseButton}{\code{boolean} \cr Show an 'x' close button in the upper-right corner}

\item{subTextId}{\code{string} \cr The Id for subText container}

\item{titleId}{\code{string} \cr The Id for title container}

\item{titleProps}{\verb{React.HTMLAttributes<HTMLDivElement>} \cr The props for title container.}

\item{ariaDescribedById}{\code{string} \cr Optional id for aria-DescribedBy}

\item{ariaLabelledById}{\code{string} \cr Optional id for aria-LabelledBy}

\item{className}{\code{string} \cr Optional class name to be added to the root class}

\item{componentRef}{\verb{IRefObject<IDialog>} \cr Optional callback to access the IDialog interface. Use this instead of ref for accessing the public methods and properties of the component.}

\item{containerClassName}{\code{string} \cr Optional override for container class}

\item{contentClassName}{\code{string} \cr Optional override content class}

\item{dialogContentProps}{\code{IDialogContentProps} \cr Props to be passed through to Dialog Content}

\item{hidden}{\code{boolean} \cr Whether the dialog is hidden.}

\item{isBlocking}{\code{boolean} \cr Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay).}

\item{isDarkOverlay}{\code{boolean} \cr Whether the overlay is dark themed.}

\item{isOpen}{\code{boolean} \cr Whether the dialog is displayed. Deprecated, use \code{hidden} instead.}

\item{maxWidth}{\code{ICSSRule | ICSSPixelUnitRule} \cr Sets the maximum width for the dialog. It limits the width property to be larger than the value specified in max-width.}

\item{minWidth}{\code{ICSSRule | ICSSPixelUnitRule} \cr Sets the minimum width of the dialog. It limits the width property to be not smaller than the value specified in min-width.}

\item{modalProps}{\code{IModalProps} \cr Props to be passed through to Modal}

\item{onDismiss}{\verb{(ev?: React.MouseEvent<HTMLButtonElement>) => any} \cr A callback function for when the Dialog is dismissed from the close button or light dismiss. Can also be specified separately in content and modal.}

\item{onDismissed}{\verb{() => any} \cr A callback function which is called after the Dialog is dismissed and the animation is complete.}

\item{onLayerDidMount}{\verb{() => void} \cr A callback function for when the Dialog content is mounted on the overlay layer}

\item{onLayerMounted}{\verb{() => void} \cr Deprecated at 0.81.2, use \code{onLayerDidMount} instead.}

\item{styles}{\verb{IStyleFunctionOrObject<IDialogStyleProps, IDialogStyles>} \cr Call to provide customized styling that will layer on top of the variant rules}

\item{subText}{\code{string} \cr The subtext to display in the dialog.}

\item{theme}{\code{ITheme} \cr Theme provided by HOC.}

\item{title}{\code{string | JSX.Element} \cr The title text to display at the top of the dialog.}

\item{topButtonsProps}{\code{IButtonProps[]} \cr Other top buttons that will show up next to the close button}

\item{type}{\code{DialogType} \cr The type of Dialog to display.}
}
\description{
A dialog box (\code{Dialog}) is a temporary pop-up that takes focus from the page or app and requires people to interact with it. It’s primarily used for confirming actions, such as deleting a file, or asking people to make a choice.

For more details and examples visit the official \href{https://developer.microsoft.com/en-us/fluentui#/controls/web/Dialog}{docs}.
The R package can not handle each and every case, so for advanced use cases
you need to work using the original docs to achieve the desired result.
}
\section{Best practices}{
\subsection{Layout}{
\itemize{
\item Don't use more than three buttons.
\item Dialog boxes consist of a header, body, and footer.
\item Validate that people’s entries are acceptable before closing the dialog box. Show an inline validation error near the field they must correct.
\item Blocking dialogs should be used very sparingly, only when it is critical that people make a choice or provide information before they can proceed. Blocking dialogs are generally used for irreversible or potentially destructive tasks. They’re typically paired with an overlay without a light dismiss.
}
\subsection{Header}{
\itemize{
\item Locks to the top of the dialog.
\item May include an icon to the left of the title.
\item Includes a Close button in the top-right corner.
}
}

\subsection{Footer}{
\itemize{
\item Lock buttons to the bottom of the dialog.
\item Includes one primary button. A secondary button is optional.
}
}

\subsection{Width}{
\itemize{
\item Maximum is 340 pixels.
\item Minimum is 288 pixels.
}
}

\subsection{Height}{
\itemize{
\item Maximum is 340 pixels.
\item Minimum is 172 pixels.
}
}

}

\subsection{Content}{
\subsection{Title}{
\itemize{
\item Keep the title as concise as possible.
\item Don’t use periods at the end of titles.
\item This mandatory content should explain the main information in a clear, concise, and specific statement or question. For example, “Delete this file?” instead of “Are you sure?”
\item The title shouldn’t be a description of the body content. For example, don’t use “Error” as a title. Instead, use an informative statement like “Your session ended.”
\item Use sentence-style capitalization—only capitalize the first word. For more info, see \href{https://docs.microsoft.com/style-guide/capitalization}{Capitalization} in the Microsoft Writing Style Guide.
}
}

\subsection{Body copy (Optional)}{
\itemize{
\item Don't restate the title in the body.
\item Use ending punctuation on sentences.
\item Use actionable language, with the most important information at the beginning.
\item Use the optional body content area for additional info or instructions, if needed. Only include information needed to help people make a decision.
}
}

\subsection{Button labels}{
\itemize{
\item Write button labels that are specific responses to the main information in the title. The title “Delete this file?” could have buttons labeled “Delete” and “Cancel”.
\item Be concise. Limit labels to one or two words. Usually a single verb is best. Include a noun if there is any room for interpretation about what the verb means. For example, “Delete” or “Delete file”.
}
}

}
}

\examples{
library(shiny.fluent)

if (interactive()) {
  shinyApp(
    ui = withReact(
      div(
        DefaultButton("showDialog", text = "Open dialog"),
        reactOutput("reactDialog")
      )
    ),
    server = function(input, output) {
      isDialogOpen <- reactiveVal(FALSE)
      output$reactDialog <- renderReact({
        dialogContentProps <- list(
          type=0,
          title='Missing Subject',
          closeButtonAriaLabel='Close',
          subText='Do you want to send this message without a subject?'
        )
        
        reactWidget(
          Dialog(
            hidden=!isDialogOpen(),
            onDismiss=JS("function() { Shiny.setInputValue('hideDialog', Math.random()); }"),
            dialogContentProps=dialogContentProps,
            modalProps=list(),
            ShinyComponentWrapper(
              DialogFooter(
                PrimaryButton("dialogSend", text="Send"),
                DefaultButton("dialogDontSend", text="Don't send")
              )
            )
          )
        )
      })
      
      observeEvent(input$showDialog, isDialogOpen(TRUE))
      observeEvent(input$hideDialog, isDialogOpen(FALSE))
      observeEvent(input$dialogSend, isDialogOpen(FALSE))
      observeEvent(input$dialogDontSend, isDialogOpen(FALSE))
    }
  )
}
}
