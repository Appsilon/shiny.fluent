% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components.R, R/documentation.R, R/examples.R
\name{Text}
\alias{Text}
\title{Text}
\usage{
Text(...)
}
\arguments{
\item{as}{\verb{React.ElementType<React.HTMLAttributes<HTMLElement>>} \cr Optionally render the component as another component type or primitive.}

\item{block}{\code{boolean} \cr Whether the text is displayed as a block element.

Note that in order for ellipsis on overflow to work properly, \code{block} and \code{nowrap} should be set to true.}

\item{nowrap}{\code{boolean} \cr Whether the text is not wrapped.

Note that in order for ellipsis on overflow to work properly, \code{block} and \code{nowrap} should be set to true.}

\item{variant}{\verb{keyof IFontStyles} \cr Optional font type for Text.}
}
\description{
Text is a component for displaying text. You can use Text to standardize text across your web app.

You can specify the \code{variant} prop to apply font styles to Text. This variant pulls from the Fluent UI React theme loaded on the page. If you do not specify the \code{variant} prop, by default, Text applies the styling from specifying the \code{variant} value to \code{medium}.

The Text control is inline wrap by default. You can specify \code{block} to enable block and \code{nowrap} to enable \code{nowrap}. For ellipsis on overflow to work properly, \code{block} and \code{nowrap} should be manually set to \code{true}.

For more details and examples visit the official \href{https://developer.microsoft.com/en-us/fluentui#/controls/web/Text}{docs}.
The R package can not handle each and every case, so for advanced use cases
you need to work using the original docs to achieve the desired result.
}
\examples{
library(shiny.fluent)

if (interactive()) {
  shinyApp(
    ui = withReact(
      Text(variant = "xLarge", "Some text with a nice Fluent UI font")
    ),
    server = function(input, output) {
    }
  )
}
}
