% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components.R, R/documentation.R, R/examples.R
\name{ColorPicker}
\alias{ColorPicker}
\alias{updateColorPicker}
\title{ColorPicker}
\usage{
ColorPicker(input_id, value = default_value, ...)

updateColorPicker(session, input_id, value = NULL, ...)
}
\arguments{
\item{value}{\code{number} \cr Current value of the slider.}

\item{alphaLabel}{\code{string} \cr Label for the alpha textfield.}

\item{alphaSliderHidden}{\code{boolean} \cr Whether to hide the alpha (or transparency) slider and text field.}

\item{alphaType}{\code{'alpha' | 'transparency' | 'none'} \cr \code{alpha} (the default) means display a slider and text field for editing alpha values. \code{transparency} also displays a slider and text field but for editing transparency values. \code{none} hides these controls.

Alpha represents the opacity of the color, whereas transparency represents the transparentness of the color: i.e. a 30\% transparent color has 70\% opaqueness.}

\item{blueLabel}{\code{string} \cr Label for the blue text field.}

\item{greenLabel}{\code{string} \cr Label for the green text field.}

\item{hexLabel}{\code{string} \cr Label for the hex text field.}

\item{redLabel}{\code{string} \cr Label for the red text field.}

\item{showPreview}{\code{boolean} \cr Whether to show color preview box.}

\item{strings}{\code{IColorPickerStrings} \cr Labels for elements within the ColorPicker. Defaults are provided in English only.}

\item{ariaDescription}{\code{string} \cr Detailed description for how to use the color rectangle. Moving the thumb horizontally adjusts saturation and moving it vertically adjusts value (essentially, brightness).}

\item{ariaValueFormat}{\code{string} \cr Format string for the color rectangle's current value as read by screen readers. The string must include descriptions and two placeholders for the current values: \code{{0}} for saturation and \code{{1}} for value/brightness.}

\item{color}{\code{IColor} \cr Current color of the rectangle.}

\item{minSize}{\code{number} \cr Minimum width and height.}

\item{ariaLabel}{\code{string} \cr Label of the ColorSlider for the benefit of screen reader users.}

\item{className}{\code{string} \cr Additional CSS class(es) to apply to the ColorSlider.}

\item{componentRef}{\verb{IRefObject<IColorSlider>} \cr Gets the component ref.}

\item{isAlpha}{\code{boolean} \cr If true, the slider represents an alpha slider and will display a gray checkered pattern in the background. Otherwise, the slider represents a hue slider.}

\item{maxValue}{\code{number} \cr Maximum value of the slider.}

\item{minValue}{\code{number} \cr Minimum value of the slider.}

\item{onChange}{\verb{(event: React.MouseEvent | React.KeyboardEvent, newValue?: number) => void} \cr Callback issued when the value changes.}

\item{overlayColor}{\code{string} \cr Hex color to use when rendering an alpha or transparency slider's overlay, \emph{without} the \verb{#}.}

\item{overlayStyle}{\code{React.CSSProperties} \cr Custom style for the overlay element.}

\item{styles}{\verb{IStyleFunctionOrObject<IColorSliderStyleProps, IColorSliderStyles>} \cr Call to provide customized styling that will layer on top of the variant rules.}

\item{theme}{\code{ITheme} \cr Theme (provided through customization).}

\item{thumbColor}{\code{string} \cr CSS-compatible string for the color of the thumb element.}

\item{type}{\code{'hue' | 'alpha' | 'transparency'} \cr Type of slider to display.}
}
\description{
The color picker (\code{ColorPicker}) is used to browse through and select colors. By default, it lets people navigate through colors on a color spectrum; or specify a color in either Red-Green-Blue (RGB); or alpha color code; or Hexadecimal textboxes.

For more details and examples visit the official \href{https://developer.microsoft.com/en-us/fluentui#/controls/web/ColorPicker}{docs}.
The R package can not handle each and every case, so for advanced use cases
you need to work using the original docs to achieve the desired result.
}
\examples{
library(shiny.fluent)

if (interactive()) {
  shinyApp(
    ui = withReact(
      div(
        ColorPicker("color", "#00FF01"),
        textOutput("colorValue")
      )
    ),
    server = function(input, output) {
      output$colorValue <- renderText({
        sprintf("Value: \%s", input$color)
      })
    }
  )
}
}
