% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components.R, R/documentation.R, R/examples.R
\name{Shimmer}
\alias{Shimmer}
\alias{ShimmerElementsGroup}
\title{Shimmer}
\usage{
Shimmer(...)

ShimmerElementsGroup(...)
}
\arguments{
\item{backgroundColor}{\code{string} \cr Defines the background color of the space in between and around shimmer elements.}

\item{flexWrap}{\code{boolean} \cr Optional boolean for enabling flexWrap of the container containing the shimmerElements.}

\item{rowHeight}{\code{number} \cr Optional maximum row height of the shimmerElements container.}

\item{borderStyle}{\code{IRawStyle} \cr Use to set custom styling of the shimmerLine borders.}

\item{height}{\code{number} \cr Sets the height of the rectangle.}

\item{ariaLabel}{\code{string} \cr Localized string of the status label for screen reader}

\item{className}{\code{string} \cr Additional CSS class(es) to apply to the Shimmer container.}

\item{componentRef}{\verb{IRefObject<IShimmer>} \cr Optional callback to access the IShimmer interface. Use this instead of ref for accessing the public methods and properties of the component.}

\item{customElementsGroup}{\code{React.ReactNode} \cr Custom elements when necessary to build complex placeholder skeletons.}

\item{isDataLoaded}{\code{boolean} \cr Controls when the shimmer is swapped with actual data through an animated transition.}

\item{shimmerColors}{\code{IShimmerColors} \cr Defines an object with possible colors to pass for Shimmer customization used on different backgrounds.}

\item{shimmerElements}{\code{IShimmerElement[]} \cr Elements to render in one line of the Shimmer.}

\item{styles}{\verb{IStyleFunctionOrObject<IShimmerStyleProps, IShimmerStyles>} \cr Call to provide customized styling that will layer on top of the variant rules.}

\item{theme}{\code{ITheme} \cr Theme provided by High-Order Component.}

\item{width}{\code{number | string} \cr Sets the width value of the shimmer wave wrapper.}
}
\description{
Shimmer is a temporary animation placeholder for when a service call takes time to return data and we don't want to block rendering the rest of the UI.

If a smooth transition from Shimmer to content is desired, wrap the content node with a Shimmer element and use the \code{isDataLoaded} prop to trigger the transition. In cases where the content node is not wrapped in a Shimmer, use the \code{shimmerElements} or \code{customElementsGroup} props, and once data arrives, manually replace the Shimmer UI with the intended content. See the examples below for reference.

For more details and examples visit the official \href{https://developer.microsoft.com/en-us/fluentui#/controls/web/Shimmer}{docs}.
The R package can not handle each and every case, so for advanced use cases
you need to work using the original docs to achieve the desired result.
}
\examples{
library(shiny.fluent)

if (interactive()) {
  ui <- tagList(
    withReact(
      div(
        p("Basic Shimmer with no elements provided. It defaults to a line of 16px height."),
        Shimmer(),
        Shimmer(width = "75\%"),
        Shimmer(width = "50\%")
      )
    ),
    tags$head(tags$style(
      ".ms-Shimmer-container { margin: 10px 0 }"
    ))
  )

  shinyApp(
    ui = ui,
    server = function(input, output) {
    }
  )
}
}
