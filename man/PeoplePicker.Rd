% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components.R, R/documentation.R, R/examples.R
\name{NormalPeoplePicker}
\alias{NormalPeoplePicker}
\alias{updateNormalPeoplePicker}
\alias{CompactPeoplePicker}
\alias{PeoplePicker}
\title{PeoplePicker}
\usage{
NormalPeoplePicker(input_id, value = default_value, ...)

updateNormalPeoplePicker(session, input_id, value = NULL, ...)

CompactPeoplePicker(...)
}
\arguments{
\item{ValidationState}{\code{ValidationState} \cr}

\item{className}{\code{string} \cr Additional CSS class(es) to apply to the PeoplePickerItem root element.}

\item{theme}{\code{ITheme} \cr Theme provided by High-Order Component.}

\item{compact}{\code{boolean} \cr Flag that controls whether each suggested PeoplePicker item (Persona) is rendered with or without secondary text for compact look.}

\item{personaProps}{\code{IPersonaProps} \cr Persona props for each suggested for picking PeoplePicker item.}

\item{styles}{\verb{IStyleFunctionOrObject<IPeoplePickerItemSuggestionStyleProps, IPeoplePickerItemSuggestionStyles>} \cr Call to provide customized styling that will layer on top of the variant rules.}

\item{suggestionsProps}{\code{IBasePickerSuggestionsProps} \cr General common props for all PeoplePicker items suggestions.}
}
\description{
The people picker (\code{PeoplePicker}) is used to select one or more entities, such as people or groups, from a list. It makes composing an email to someone, or adding them to a group, easy if you don’t know their full name or email address.

For more details and examples visit the official \href{https://developer.microsoft.com/en-us/fluentui#/controls/web/PeoplePicker}{docs}.
The R package can not handle each and every case, so for advanced use cases
you need to work using the original docs to achieve the desired result.
}
\section{Best practices}{
\subsection{Layout}{
\itemize{
\item Use the people picker to add someone to the To line of an email, or to add someone to a list.
\item Use the \verb{MemberList PeoplePicker} to display selections below the input field.
}
}
}

\examples{
library(shiny.fluent)

people <- tibble::tribble(
  ~key, ~imageUrl, ~imageInitials, ~text, ~secondaryText, ~tertiaryText, ~optionalText, ~isValid, ~presence, ~canExpand,
  1, "https://static2.sharepointonline.com/files/fabric/office-ui-fabric-react-assets/persona-female.png", "PV", "Annie Lindqvist", "Designer", "In a meeting", "Available at 4:00pm", TRUE, 2, NA,
  2, "https://static2.sharepointonline.com/files/fabric/office-ui-fabric-react-assets/persona-male.png", "AR", "Aaron Reid", "Designer", "In a meeting", "Available at 4:00pm", TRUE, 6, NA,
  3, "https://static2.sharepointonline.com/files/fabric/office-ui-fabric-react-assets/persona-male.png", "AL", "Alex Lundberg", "Software Developer", "In a meeting", "Available at 4:00pm", TRUE, 4, NA,
  4, "https://static2.sharepointonline.com/files/fabric/office-ui-fabric-react-assets/persona-male.png", "RK", "Roko Kolar", "Financial Analyst", "In a meeting", "Available at 4:00pm", TRUE, 1, NA,
  5, "https://static2.sharepointonline.com/files/fabric/office-ui-fabric-react-assets/persona-male.png", "CB", "Christian Bergqvist", "Sr. Designer", "In a meeting", "Available at 4:00pm", TRUE, 2, NA,
  6, "https://static2.sharepointonline.com/files/fabric/office-ui-fabric-react-assets/persona-female.png", "VL", "Valentina Lovric", "Design Developer", "In a meeting", "Available at 4:00pm", TRUE, 2, NA,
  7, "https://static2.sharepointonline.com/files/fabric/office-ui-fabric-react-assets/persona-male.png", "MS", "Maor Sharett", "UX Designer", "In a meeting", "Available at 4:00pm", TRUE, 3, NA
)

if (interactive()) {
  suggestionProps <- list(
    suggestionsHeaderText='Suggested People',
    mostRecentlyUsedHeaderText='Suggested Contacts',
    noResultsFoundText='No results found',
    loadingText='Loading',
    showRemoveButtons=TRUE,
    suggestionsAvailableAlertText='People Picker Suggestions available',
    suggestionsContainerAriaLabel='Suggested contacts'
  );
  
  shinyApp(
    ui = tagList(
      tags$script(HTML(paste("people = ", jsonlite::toJSON(people)))),
      textOutput("selectedPeople"),
      withReact(
        NormalPeoplePicker(
          onResolveSuggestions=JS("function(filterText) { return people.filter(item => item.text.toLowerCase().indexOf(filterText.toLowerCase()) === 0) }"),
          onEmptyInputFocus=JS("function() { return people }"),
          getTextFromItem=JS("function(item) { return item.text }"),
          pickerSuggestionsProps=suggestionProps,
          className="ms-PeoplePicker",
          onChange=JS("function(selection) { Shiny.setInputValue('selectedPeople', JSON.stringify(selection)) }")
        )
      )
    ),
    server = function(input, output) {
      output$selectedPeople <- renderText({
        if (is.null(input$selectedPeople)) {
          "Select recipients below:"
        } else {
          paste("You have selected:", paste(jsonlite::fromJSON(input$selectedPeople)$text, collapse=", "))
        }
      })
    }
  )
}
}
