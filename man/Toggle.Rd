% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components.R, R/documentation.R, R/examples.R,
%   R/inputs.R
\name{Toggle}
\alias{Toggle}
\alias{Toggle.shinyInput}
\alias{updateToggle.shinyInput}
\title{Toggle}
\usage{
Toggle(...)

Toggle.shinyInput(inputId, ..., value = defaultValue)

updateToggle.shinyInput(
  session = shiny::getDefaultReactiveDomain(),
  inputId,
  ...
)
}
\arguments{
\item{ariaLabel}{\code{string} \cr Text for screen-reader to announce as the name of the toggle.}

\item{as}{\verb{IComponentAs<React.HTMLAttributes<HTMLElement>>} \cr Render the root element as another type.}

\item{checked}{\code{boolean} \cr Checked state of the toggle. If you are maintaining state yourself, use this property. Otherwise use \code{defaultChecked}.}

\item{componentRef}{\verb{IRefObject<IToggle>} \cr Optional callback to access the IToggle interface. Use this instead of ref for accessing the public methods and properties of the component.}

\item{defaultChecked}{\code{boolean} \cr Initial state of the toggle. If you want the toggle to maintain its own state, use this. Otherwise use \code{checked}.}

\item{disabled}{\code{boolean} \cr Optional disabled flag.}

\item{inlineLabel}{\code{boolean} \cr Whether the label (not the onText/offText) should be positioned inline with the toggle control. Left (right in RTL) side when on/off text provided VS right (left in RTL) side when no on/off text. Caution: when not providing on/off text user may get confused in differentiating the on/off states of the toggle.}

\item{keytipProps}{\code{IKeytipProps} \cr Optional keytip for this toggle}

\item{label}{\code{string | JSX.Element} \cr A label for the toggle.}

\item{offAriaLabel}{\code{string} \cr}

\item{offText}{\code{string} \cr Text to display when toggle is OFF. Caution: when not providing on/off text user may get confused in differentiating the on/off states of the toggle.}

\item{onAriaLabel}{\code{string} \cr}

\item{onChange}{\verb{(event: React.MouseEvent<HTMLElement>, checked?: boolean) => void} \cr Callback issued when the value changes.}

\item{onChanged}{\verb{(checked: boolean) => void} \cr}

\item{onText}{\code{string} \cr Text to display when toggle is ON. Caution: when not providing on/off text user may get confused in differentiating the on/off states of the toggle.}

\item{role}{\code{'checkbox' | 'switch' | 'menuitemcheckbox'} \cr (Optional) Specify whether to use the "switch" role (ARIA 1.1) or the checkbox role (ARIA 1.0). If unspecified, defaults to "switch".}

\item{styles}{\verb{IStyleFunctionOrObject<IToggleStyleProps, IToggleStyles>} \cr Optional styles for the component.}

\item{theme}{\code{ITheme} \cr Theme provided by HOC.}
}
\description{
A toggle represents a physical switch that allows someone to choose between two mutually exclusive options.  For example, “On/Off”, “Show/Hide”. Choosing an option should produce an immediate result.

For more details and examples visit the official \href{https://developer.microsoft.com/en-us/fluentui#/controls/web/Toggle}{docs}.
The R package can not handle each and every case, so for advanced use cases
you need to work using the original docs to achieve the desired result.
}
\section{Best practices}{
\subsection{Layout}{
\itemize{
\item When people need to perform extra steps for changes to take effect, use a check box instead. For example, if they must click a "Submit", "Next", or "OK" button to apply changes, use a check box.
}
}

\subsection{Content}{
\itemize{
\item Only replace the On/Off labels if there are more specific labels for the setting. For example, you might use Show/Hide if the setting is "Show images".
\item Keep descriptive text short and concise—two to four words; preferably nouns. For example, "Focused inbox" or "WiFi".
}
}
}

\examples{
library(shiny.fluent)

if (interactive()) {
  shinyApp(
    ui = div(
      Toggle.shinyInput("toggle", value = TRUE),
      textOutput("toggleValue")
    ),
    server = function(input, output) {
      output$toggleValue <- renderText({
        sprintf("Value: \%s", input$toggle)
      })
    }
  )
}
}
