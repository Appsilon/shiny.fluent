[{"path":"https://appsilon.github.io/shiny.fluent/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to shiny.fluent","title":"Contributing to shiny.fluent","text":"welcome contributions shiny.fluent shiny.react!","code":""},{"path":"https://appsilon.github.io/shiny.fluent/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to shiny.fluent","text":"’re welcome make small fixes documentation without discussing - simply please go ahead open pull request change. R help, make sure edit .R file, processed docs .Rmd","code":""},{"path":"https://appsilon.github.io/shiny.fluent/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing to shiny.fluent","text":"make bigger pull request, please open issue make sure one maintainers agrees problem proposed solution. ’ve found bug, please create bug report issue illustrate bug minimal reprex.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to shiny.fluent","text":"New code follow tidyverse style guide. use roxygen2 documentation, preference Markdown syntax. use testthat. Please make sure include tests PR. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/PULL_REQUEST_TEMPLATE.html","id":"changes","dir":"","previous_headings":"","what":"Changes","title":"NA","text":"Closes #","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/articles/shiny-fluent.html","id":"shiny-fluent-hello-world-app","dir":"Articles","previous_headings":"","what":"shiny.fluent “Hello world!” app","title":"Tutorial: Create your first shiny.fluent dashboard","text":"Let’s start creating app shows “Hello world!”, Fluent UI. First, need load shiny.fluent. gives us need run basic application! create UI showing welcome message, use Fluent component named ?Text. ’ll put ?fluentPage, add proper CSS classes suppress Bootstrap (use Bootstrap Fluent UI time). Let’s see app looks like right now.  Yay! may look impressive, text rendered Shiny whole power Fluent UI React.","code":"library(shiny) library(shiny.fluent) ui <- fluentPage(   Text(variant = \"xxLarge\", \"Hello world!\") )  server <- function(input, output, session) {}  shinyApp(ui, server)"},{"path":"https://appsilon.github.io/shiny.fluent/articles/shiny-fluent.html","id":"showing-data-in-a-table","dir":"Articles","previous_headings":"","what":"Showing data in a table","title":"Tutorial: Create your first shiny.fluent dashboard","text":"Let’s now grab data show users table. shiny.fluent already includes example data can use. fluentPeople list imaginary people format expected Fluent components. fluentSalesData data frame randomly generated “sales deals”, assigned one fluentPeople, date amount, associated one top 10 companies Fortune 500 list (including name, city map coordinates). now need Fluent component insert table. good way find component suits needs launch showcase dashboard shiny.fluent::runExample(\"dashboard\") visit official Fluent UI docs. Browsing list components, find ?DetailsList, gives table component rich configuration options. First, need define columns deals data want see label . Let’s now display sales deals table. plan later make table change dynamically, put regular Shiny uiOutput. Let’s also assume now want filter deals is_closed equal 1. addition ?DetailsList ?Text, code used ?Stack, arranges elements area.","code":"fluentPeople %>% glimpse() #> Rows: 7 #> Columns: 11 #> $ key           <dbl> 1, 2, 3, 4, 5, 6, 7 #> $ imageUrl      <chr> \"https://static2.sharepointonline.com/files/fabric/offic… #> $ imageInitials <chr> \"PV\", \"AR\", \"AL\", \"RK\", \"CB\", \"VL\", \"MS\" #> $ text          <chr> \"Annie Lindqvist\", \"Aaron Reid\", \"Alex Lundberg\", \"Roko … #> $ secondaryText <chr> \"Senior Sales Rep\", \"Sales Rep\", \"Junior Sales Rep\", \"Se… #> $ tertiaryText  <chr> \"In a meeting\", \"In a meeting\", \"In a meeting\", \"In a me… #> $ optionalText  <chr> \"Available at 4:00pm\", \"Available at 4:00pm\", \"Available… #> $ isValid       <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE #> $ presence      <dbl> 2, 6, 4, 1, 2, 2, 3 #> $ canExpand     <lgl> NA, NA, NA, NA, NA, NA, NA #> $ color         <chr> \"#8DD3C7\", \"#FFFFB3\", \"#BEBADA\", \"#FB8072\", \"#80B1D3\", \"… fluentSalesDeals %>% glimpse() #> Rows: 100 #> Columns: 30 #> $ X           <dbl> -8286952, -13595427, -13625773, -13595427, -8286952, -8234… #> $ Y           <dbl> 4938582, 6047180, 4550281, 6047180, 4938582, 4976415, 4938… #> $ FID         <dbl> 493, 234, 425, 234, 493, 333, 493, 284, 333, 284, 425, 234… #> $ OBJECTID    <dbl> 493, 234, 425, 234, 493, 333, 493, 284, 333, 284, 425, 234… #> $ RANK        <dbl> 35, 28, 25, 28, 35, 21, 35, 26, 21, 26, 25, 28, 28, 21, 21… #> $ NAME        <chr> \"JOHNSON & JOHNSON\", \"MICROSOFT\", \"WELLS FARGO\", \"MICROSOF… #> $ ADDRESS     <chr> \"1 JOHNSON AND JOHNSON PLAZA\", \"1 MICROSOFT WAY\", \"420 MON… #> $ ADDRESS2    <chr> \"NOT AVAILABLE\", \"NOT AVAILABLE\", \"NOT AVAILABLE\", \"NOT AV… #> $ CITY        <chr> \"NEW BRUNSWICK\", \"REDMOND\", \"SAN FRANCISCO\", \"REDMOND\", \"N… #> $ STATE       <chr> \"NJ\", \"WA\", \"CA\", \"WA\", \"NJ\", \"NY\", \"NJ\", \"NC\", \"NY\", \"NC\"… #> $ ZIP         <chr> \"08933\", \"98052\", \"94163\", \"98052\", \"08933\", \"10017\", \"089… #> $ COUNTY      <chr> \"MIDDLESEX\", \"KING\", \"SAN FRANCISCO\", \"KING\", \"MIDDLESEX\",… #> $ EMPLOYEES   <dbl> 126400, 114000, 269100, 114000, 126400, 243355, 126400, 20… #> $ REVENUES    <dbl> 71890, 85320, 94176, 85320, 71890, 105486, 71890, 93662, 1… #> $ LATITUDE    <dbl> 40.49804, 47.64005, 37.79340, 47.64005, 40.49804, 40.75598… #> $ LONGITUDE   <dbl> -74.44296, -122.12980, -122.40240, -122.12980, -74.44296, … #> $ SOURCE      <chr> \"MANUAL\", \"BING MAPS\", \"BING MAPS\", \"BING MAPS\", \"MANUAL\",… #> $ PRC         <chr> \"ON-ENTITY\", \"ADDRESS\", \"ADDRESS\", \"ADDRESS\", \"ON-ENTITY\",… #> $ COUNTYFIPS  <chr> \"34023\", \"53033\", \"06075\", \"53033\", \"34023\", \"36061\", \"340… #> $ COMMENTS    <chr> \"NOT AVAILABLE\", \"NOT AVAILABLE\", \"NOT AVAILABLE\", \"NOT AV… #> $ WEBSITE     <chr> \"HTTPS://WWW.JNJ.COM/\", \"HTTPS://WWW.MICROSOFT.COM/EN-US/\"… #> $ PROFIT      <dbl> 16540, 16798, 21938, 16798, 16540, 24733, 16540, 17906, 24… #> $ deal_amount <dbl> 855987, 753174, 702208, 590190, 405443, 714723, 455713, 80… #> $ rep_id      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2… #> $ rep_name    <chr> \"Annie Lindqvist\", \"Annie Lindqvist\", \"Annie Lindqvist\", \"… #> $ date        <date> 2020-02-19, 2020-08-18, 2020-10-14, 2020-02-23, 2020-10-1… #> $ client_name <chr> \"JOHNSON & JOHNSON\", \"MICROSOFT\", \"WELLS FARGO\", \"MICROSOF… #> $ city        <chr> \"NEW BRUNSWICK\", \"REDMOND\", \"SAN FRANCISCO\", \"REDMOND\", \"N… #> $ color       <chr> \"#8DD3C7\", \"#8DD3C7\", \"#8DD3C7\", \"#8DD3C7\", \"#8DD3C7\", \"#8… #> $ is_closed   <int> 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1… details_list_columns <- tibble(   fieldName = c(\"rep_name\", \"date\", \"deal_amount\", \"client_name\", \"city\", \"is_closed\"),   name = c(\"Sales rep\", \"Close date\", \"Amount\", \"Client\", \"City\", \"Is closed?\"),   key = fieldName) ui <- fluentPage(   uiOutput(\"analysis\") )  server <- function(input, output, session) {   filtered_deals <- reactive({     filtered_deals <- fluentSalesDeals %>% filter(is_closed > 0)   })    output$analysis <- renderUI({     items_list <- if(nrow(filtered_deals()) > 0){       DetailsList(items = filtered_deals(), columns = details_list_columns)     } else {       p(\"No matching transactions.\")     }      Stack(       tokens = list(childrenGap = 5),       Text(variant = \"large\", \"Sales deals details\", block = TRUE),       div(style=\"max-height: 500px; overflow: auto\", items_list)     )   }) }  shinyApp(ui, server)"},{"path":"https://appsilon.github.io/shiny.fluent/articles/shiny-fluent.html","id":"adding-filtering","dir":"Articles","previous_headings":"","what":"Adding filtering","title":"Tutorial: Create your first shiny.fluent dashboard","text":"Okay, already looks good! ’s hard explore data without filtering options - let’s add now. start adding option find transactions selected dates. use two ?DatePicker components allow users choose date range. make selected dates available server function, two options: simple way. Use DatePicker.shinyInput convenience wrapper, provides interface analogous vanilla Shiny inputs: inputId optional value. advanced way. Use component directly connect Shiny using React interface: onSelectDate defaultValue case. second option less convenient might provide power flexibility cases. ’ll go first option tutorial, simplified interface sufficient needs. Let’s add filters UI: server function application, can now access input values using IDs provided way Shiny input. Let’s use selected dates apply additional filtering deals: application looks like now:","code":"filters <- tagList(   DatePicker.shinyInput(\"fromDate\", value = as.Date('2020/01/01'), label = \"From date\"),   DatePicker.shinyInput(\"toDate\", value = as.Date('2020/12/31'), label = \"To date\") ) ui <- fluentPage(   filters,   uiOutput(\"analysis\") ) server <- function(input, output, session) {   filtered_deals <- reactive({     req(input$fromDate)     filtered_deals <- fluentSalesDeals %>% filter(       date >= input$fromDate,       date <= input$toDate,       is_closed > 0     )   })"},{"path":"https://appsilon.github.io/shiny.fluent/articles/shiny-fluent.html","id":"more-filters","dir":"Articles","previous_headings":"","what":"More filters","title":"Tutorial: Create your first shiny.fluent dashboard","text":"Let’s add filtering options app! use following components: ?NormalPeoplePicker limit search selected sales representatives, ?Slider define minimum deal size, ?Toggle show closed deals. addition ’ll use ?Stack ?Label visually arrange filtering controls. Now multiple filtering controls, good idea add visual separation table. Let’s define helper function create Fluent UI cards: Now can wrap filters call makeCard(). Additionally, include style tag add padding margin cards created helper function. Let’s move attention server function. can access values filtering controls using provided IDs just like . Finally, let’s refactor table output wrap card. filtering much useful now!","code":"filters <- Stack(   tokens = list(childrenGap = 10),   Stack(     horizontal = TRUE,     tokens = list(childrenGap = 10),     DatePicker.shinyInput(\"fromDate\", value = as.Date('2020/01/01'), label = \"From date\"),     DatePicker.shinyInput(\"toDate\", value = as.Date('2020/12/31'), label = \"To date\")   ),   Label(\"Filter by sales reps\", className = \"my_class\"),   NormalPeoplePicker.shinyInput(     \"selectedPeople\",     class = \"my_class\",     options = fluentPeople,     pickerSuggestionsProps = list(       suggestionsHeaderText = 'Matching people',       mostRecentlyUsedHeaderText = 'Sales reps',       noResultsFoundText = 'No results found',       showRemoveButtons = TRUE     )   ),   Slider.shinyInput(\"slider\",     value = 0, min = 0, max = 1000000, step = 100000,     label = \"Minimum amount\",     valueFormat = JS(\"function(x) { return '$' + x}\"),     snapToStep = TRUE   ),   Toggle.shinyInput(\"closedOnly\", value = TRUE, label = \"Include closed deals only?\") ) makeCard <- function(title, content, size = 12, style = \"\") {   div(     class = glue(\"card ms-depth-8 ms-sm{size} ms-xl{size}\"),     style = style,     Stack(       tokens = list(childrenGap = 5),       Text(variant = \"large\", title, block = TRUE),       content     )   ) } ui <- fluentPage(   tags$style(\".card { padding: 28px; margin-bottom: 28px; }\"),   makeCard(\"Filters\", filters, size = 4, style = \"max-height: 320px;\"),   uiOutput(\"analysis\") ) server <- function(input, output, session) {   filtered_deals <- reactive({     req(input$fromDate)     selectedPeople <- (       if (length(input$selectedPeople) > 0) input$selectedPeople       else fluentPeople$key     )     minClosedVal <- if (isTRUE(input$closedOnly)) 1 else 0      filtered_deals <- fluentSalesDeals %>%       filter(         rep_id %in% selectedPeople,         date >= input$fromDate,         date <= input$toDate,         deal_amount >= input$slider,         is_closed >= minClosedVal       ) %>%       mutate(is_closed = ifelse(is_closed == 1, \"Yes\", \"No\"))   }) makeCard(\"Top results\", div(style=\"max-height: 500px; overflow: auto\", items_list))"},{"path":"https://appsilon.github.io/shiny.fluent/articles/shiny-fluent.html","id":"more-outputs","dir":"Articles","previous_headings":"","what":"More outputs","title":"Tutorial: Create your first shiny.fluent dashboard","text":"limited shiny.fluent components - can seamlessly use libraries app! Let’s add Plotly plot Leaflet map. start adding plotlyOutput() UI: also add leafletOutput() UI generated server function: Now can add following code server function render bar chart map: Look dashboard now!","code":"ui <- fluentPage(   tags$style(\".card { padding: 28px; margin-bottom: 28px; }\"),   Stack(     tokens = list(childrenGap = 10), horizontal = TRUE,     makeCard(\"Filters\", filters, size = 4, style = \"max-height: 320px\"),     makeCard(\"Deals count\", plotlyOutput(\"plot\"), size = 8, style = \"max-height: 320px\")   ),   uiOutput(\"analysis\") ) Stack(       tokens = list(childrenGap = 10), horizontal = TRUE,       makeCard(\"Top results\", div(style=\"max-height: 500px; overflow: auto\", items_list)),       makeCard(\"Map\", leafletOutput(\"map\"))     ) output$map <- renderLeaflet({     points <- cbind(filtered_deals()$LONGITUDE, filtered_deals()$LATITUDE)     leaflet() %>%       addProviderTiles(providers$Stamen.TonerLite, options = providerTileOptions(noWrap = TRUE)) %>%       addMarkers(data = points)   })    output$plot <- renderPlotly({     p <- ggplot(filtered_deals(), aes(x = rep_name)) +       geom_bar(fill = unique(filtered_deals()$color)) +       ylab(\"Number of deals\") +       xlab(\"Sales rep\") +       theme_light()     ggplotly(p, height = 300)   })"},{"path":"https://appsilon.github.io/shiny.fluent/articles/shiny-fluent.html","id":"the-end-result","dir":"Articles","previous_headings":"","what":"The end result","title":"Tutorial: Create your first shiny.fluent dashboard","text":"tutorial built simple dashboard exploring sales representatives data. learned use shiny.fluent inputs outputs, add components libraries use Fluent UI capabilities visually arranging elements.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/articles/st-sales-reps-dashboard.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Tutorial: Full dashboard UI in Shiny and Fluent","text":"starting code Part 1 ends . Let’s start changing beginning file load libraries use example. Make sure install ones don’t yet installed ().","code":"library(dplyr) library(ggplot2) library(glue) library(leaflet) library(plotly) library(sass) library(shiny) library(shiny.fluent) library(shiny.router)"},{"path":"https://appsilon.github.io/shiny.fluent/articles/st-sales-reps-dashboard.html","id":"single-page-layout","dir":"Articles","previous_headings":"","what":"Single page layout","title":"Tutorial: Full dashboard UI in Shiny and Fluent","text":"next step, let’s add title subtitle current app. ’ll create helper function call makePage, easy add pages fashion. can now take entire UI built far put “page” layout, giving helpful title subtitle.","code":"makePage <- function (title, subtitle, contents) {   tagList(div(     class = \"page-title\",     span(title, class = \"ms-fontSize-32 ms-fontWeight-semibold\", style =            \"color: #323130\"),     span(subtitle, class = \"ms-fontSize-14 ms-fontWeight-regular\", style =            \"color: #605E5C; margin: 14px;\")   ),   contents) } analysis_page <- makePage(   \"Sales representatives\",   \"Best performing reps\",   div(     Stack(       horizontal = TRUE,       tokens = list(childrenGap = 10),       makeCard(\"Filters\", filters, size = 4, style = \"max-height: 320px\"),       makeCard(\"Deals count\", plotlyOutput(\"plot\"), size = 8, style = \"max-height: 320px\")     ),     uiOutput(\"analysis\")   ) )  ui <- fluentPage(   tags$style(\".card { padding: 28px; margin-bottom: 28px; }\"),   analysis_page )"},{"path":"https://appsilon.github.io/shiny.fluent/articles/st-sales-reps-dashboard.html","id":"dashboard-layout","dir":"Articles","previous_headings":"","what":"Dashboard Layout","title":"Tutorial: Full dashboard UI in Shiny and Fluent","text":"’s time create place header, navigation sidebar footer. ’ll use CSS grid . ’s modern, flexible staightforward way achieve layout. start creating divs areas, placeholder texts later replace. Now ’s time tell browser using CSS arrange areas. define areas laid page, let’s put following rules www/style.css: can also use opportunity add additional styling entire page, add following rules file: Now need update UI definition load styles www/style.css use new layout.","code":"header <- \"header\" navigation <- \"navigation\" footer <- \"footer\"  layout <- function(mainUI){   div(class = \"grid-container\",       div(class = \"header\", header),       div(class = \"sidenav\", navigation),       div(class = \"main\", mainUI),       div(class = \"footer\", footer)   ) } .grid-container {   display: grid;   grid-template-columns: 320px 1fr;   grid-template-rows: 54px 1fr 45px;   grid-template-areas: \"header header\" \"sidenav main\" \"footer footer\";   height: 100vh; }  .header {   grid-area: header;   background-color: #fff;   padding: 6px 0px 6px 10px;   display: flex; }  .main {   grid-area: main;   background-color: #faf9f8;   padding-left: 40px;   padding-right: 32px;   max-width: calc(100vw - 400px);   max-height: calc(100vh - 100px);   overflow: auto; }  .footer {   grid-area: footer;   background-color: #f3f2f1;   padding: 12px 20px; }  .sidenav {   grid-area: sidenav;   background-color: #fff;   padding: 25px; } body {   background-color: rgba(225, 223, 221, 0.2);   min-height: 611px;   margin: 0; }  .page-title {   padding: 52px 0px; }  .card {   background: #fff;   padding: 28px;   margin-bottom: 28px;   border-radius: 2px;   background-clip: padding-box; } ui <- fluentPage(   layout(analysis_page),   tags$head(     tags$link(href = \"style.css\", rel = \"stylesheet\", type = \"text/css\")   ))"},{"path":"https://appsilon.github.io/shiny.fluent/articles/st-sales-reps-dashboard.html","id":"filling-all-the-areas","dir":"Articles","previous_headings":"","what":"Filling all the areas","title":"Tutorial: Full dashboard UI in Shiny and Fluent","text":"Great! Now ’s time fill areas something. can start header.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/articles/st-sales-reps-dashboard.html","id":"header","dir":"Articles","previous_headings":"Filling all the areas","what":"Header","title":"Tutorial: Full dashboard UI in Shiny and Fluent","text":"Let’s replace previous header definition : can see, ’re using CommandBar CommandBarItem shiny.fluent. also need add bit styling CSS file:","code":"header <- tagList(   img(src = \"appsilon-logo.png\", class = \"logo\"),   div(Text(variant = \"xLarge\", \"Sales Reps Analysis\"), class = \"title\"),   CommandBar(     items = list(       CommandBarItem(\"New\", \"Add\", subitems = list(         CommandBarItem(\"Email message\", \"Mail\", key = \"emailMessage\", href = \"mailto:me@example.com\"),         CommandBarItem(\"Calendar event\", \"Calendar\", key = \"calendarEvent\")       )),       CommandBarItem(\"Upload sales plan\", \"Upload\"),       CommandBarItem(\"Share analysis\", \"Share\"),       CommandBarItem(\"Download report\", \"Download\")     ),     farItems = list(       CommandBarItem(\"Grid view\", \"Tiles\", iconOnly = TRUE),       CommandBarItem(\"Info\", \"Info\", iconOnly = TRUE)     ),     style = list(width = \"100%\"))) .title {   padding: 0px 14px 0px 14px;   color: #737373;   margin: 6px 0px 6px 10px;   border-left: 1px solid darkgray;   width: 220px; }  .logo {   height: 44px; }"},{"path":"https://appsilon.github.io/shiny.fluent/articles/st-sales-reps-dashboard.html","id":"navigation-in-the-sidebar","dir":"Articles","previous_headings":"Filling all the areas","what":"Navigation in the sidebar","title":"Tutorial: Full dashboard UI in Shiny and Fluent","text":"Nav powerful component Fluent UI. rich configuration options, use show just couple links:","code":"navigation <- Nav(   groups = list(     list(links = list(       list(name = 'Home', url = '#!/', key = 'home', icon = 'Home'),       list(name = 'Analysis', url = '#!/other', key = 'analysis', icon = 'AnalyticsReport'),       list(name = 'shiny.fluent', url = 'http://github.com/Appsilon/shiny.fluent', key = 'repo', icon = 'GitGraph'),       list(name = 'shiny.react', url = 'http://github.com/Appsilon/shiny.react', key = 'shinyreact', icon = 'GitGraph'),       list(name = 'Appsilon', url = 'http://appsilon.com', key = 'appsilon', icon = 'WebAppBuilderFragment')     ))   ),   initialSelectedKey = 'home',   styles = list(     root = list(       height = '100%',       boxSizing = 'border-box',       overflowY = 'auto'     )   ) )"},{"path":"https://appsilon.github.io/shiny.fluent/articles/st-sales-reps-dashboard.html","id":"footer","dir":"Articles","previous_headings":"Filling all the areas","what":"Footer","title":"Tutorial: Full dashboard UI in Shiny and Fluent","text":"Footer relatively straightforward - can put anything want . use Text typography (setting uniform font styling). also use Stack arrange elements horizontally bigger gaps. Let’s see looks together.","code":"footer <- Stack(   horizontal = TRUE,   horizontalAlign = 'space-between',   tokens = list(childrenGap = 20),   Text(variant = \"medium\", \"Built with ❤ by Appsilon\", block=TRUE),   Text(variant = \"medium\", nowrap = FALSE, \"If you'd like to learn more, reach out to us at hello@appsilon.com\"),   Text(variant = \"medium\", nowrap = FALSE, \"All rights reserved.\") )   layout <- function(mainUI){   div(class = \"grid-container\",       div(class = \"header\", header),       div(class = \"sidenav\", navigation),       div(class = \"main\", mainUI),       div(class = \"footer\", footer)   ) }  # --- ui <- fluentPage(   layout(analysis_page),   tags$head(     tags$link(href = \"style.css\", rel = \"stylesheet\", type = \"text/css\")   ))"},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/articles/st-sales-reps-dashboard.html","id":"home-page","dir":"Articles","previous_headings":"Additional pages","what":"Home page","title":"Tutorial: Full dashboard UI in Shiny and Fluent","text":"one final step add additional pages. Let’s make home page, consisting two cards welcome text. replace analysis_page home_page ui, can even see page. However, ’s one problem: don’t way switch pages! -called page routing comes play.","code":"card1 <- makeCard(   \"Welcome to shiny.fluent demo!\",   div(     Text(\"shiny.fluent is a package that allows you to build Shiny apps using Microsoft's Fluent UI.\"),     Text(\"Use the menu on the left to explore live demos of all available components.\")   ))  card2 <- makeCard(   \"shiny.react makes it easy to use React libraries in Shiny apps.\",   div(     Text(\"To make a React library convenient to use from Shiny, we need to write an R package that wraps it - for example, a shiny.fluent package for Microsoft's Fluent UI, or shiny.blueprint for Palantir's Blueprint.js.\"),     Text(\"Communication and other issues in integrating Shiny and React are solved and standardized in shiny.react package.\"),     Text(\"shiny.react strives to do as much as possible automatically, but there's no free lunch here, so in all cases except trivial ones you'll need to do some amount of manual work. The more work you put into a wrapper package, the less work your users will have to do while using it.\")   ))  home_page <- makePage(   \"This is a Fluent UI app built in Shiny\",   \"shiny.react + Fluent UI = shiny.fluent\",   div(card1, card2) )"},{"path":"https://appsilon.github.io/shiny.fluent/articles/st-sales-reps-dashboard.html","id":"adding-shiny-router","dir":"Articles","previous_headings":"Additional pages","what":"Adding shiny.router","title":"Tutorial: Full dashboard UI in Shiny and Fluent","text":"enable switching pages use shiny.router package. way also shareable URLs individual pages. first step define available routes: Now, need put router$ui place want selected page appear. (Currently, also need manually include router’s JavaScript dependencies, shiny.fluent compatible way shiny.router loads dependency. expect resolved future versions shiny.router). One final step add single line server function, otherwise remains untouched Part 1 tutorial.","code":"router <- make_router(   route(\"/\", home_page),   route(\"other\", analysis_page)) # Add shiny.router dependencies manually: they are not picked up because they're added in a non-standard way. shiny::addResourcePath(\"shiny.router\", system.file(\"www\", package = \"shiny.router\")) shiny_router_js_src <- file.path(\"shiny.router\", \"shiny.router.js\") shiny_router_script_tag <- shiny::tags$script(type = \"text/javascript\", src = shiny_router_js_src)   ui <- fluentPage(   layout(router$ui),   tags$head(     tags$link(href = \"style.css\", rel = \"stylesheet\", type = \"text/css\"),     shiny_router_script_tag   )) router$server(input, output, session)"},{"path":"https://appsilon.github.io/shiny.fluent/articles/st-sales-reps-dashboard.html","id":"thats-it","dir":"Articles","previous_headings":"","what":"That’s it!","title":"Tutorial: Full dashboard UI in Shiny and Fluent","text":"’s - styled shiny.fluent app solid dashboard layout!","code":""},{"path":"https://appsilon.github.io/shiny.fluent/articles/topic_react-in-shiny.html","id":"fluent-inputs","dir":"Articles","previous_headings":"","what":"Fluent inputs","title":"Topic guide: React in Shiny","text":"Shiny notion “inputs”, exist React. Still, can connect React components Shiny using appropriate arguments - particular event handlers default values. example, can use Checkbox following way: setInput(\"checkbox\", 2) create JavaScript function takes second argument sends Shiny input$checkbox. effect achieved JS(\"(e, value) => Shiny.setInputValue('checkbox', value)\"). React interface powerful, somewhat inconvenient. make easier use components Shiny inputs, provide wrappers .shinyInput suffix. provide interface analogous vanilla Shiny inputs: inputId optional value. checkbox usage can translated : Additionally, wrapper: can updated using updateCheckbox.shinyInput(), sends initial value Shiny first rendered.","code":"shinyApp(   ui = tagList(     Checkbox(onChange = setInput(\"checkbox\", 2), defaultChecked = TRUE, label = \"Checkbox\"),     textOutput(\"value\")   ),   server = function(input, output) {     output$value <- renderText(deparse(input$checkbox))   } ) Checkbox.shinyInput(\"checkbox\", value = TRUE, label = \"Checkbox\")"},{"path":"https://appsilon.github.io/shiny.fluent/articles/topic_react-in-shiny.html","id":"dynamic-rendering","dir":"Articles","previous_headings":"","what":"Dynamic rendering","title":"Topic guide: React in Shiny","text":"need dynamically render UI, time can just go uiOutput renderUI. However cases might want use analogous ?reactOutput ?renderReact, preserve state components rerenders. understand means, consider following example: app displays checkbox text field. text field rendered dynamically, whether enabled depends value checkbox. input text text field toggle checkbox, text field become disabled, contents preserved. replaced reactOutput renderReact uiOutput renderUI, contents cleared time toggled checkbox.","code":"shinyApp(   ui = div(     Checkbox.shinyInput(\"disabled\", label = \"Disable\"),     reactOutput(\"ui\")   ),   server = function(input, output) {     output$ui <- renderReact({       TextField.shinyInput(\"text\", label = \"TextField\", disabled = input$disabled)     })   } )"},{"path":"https://appsilon.github.io/shiny.fluent/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kamil Żyła. Author, maintainer. Jakub Sobolewski. Author. Marek Rogala. Author. Appsilon Sp. z o.o.. Copyright holder.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Żyła K, Sobolewski J, Rogala M (2023). shiny.fluent: Microsoft Fluent UI Shiny Apps. https://appsilon.github.io/shiny.fluent/, https://github.com/appsilon/shiny.fluent.","code":"@Manual{,   title = {shiny.fluent: Microsoft Fluent UI for Shiny Apps},   author = {Kamil Żyła and Jakub Sobolewski and Marek Rogala},   year = {2023},   note = {https://appsilon.github.io/shiny.fluent/, https://github.com/appsilon/shiny.fluent}, }"},{"path":"https://appsilon.github.io/shiny.fluent/index.html","id":"shinyfluent-","dir":"","previous_headings":"","what":"Microsoft Fluent UI for Shiny Apps","title":"Microsoft Fluent UI for Shiny Apps","text":"Microsoft Fluent UI Shiny Apps believe great UI plays huge role success application projects. shiny.fluent gives apps: - beautiful, professional look - rich set components easily usable Shiny - fast speed development Shiny famous . Fluent UI built React, shiny.fluent based another package called shiny.react, allows using React libraries Shiny. big game-changer companies already using Microsoft tools daily basis, everyone already familiar pleased Microsoft UI. Note: package strives easy use possible, providing Fluent UI possibilities. said, Fluent UI flexible low level Bootstrap, additional complexity coming using React Shiny. expect using shiny.fluent somewhat complex vanilla Shiny shiny.semantic (point likely want browse original Fluent UI documentation), get power, flexibility better UI return. shinyfluentapp","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/index.html","id":"installation","dir":"","previous_headings":"Getting started","what":"Installation","title":"Microsoft Fluent UI for Shiny Apps","text":"Stable version: Development version:","code":"install.packages(\"shiny.fluent\") remotes::install_github(\"Appsilon/shiny.fluent\")"},{"path":"https://appsilon.github.io/shiny.fluent/index.html","id":"quick-start","dir":"","previous_headings":"Getting started","what":"Quick start","title":"Microsoft Fluent UI for Shiny Apps","text":"’s make app containing Fluent UI checkbox: shiny.fluent provides components Microsoft’s Fluent UI library. Browse official docs start typing shiny.fluent:: RStudio see available controls. components documented, run ?shiny.fluent::MyComponentName, ’ll see documentation component RStudio, along examples. doubt, open Fluent UI docs details.","code":"shinyApp(     ui = div(       Checkbox.shinyInput(\"checkbox\", value = TRUE),       textOutput(\"checkboxValue\")     ),     server = function(input, output) {       output$checkboxValue <- renderText({         sprintf(\"Value: %s\", input$checkbox)       })     }   )"},{"path":"https://appsilon.github.io/shiny.fluent/index.html","id":"examples","dir":"","previous_headings":"Getting started","what":"Examples","title":"Microsoft Fluent UI for Shiny Apps","text":"good way learn look examples. install library, can run shiny.fluent::runExample(\"example_name\"). recommend following starters: * demo: demo app analyzing sales reps performance, * dashboard: showcase available components along documentation. also usage examples individual components. Use shiny.fluent::runExample() list available examples.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/index.html","id":"appsilon","dir":"","previous_headings":"","what":"Appsilon","title":"Microsoft Fluent UI for Shiny Apps","text":"Appsilon Posit (formerly RStudio) Full Service Certified Partner. Learn appsilon.com. Get touch. Check Open Source tools.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ActivityItem.html","id":null,"dir":"Reference","previous_headings":"","what":"ActivityItem — ActivityItem","title":"ActivityItem — ActivityItem","text":"activity item (ActivityItem) represents  person's actions, making comment, mentioning someone   @mention, editing document, moving file. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ActivityItem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ActivityItem — ActivityItem","text":"","code":"ActivityItem(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ActivityItem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ActivityItem — ActivityItem","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ActivityItem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ActivityItem — ActivityItem","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ActivityItem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ActivityItem — ActivityItem","text":"activityDescription  React.ReactNode[] | React.ReactNode  element describing activity took place. activityDescription, activityDescriptionText, onRenderActivityDescription included, description activity shown. activityDescriptionText  string  Text describing activity occurred naming people involved . Deprecated, use activityDescription instead. activityIcon  React.ReactNode  element containing icon shown next activity item. activityPersonas  Array<IPersonaSharedProps>  activityIcon set, persona props array used icon activity item. animateBeaconSignal  boolean  Enables/Disables beacon radiates center center activity icon. Signals activity started. beaconColorOne  string  Beacon color one beaconColorTwo  string  Beacon color two comments  React.ReactNode[] | React.ReactNode  element containing text comments \\@mention messages. comments, commentText, onRenderComments included, comments shown. commentText  string  Text comments \\@mention messages. Deprecated, use comments instead. isCompact  boolean  Indicated compact styling used. onRenderActivityDescription  IRenderFunction<IActivityItemProps>  renderer description current activity. onRenderComments  IRenderFunction<IActivityItemProps>  renderer adds text comment activity description. onRenderIcon  IRenderFunction<IActivityItemProps>  renderer create icon next activity item. onRenderTimeStamp  IRenderFunction<IActivityItemProps>  renderer adds time stamp. included, timeStamp shown plain text activity. styles  IActivityItemStyles  Optional styling elements within Activity Item. timeStamp  string | React.ReactNode[] | React.ReactNode  Element shown timestamp activity. included, timestamp shown.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/ActivityItem.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"ActivityItem — ActivityItem","text":"Use list multiple activity items indicate  history events relating single file, folder, person, entity. Alternatively, use single activity item indicate recent event entity. Group multiple similar events occurring near time single activity item.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ActivityItem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ActivityItem — ActivityItem","text":"","code":"library(shiny) #>  #> Attaching package: ‘shiny’ #> The following object is masked from ‘package:shiny.fluent’: #>  #>     runExample library(shiny.fluent)  ui <- function(id) {   ActivityItem(     activityDescription = tagList(       Link(key = 1, \"Philippe Lampros\"),       tags$span(key = 2, \" commented\")     ),     activityIcon = Icon(iconName = \"Message\"),     comments = tagList(       tags$span(key = 1, \"Hello! I am making a comment.\")     ),     timeStamp = \"Just now\"   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Announced.html","id":null,"dir":"Reference","previous_headings":"","what":"Announced — Announced","title":"Announced — Announced","text":"Announced component aims fill several accessibility gaps exist various web application experiences. provides text screen reader certain scenarios lacking comprehensive updates, particularly showing completion status progress operation(s). real-world applications component include copying, uploading, moving many files; deleting renaming single file; \"lazy loading\" page sections appear ; appearance search results. Announced component currently following documented use cases: Quick Actions: Operations editing text deletion short enough require status progress. Search Results: Appearance search results contact fields search boxes. Lazy Loading: \"Lazy loading\" page sections appear . Bulk Operations: Operations require multiple sub operations, moving several files. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Announced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Announced — Announced","text":"","code":"Announced(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Announced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Announced — Announced","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Announced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Announced — Announced","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Announced.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Announced — Announced","text":"\"aria-live\"  '' | 'polite' | 'assertive'  Priority screen reader treat updates region  @default 'polite'  React.ElementType  Optionally render root component another component type primitive. custom type must preserve children native props passed .  @default 'div' message  string  status message provided screen reader output styles  IStyleFunctionOrObject<{}, IAnnouncedStyles>  Call provide customized styling layer top variant rules.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Announced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Announced — Announced","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   Announced(message = \"Screen reader message\") }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Breadcrumb.html","id":null,"dir":"Reference","previous_headings":"","what":"Breadcrumb — Breadcrumb","title":"Breadcrumb — Breadcrumb","text":"Breadcrumbs used navigational aid app site. indicate current page’s location within hierarchy help user understand relation rest hierarchy. also afford one-click access higher levels hierarchy. Breadcrumbs typically placed, horizontal form, masthead navigation experience, primary content area. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Breadcrumb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breadcrumb — Breadcrumb","text":"","code":"Breadcrumb(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Breadcrumb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Breadcrumb — Breadcrumb","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Breadcrumb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Breadcrumb — Breadcrumb","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Breadcrumb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Breadcrumb — Breadcrumb","text":"ariaLabel  string  Aria label root element breadcrumb (navigation landmark). className  string  Optional class root breadcrumb element. componentRef  IRefObject<IBreadcrumb>  Optional callback access IBreadcrumb interface. Use instead ref accessing public methods properties component. dividerAs  IComponentAs<IDividerAsProps>  Render custom divider place default chevron > focusZoneProps  IFocusZoneProps  Extra props root FocusZone. items  IBreadcrumbItem[]  Collection breadcrumbs render maxDisplayedItems  number  maximum number breadcrumbs display coalescing. specified, breadcrumbs rendered. onGrowData  (data: IBreadcrumbData) => IBreadcrumbData | undefined  Method determines group length breadcrumb. Return undefined never increase breadcrumb length. onReduceData  (data: IBreadcrumbData) => IBreadcrumbData | undefined  Method determines reduce length breadcrumb. Return undefined never reduce breadcrumb length. onRenderItem  IRenderFunction<IBreadcrumbItem>  Custom render function breadcrumb item. onRenderOverflowIcon  IRenderFunction<IButtonProps>  Render custom overflow icon place default icon ... overflowAriaLabel  string  Aria label overflow button. overflowIndex  number  Optional index overflow items collapsed. Defaults 0. styles  IStyleFunctionOrObject<IBreadcrumbStyleProps, IBreadcrumbStyles> theme  ITheme tooltipHostProps  ITooltipHostProps  Extra props TooltipHost wraps breadcrumb item. item  IBreadcrumbItem  Breadcrumb item left divider passed custom rendering. overflowed items, last item list.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Breadcrumb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Breadcrumb — Breadcrumb","text":"","code":"library(shiny) library(shiny.fluent)  items <- list(   list(text = \"Files\", key = \"Files\", href = \"#/page\"),   list(text = \"Folder 1\", key = \"f1\", href = \"#/page\"),   list(text = \"Folder 2\", key = \"f2\", href = \"#/page\"),   list(text = \"Folder 3\", key = \"f3\", href = \"#/page\"),   list(text = \"Folder 4 (non-clickable)\", key = \"f4\"),   list(text = \"Folder 5\", key = \"f5\", href = \"#/page\", isCurrentItem = TRUE) )  ui <- function(id) {   Breadcrumb(     items = items,     maxDisplayedItems = 3,     ariaLabel = \"Breadcrumb with items rendered as links\",     overflowAriaLabel = \"More links\"   ) } server <- function(id) {   moduleServer(id, function(input, output, session) { }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Button.html","id":null,"dir":"Reference","previous_headings":"","what":"Button — ActionButton","title":"Button — ActionButton","text":"Buttons give people way trigger action. ’re typically found forms, dialog panels, dialogs. buttons specialized  particular tasks, navigation, repeated actions, presenting menus. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Button — ActionButton","text":"","code":"ActionButton(...)  CommandBarButton(...)  CommandButton(...)  CompoundButton(...)  DefaultButton(...)  IconButton(...)  PrimaryButton(...)  ActionButton.shinyInput(inputId, ...)  updateActionButton.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )  CommandBarButton.shinyInput(inputId, ...)  updateCommandBarButton.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )  CommandButton.shinyInput(inputId, ...)  updateCommandButton.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )  CompoundButton.shinyInput(inputId, ...)  updateCompoundButton.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )  DefaultButton.shinyInput(inputId, ...)  updateDefaultButton.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )  IconButton.shinyInput(inputId, ...)  updateIconButton.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )  PrimaryButton.shinyInput(inputId, ...)  updatePrimaryButton.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Button — ActionButton","text":"... Props pass component. allowed props listed Details section. inputId ID component. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Button.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Button — ActionButton","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Button.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Button — ActionButton","text":"baseClassName  string variantClassName  string allowDisabledFocus  boolean  Whether button can focus disabled mode ariaDescription  string  Detailed description button benefit screen readers.Besides compound button, button types need information provided screen reader. ariaHidden  boolean  provided true adds 'aria-hidden' attribute instructing screen readers ignore element. ariaLabel  string  aria label button benefit screen readers. buttonType  ButtonType  Deprecated v1.2.3, removed \\>= v2.0.0. Use specific button component instead. checked  boolean  Whether button checked className  string  provided, additional class name provide root element. componentRef  IRefObject<IButton>  Optional callback access IButton interface. Use instead ref accessing public methods properties component. data   custom data developer wishes associate menu item. defaultRender   yet unknown docs description  IStyle  Style description text applicable (compound buttons.) Deprecated, use secondaryText instead. disabled  boolean  Whether button disabled getClassNames  (theme: ITheme, className: string, variantClassName: string, iconClassName: string | undefined, menuIconClassName: string | undefined, disabled: boolean, checked: boolean, expanded: boolean, hasMenu: boolean, isSplit: boolean | undefined, allowDisabledFocus: boolean) => IButtonClassNames  Method provide classnames style button. default value prop getClassnames func defined BaseButton.classnames. getSplitButtonClassNames  (disabled: boolean, expanded: boolean, checked: boolean, allowDisabledFocus: boolean) => ISplitButtonClassNames  Method provide classnames style button. default value prop getClassnames func defined BaseButton.classnames. href  string  provided, component rendered anchor. iconProps  IIconProps  props icon shown button. keytipProps  IKeytipProps  Optional keytip button menuAs  IComponentAs<IContextualMenuProps>  Render custom menu place normal one. menuIconProps  IIconProps  props icon shown providing menu dropdown. menuProps  IContextualMenuProps  Props button menu. Providing default showing menu icon. See menuIconProps overriding default icon looks. Providing addition onClick setting split property true render SplitButton. menuTriggerKeyCode  KeyCodes | null  Provides custom KeyCode can used open button menu. default KeyCode arrow. value null can provided disable key codes opening button menu. onAfterMenuDismiss  () => void  Callback runs Button's contextualmenu closed (removed DOM) onMenuClick  (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, button?: IButtonProps) => void  Optional callback menu clicked. onRenderAriaDescription  IRenderFunction<IButtonProps>  Custom render function aria description element. onRenderChildren  IRenderFunction<IButtonProps>  Custom render function rendering button children. onRenderDescription  IRenderFunction<IButtonProps>  Custom render function desciption text. onRenderIcon  IRenderFunction<IButtonProps>  Custom render function icon onRenderMenu  IRenderFunction<IContextualMenuProps>  Deprecated v6.3.2, removed \\>= v7.0.0. Use menuAs instead. onRenderMenuIcon  IRenderFunction<IButtonProps>  Custom render function button menu icon onRenderText  IRenderFunction<IButtonProps>  Custom render function label text. persistMenu  boolean  Menu created destroyed opened closed, instead hidden. improve perf menu opening potentially impact overall perf elements dom. used perf important. Note: may increase amount time takes button mount. primary  boolean  Changes visual presentation button emphasized (defined) primaryActionButtonProps  IButtonProps  Optional props applied primary action button SplitButton overall SplitButton container primaryDisabled  boolean  set true splitButton (split == true) primary action split button disabled. renderPersistedMenuHiddenOnMount  boolean  true, persisted menu rendered hidden button initially mounts. Non-persisted menus component tree unless shownNote: increases time button take mount, can improve perceived menu open perf. user opens menu. rootProps  React.ButtonHTMLAttributes<HTMLButtonElement> | React.AnchorHTMLAttributes<HTMLAnchorElement>  Deprecated v0.56.2, removed \\>= v1.0.0. Just pass button props instead. mixed button/anchor element rendered component. secondaryText  string  Description action button takes. used compound buttons split  boolean  set true, menuProps onClick provided, button render SplitButton. splitButtonAriaLabel  string  Accessible label dropdown chevron button button split. splitButtonMenuProps  IButtonProps  Experimental prop get passed menuButton rendered part split button. Anything passed likely need accompanying style changes. styles  IButtonStyles  Custom styling individual elements within button DOM. text  string  Text render button label. text supplied, override string button children. children components passed text. theme  ITheme  Theme provided HOC. toggle  boolean  Whether button toggle button distinct states. true buttons permanently change state press event finishes, volume mute button. toggled  boolean  custom data developer wishes associate menu item. Deprecated, use checked setting state. uniqueId  string | number  Unique id identify item. Typically duplicate key value.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Button.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Button — ActionButton","text":"dialog boxes panels, people moving sequence screens, right-align buttons container. single-page forms focused tasks, left-align buttons container. Always place primary button left, secondary button just right . Show one primary button inherits theme color rest state. two buttons equal priority, buttons neutral backgrounds. use button navigate another place; use link instead. exception wizard \"Back\" \"Next\" buttons may used. place default focus button destroys data. Instead, place default focus button performs \"safe act\" retains content (\"Save\") cancels action (\"Cancel\").","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Button.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"Button — ActionButton","text":"Use sentence-style capitalization—capitalize first word. info, see Capitalization Microsoft Writing Style Guide. Make sure clear happen people interact button. concise; usually single verb best. Include noun room interpretation verb means. example, \"Delete folder\" \"Create account\".","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Button.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Button — ActionButton","text":"","code":"library(shiny) library(shiny.fluent)  tokens <- list(childrenGap = 20)  ui <- function(id) {   ns <- NS(id)   tags$div(     Stack(       DefaultButton.shinyInput(         ns(\"button1\"),         text = \"Default Button\",         styles = list(\"background: green\")       ),       PrimaryButton.shinyInput(         ns(\"button2\"),         text = \"Primary Button\"       ),       CompoundButton.shinyInput(         ns(\"button3\"),         secondaryText = \"Compound Button has additional text\",         text = \"Compound Button\"       ),       ActionButton.shinyInput(         ns(\"button4\"),         iconProps = list(\"iconName\" = \"AddFriend\"),         text = \"Action Button\"       ),       horizontal = TRUE,       tokens = tokens     ),     textOutput(ns(\"text\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     clicks <- reactiveVal(0)     addClick <- function() { clicks(isolate(clicks() + 1)) }     observeEvent(input$button0, addClick())     observeEvent(input$button1, addClick())     observeEvent(input$button2, addClick())     observeEvent(input$button3, addClick())     observeEvent(input$button4, addClick())     output$text <- renderText({       paste0(\"Clicks:\", clicks())     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Calendar.html","id":null,"dir":"Reference","previous_headings":"","what":"Calendar — Calendar","title":"Calendar — Calendar","text":"calendar control lets people select view single date range dates calendar. ’s made 3 separate views: month view, year view, decade view. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Calendar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calendar — Calendar","text":"","code":"Calendar(...)  Calendar.shinyInput(inputId, ..., value = shiny.react::JS(\"new Date()\"))  updateCalendar.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Calendar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calendar — Calendar","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Calendar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calendar — Calendar","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Calendar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calendar — Calendar","text":"allFocusable  boolean  Allows dates buttons focused, including disabled ones autoNavigateOnSelection  boolean  Whether month view automatically navigate next previous date range depending selected date. property set true currently displayed month March 2017, user clicks day outside month, .e., April 1st, picker automatically navigate month April. className  string  Optional class name add root element. componentRef  IRefObject<ICalendar>  Optional callback access ICalendar interface. Use instead ref accessing public methods properties component. dateRangeType  DateRangeType  date range type indicating many days selected user selects days dateTimeFormatter  ICalendarFormatDateCallbacks  Apply additional formating dates, example localized date formatting. firstDayOfWeek  DayOfWeek  first day week locale. firstWeekOfYear  FirstWeekOfYear  Defines first week year start, FirstWeekOfYear.FirstDay, FirstWeekOfYear.FirstFullWeek FirstWeekOfYear.FirstFourDayWeek possible values highlightCurrentMonth  boolean  Whether month picker highlight current month highlightSelectedMonth  boolean  Whether month picker highlight selected month isDayPickerVisible  boolean  Whether day picker shown beside month picker hidden. isMonthPickerVisible  boolean  Whether month picker shown beside day picker hidden. maxDate  Date  set Calendar allow navigation selection date later value. minDate  Date  set Calendar allow navigation selection date earlier value. navigationIcons  ICalendarIconStrings  Customize navigation icons using ICalendarIconStrings onDismiss  () => void  Callback issued calendar closed onSelectDate  (date: Date, selectedDateRangeArray?: Date[]) => void  Callback issued date selected restrictedDates  Date[]  set Calendar allow selection dates array. selectDateOnClick  boolean  clicking \"Today\", select date close calendar. shouldFocusOnMount  boolean  property removed 0.80.0 place focus method, removed \\@ 1.0.0. showCloseButton  boolean  Whether close button shown showGoToToday  boolean  Whether \"Go today\" link shown showMonthPickerAsOverlay  boolean  Show month picker top date picker visible. showSixWeeksByDefault  boolean  Whether calendar show 6 weeks default. showWeekNumbers  boolean  Whether calendar show week number (weeks 1 53) week row strings  ICalendarStrings | null  Localized strings use Calendar today  Date  Value today. null, current time client machine used. value  Date  Default value Calendar, workWeekDays  DayOfWeek[]  days selectable dateRangeType WorkWeek. dateRangeType WorkWeek property nothing. yearPickerHidden  boolean  Whether year picker enabled","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Calendar.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Calendar — Calendar","text":"Don’t break control apart. Include arrow navigating time ranges chevron make calendar collapsible.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Calendar.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"Calendar — Calendar","text":"Use following format dates: month, day, year,   July 31, 2016.  space limited, use numbers slashes dates code supports format automatically displays appropriate date format different locales. example, 2/16/19. use ordinal numbers ( 1st, 12th,  23rd) indicate date.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Calendar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calendar — Calendar","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     Calendar.shinyInput(ns(\"calendar\"), value = \"2020-06-25T22:00:00.000Z\"),     textOutput(ns(\"calendarValue\")),     h3(\"If `value` is missing, default to system date\"),     Calendar.shinyInput(ns(\"calendar2\")),     textOutput(ns(\"calendarDefault\")),     h3(\"If `value` is NULL, also default to system date\"),     Calendar.shinyInput(ns(\"calendar3\"), value = NULL),     textOutput(ns(\"calendarNull\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$calendarValue <- renderText({       sprintf(\"Value: %s\", input$calendar)     })     output$calendarDefault <- renderText({       sprintf(\"Value: %s\", input$calendar2)     })     output$calendarNull <- renderText({       sprintf(\"Value: %s\", input$calendar3)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Callout.html","id":null,"dir":"Reference","previous_headings":"","what":"Callout — Callout","title":"Callout — Callout","text":"callout anchored tip can used  teach people  guide  app without blocking . details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Callout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Callout — Callout","text":"","code":"Callout(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Callout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Callout — Callout","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Callout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Callout — Callout","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Callout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Callout — Callout","text":"alignTargetEdge  boolean  true positioning logic prefer flip edges rather nudge rectangle fit within bounds, thus making sure element aligns perfectly target's alignment edge ariaDescribedBy  string  Defines element id referencing element containing description callout. ariaLabel  string  Accessible label text callout. ariaLabelledBy  string  Defines element id referencing element containing label text callout. backgroundColor  string  background color Callout hex format ie. #ffffff. beakWidth  number  width beak. bounds  IRectangle | ((target?: Target, targetWindow?: Window) => IRectangle | undefined)  bounding rectangle (callback returns rectangle) contextual menu can appear . calloutMaxHeight  number  Set max height callout set callout expand contents bottom screen calloutMaxWidth  number  Custom width callout including borders. value 0, width applied. calloutWidth  number  Custom width callout including borders. value 0, width applied. className  string  CSS class apply callout. coverTarget  boolean  true position returned menu element cover target. false position next target; directionalHint  DirectionalHint  element positioned directionalHintFixed  boolean  true position change sides attempt fit callout within bounds. still attempt align whatever bounds given. directionalHintForRTL  DirectionalHint  element positioned RTL layouts. specified, mirror directionalHint alignment edge used instead. means DirectionalHint.BottomLeft change DirectionalHint.BottomRight DirectionalHint.LeftAuto change. doNotLayer  boolean  true render new layer. false render new layer. finalHeight  number  Specify final height content. used expanding content dynamically callout can adjust position. gapSpace  number  gap Callout target hidden  boolean  specified, renders Callout hidden state. Use flag, rather rendering callout conditionally based visibility, improve rendering performance becomes visible. Note: callout hidden content rendered. render callout visible. hideOverflow  boolean  Manually set OverflowYHidden style prop true calloutMain element variety callout load animations need hide scollbar can appear isBeakVisible  boolean  true beak visible. false shown. layerProps  ILayerProps  Optional props pass Layer component hosting panel. minPagePadding  number  minimum distance callout away edge screen. onDismiss  (ev?: ) => void  Callback Callout tries close. onLayerMounted  () => void  Optional callback layer content mounted. onPositioned  (positions?: ICalloutPositionedInfo) => void  Optional callback called callout correctly positioned. onRestoreFocus  (options: { originalElement?: HTMLElement | Window; containsFocus: boolean; }) => void  Called component unmounting, focus needs restored. Argument passed contains two variables, element underlying popup believes focus go * whether popup currently contains focus. provided, focus restored automatically, need call originalElement.focus() onScroll  () => void  Callback Callout body scrolled. preventDismissOnLostFocus  boolean  true callout dismiss loses focus preventDismissOnResize  boolean  true callout dismiss resize preventDismissOnScroll  boolean  true callout dismiss scroll role  string  Aria role assigned callout (Eg. dialog, alertdialog). setInitialFocus  boolean  true callout attempt focus first focusable element contains. find element, focus set method return false. means contents responsibility either set focus focusable items. shouldRestoreFocus  boolean  true, component unmounted, focus restored element focus component first mounted. shouldUpdateWhenHidden  boolean  true, component updated even hidden=true. Note consume resources update even though nothing shown user. might helpful though updates small want callout revealed fast user hidden set false. style  React.CSSProperties  CSS style apply callout.set overflowY object, provides performance optimization preventing Popup (underlying component Callout) calculating whether needs scroll bar. styles  IStyleFunctionOrObject<ICalloutContentStyleProps, ICalloutContentStyles>  Optional styles component. target  Target  target Callout try position based . can either Element querySelector string valid Element MouseEvent. MouseEvent given origin point event used. theme  ITheme  Optional theme component","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Callout.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Callout — Callout","text":"Don’t use callout ask action confirmation; use  dialog instead. Place callout near object described. pointer’s tail head, possible. use large, unformatted blocks text callout. difficult read overwhelming. Don’t block important UI placement callout.  poor user experience lead frustration. Don’t open callout within another callout. Don’t show callouts hidden elements. Don’t overuse callouts. many callouts opening automatically can perceived interrupting someone's workflow. particularly complex concept needs explanation, place info icon (iconClassNames.info) next concept indicate helpful information available. someone hovers selects icon, callout appear.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Callout.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"Callout — Callout","text":"content inside callout always visible, put required information callout. Short sentences sentence fragments  best. use obvious tip text text simply repeats already screen. Limit information inside callout supplemental information. additional context advanced description necessary, consider placing link \"Learn \" bottom callout. clicked, open additional content new window panel.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Callout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Callout — Callout","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     DefaultButton.shinyInput(ns(\"toggleCallout\"), text = \"Toggle Callout\"),     reactOutput(ns(\"callout\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     show <- reactiveVal(FALSE)     observeEvent(input$toggleCallout, show(!show()))     output$callout <- renderReact({       if (show()) {         Callout(           tags$div(             style = \"margin: 10px\",             \"Callout contents\"           )         )       }     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Checkbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkbox — Checkbox","title":"Checkbox — Checkbox","text":"Check boxes (Checkbox) give people way select one items group, switch two mutually exclusive options (checked unchecked, ). details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Checkbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkbox — Checkbox","text":"","code":"Checkbox(...)  Checkbox.shinyInput(inputId, ..., value = defaultValue)  updateCheckbox.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Checkbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkbox — Checkbox","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Checkbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checkbox — Checkbox","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Checkbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checkbox — Checkbox","text":"ariaDescribedBy  string  ID element provides extended information checkbox. ariaLabel  string  Accessible label checkbox. ariaLabelledBy  string  ID element contains label information checkbox. ariaPositionInSet  number  position parent set (set) aria-posinset. ariaSetSize  number  total size parent set (set) aria-setsize. boxSide  'start' | 'end'  Allows set checkbox (start) (end) label. checked  boolean  Checked state. Mutually exclusive \"defaultChecked\". Use control checked state higher level plan pass correct value based handling onChange events re-rendering. checkmarkIconProps  IIconProps  Custom icon props check mark rendered checkbox className  string  Additional class name provide root element, addition ms-Checkbox class. componentRef  IRefObject<ICheckbox>  Optional callback access ICheckbox interface. Use instead ref accessing public methods properties component. defaultChecked  boolean  Default checked state. Mutually exclusive \"checked\". Use want uncontrolled component, want Checkbox instance maintain state. defaultIndeterminate  boolean  Optional uncontrolled indeterminate visual state checkbox. Setting indeterminate state takes visual precedence checked defaultChecked props given affect checked state. toggleable state. load checkbox receive indeterminate visual state user's first click removed exposing true state checkbox. disabled  boolean  Disabled state checkbox. indeterminate  boolean  Optional controlled indeterminate visual state checkbox. Setting indeterminate state takes visual precedence checked defaultChecked props given affect checked state. toggleable state. load checkbox receive indeterminate visual state first user click removed supplied onChange callback function exposing true state checkbox. inputProps  React.ButtonHTMLAttributes<HTMLElement | HTMLButtonElement>  Optional input props mixed input element, props applied. allows extend input element additional attributes, data-automation-id needed automation. Note provide, example, \"disabled\" well \"inputProps.disabled\", former take precedence later. keytipProps  IKeytipProps  Optional keytip checkbox label  string  Label display next checkbox. onChange  (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => void  Callback called checked value changed. onRenderLabel  IRenderFunction<ICheckboxProps>  Custom render function label. styles  IStyleFunctionOrObject<ICheckboxStyleProps, ICheckboxStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided HOC.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Checkbox.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Checkbox — Checkbox","text":"Use single check box one selection make choice confirm. Selecting blank check box selects . Selecting clears check box. Use multiple check boxes one options can selected group. Unlike radio buttons, selecting one check box clear another check box.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Checkbox.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"Checkbox — Checkbox","text":"Separate two groups check boxes headings rather positioning one . Use sentence-style capitalization—capitalize first word. info, see Capitalization Microsoft Writing Style Guide. use end punctuation (unless check box label absolutely requires multiple sentences). Use sentence fragment label, rather full sentence. Make easy people understand happen select clear check box.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Checkbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checkbox — Checkbox","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     Checkbox.shinyInput(ns(\"checkbox\"), value = FALSE),     textOutput(ns(\"checkboxValue\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$checkboxValue <- renderText({       sprintf(\"Value: %s\", input$checkbox)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ChoiceGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"ChoiceGroup — ChoiceGroup","title":"ChoiceGroup — ChoiceGroup","text":"Radio buttons (ChoiceGroup) let people select single option two choices. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ChoiceGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ChoiceGroup — ChoiceGroup","text":"","code":"ChoiceGroup(...)  ChoiceGroup.shinyInput(inputId, ..., value = defaultValue)  updateChoiceGroup.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ChoiceGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ChoiceGroup — ChoiceGroup","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ChoiceGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ChoiceGroup — ChoiceGroup","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ChoiceGroup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ChoiceGroup — ChoiceGroup","text":"componentRef  IRefObject<IChoiceGroupOption>  Optional callback access IChoiceGroup interface. Use instead ref accessing public methods properties component. focused  boolean  Indicates ChoiceGroupOption appear focused, visually name  string  value used group ChoiceGroupOption logical ChoiceGroup onBlur  (ev: React.FocusEvent<HTMLElement>, props?: IChoiceGroupOption) => void  callback receiving notification choice lost focus. onChange  (evt?: React.FormEvent<HTMLElement | HTMLInputElement>, props?: IChoiceGroupOption) => void  callback receiving notification choice changed. onFocus  (ev?: React.FocusEvent<HTMLElement | HTMLInputElement>, props?: IChoiceGroupOption) => void | undefined  callback receiving notification choice received focus. required  boolean  true, specifies option must selected ChoiceGroup submitting form theme  ITheme  Theme (provided customization.) ariaLabelledBy  string  ID element use aria label ChoiceGroup. componentRef  IRefObject<IChoiceGroup>  Optional callback access IChoiceGroup interface. Use instead ref accessing public methods properties component. defaultSelectedKey  string | number  key option initially checked. label  string  Descriptive label choice group. onChange  (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => void  callback receiving notification choice changed. onChanged  (option: IChoiceGroupOption, evt?: React.FormEvent<HTMLElement | HTMLInputElement>) => void  Deprecated removed 07/17/2017. Use onChange instead. options  IChoiceGroupOption[]  options choice group. selectedKey  string | number  key selected option. provide , must maintain selection state observing onChange events passing new value changed. styles  IStyleFunctionOrObject<IChoiceGroupStyleProps, IChoiceGroupStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme (provided customization).","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/ChoiceGroup.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"ChoiceGroup — ChoiceGroup","text":"Use radio buttons two seven options, enough screen space, options important enough good use screen space. seven options, use drop-menu instead. give people way select one option, use check boxes instead. default option recommended people situations, use drop-menu instead. Align radio buttons vertically instead horizontally, possible. Horizontal alignment harder read localize. two mutually exclusive options, combine single check box toggle. example, use check box \"agree\" statements instead radio buttons \"agree\" \"disagree\".","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ChoiceGroup.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"ChoiceGroup — ChoiceGroup","text":"List options logical order, likely selected least, simplest operation complex, least risk . Listing options alphabetical order recommended order change text localized. Select safest (prevent loss data system access), secure, private option default. safety security factors, select likely convenient option. Use phrase label, rather full sentence. Make sure give people option make choice. example, include \"None\" option.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ChoiceGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ChoiceGroup — ChoiceGroup","text":"","code":"library(shiny) library(shiny.fluent)  options <- list(   list(key = \"A\", text = \"Option A\"),   list(key = \"B\", text = \"Option B\"),   list(key = \"C\", text = \"Option C\") )  ui <- function(id) {   ns <- NS(id)   div(     ChoiceGroup.shinyInput(ns(\"choice\"), value = \"B\", options = options),     textOutput(ns(\"groupValue\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$groupValue <- renderText({       sprintf(\"Value: %s\", input$choice)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Coachmark.html","id":null,"dir":"Reference","previous_headings":"","what":"Coachmark — Coachmark","title":"Coachmark — Coachmark","text":"Coach marks (Coachmark) used draw  person’s attention  parts UI increase engagement   elements.  teaching bubble appears hover  selection   coach mark. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Coachmark.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coachmark — Coachmark","text":"","code":"Coachmark(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Coachmark.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coachmark — Coachmark","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Coachmark.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coachmark — Coachmark","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Coachmark.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coachmark — Coachmark","text":"ariaAlertText  string  Text announce screen reader / narrator Coachmark displayed ariaDescribedBy  string  Defines element id referencing element containing description Coachmark. ariaDescribedByText  string  Defines text content ariaDescribedBy element ariaLabelledBy  string  Defines element id referencing element containing label text Coachmark. ariaLabelledByText  string  Defines text content ariaLabelledBy element beaconColorOne  string  Beacon color one. beaconColorTwo  string  Beacon color two. beakHeight  number  height Beak component. beakWidth  number  width Beak component. className  string  provided, additional class name provide root element. collapsed  boolean  starting collapsed state Coachmark. Use isCollapsed instead. color  string  Color Coachmark/TeachingBubble. componentRef  IRefObject<ICoachmark>  Optional callback access ICoachmark interface. Use instead ref accessing public methods properties component. delayBeforeCoachmarkAnimation  number  Delay milliseconds Coachmark animation appears. delayBeforeMouseOpen  number  Delay allowing mouse movements open Coachmark. height  number  height Coachmark. isCollapsed  boolean  starting collapsed state Coachmark. isPositionForced  boolean  Whether force Coachmark/TeachingBubble content fit within window bounds. mouseProximityOffset  number  distance pixels mouse located opening Coachmark. onAnimationOpenEnd  () => void  Callback opening animation completes. onAnimationOpenStart  () => void  Callback opening animation begins. onDismiss  (ev?: ) => void  Callback Coachmark tries close. onMouseMove  (e: MouseEvent) => void  Callback run mouse moves. persistentBeak  boolean  true Coachmark beak (arrow pointing towards target) always visible long Coachmark visible positioningContainerProps  IPositioningContainerProps  Props pass PositioningContainer component. Specify directionalHint indicate edge Coachmark/TeachingBubble positioned. preventDismissOnLostFocus  boolean  true Coachmark dismiss loses focus preventFocusOnMount  boolean  true focus set Coachmark mounts. Useful cases focus coachmark causing components page dismiss upon losing focus. styles  IStyleFunctionOrObject<ICoachmarkStyleProps, ICoachmarkStyles>  Call provide customized styling layer top variant rules target  HTMLElement | string | null  target Coachmark try position based . teachingBubbleRef  ITeachingBubble  Ref TeachingBubble theme  ITheme  Theme provided higher order component. width  number  width Coachmark. ariaDescribedBy  string  Defines element id referencing element containing description positioningContainer. ariaLabel  string  Accessible label text positioningContainer. ariaLabelledBy  string  Defines element id referencing element containing label text positioningContainer. backgroundColor  string  background color positioningContainer hex format ie. #ffffff. bounds  IRectangle  bounding rectangle contextual menu can appear . className  string  CSS class apply positioningContainer. componentRef  IRefObject<IPositioningContainer>  props component defined . coverTarget  boolean  true position returned menu element cover target. false position next target; directionalHint  DirectionalHint  element positioned directionalHintFixed  boolean  true position change sides attempt fit positioningContainer within bounds. still attempt align whatever bounds given. directionalHintForRTL  DirectionalHint  element positioned RTL layouts. specified, mirror directionalHint used instead doNotLayer  boolean  true render new layer. false render new layer. finalHeight  number  Specify final height content. used expanding content dynamically positioningContainer can adjust position. minPagePadding  number  minimum distance positioningContainer away edge screen. offsetFromTarget  number  gap positioningContainer target onDismiss  (ev?: ) => void  Callback positioningContainer tries close. onLayerMounted  () => void  Optional callback layer content mounted. onPositioned  (positions?: IPositionedData) => void  Optional callback called positioningContainer correctly positioned. positioningContainerMaxHeight  number  Set max height positioningContainer set positioningContainer expand contents bottom screen positioningContainerWidth  number  Custom width positioningContainer including borders. value 0, width applied. preventDismissOnScroll  boolean  true onClose dismiss scroll role  string  Aria role assigned positioningContainer (Eg. dialog, alertdialog). setInitialFocus  boolean  true positioningContainer attempt focus first focusable element contains. find element, focus set method return false. means contents responsibility either set focus focusable items. target  HTMLElement | string | MouseEvent | Point | null  target positioningContainer try position based . can either HTMLElement querySelector string valid HTMLElement MouseEvent. MouseEvent given origin point event used. targetPoint  Point  Point used position positioningContainer. Deprecated, use target instead. useTargetPoint  boolean  true use point rather rectangle position positioningContainer. example can used position based click.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Coachmark.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Coachmark — Coachmark","text":"one coach mark  teaching bubble combo displayed time. Coach marks can standalone sequential. Sequential coach marks used sparingly walk complex multistep interactions. ’s recommended sequence  coach marks doesn’t exceed three steps. Coach marks designed hold teaching bubbles. Coach mark size, color, animation shouldn’t altered.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Coachmark.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coachmark — Coachmark","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   tagList(     uiOutput(ns(\"coachmark\")),     DefaultButton.shinyInput(ns(\"toggleCoachmark\"),       id = \"target\", text = \"Toggle coachmark\"     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns     coachmarkVisible <- reactiveVal(FALSE)     observeEvent(input$toggleCoachmark, coachmarkVisible(!coachmarkVisible()))     observeEvent(input$hideCoachmark, coachmarkVisible(FALSE))     output$coachmark <- renderUI({       if (coachmarkVisible()) Coachmark(         target = \"#target\",         TeachingBubbleContent(           hasCloseButton = TRUE,           onDismiss = triggerEvent(ns(\"hideCoachmark\")),           headline = \"Example title\",           primaryButtonProps = list(text = \"Try it\"),           secondaryButtonProps = list(text = \"Try it again\"),           \"Welcome to the land of coachmarks!\"         )       )     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ColorPicker.html","id":null,"dir":"Reference","previous_headings":"","what":"ColorPicker — ColorPicker","title":"ColorPicker — ColorPicker","text":"color picker (ColorPicker) used browse select colors. default, lets people navigate colors color spectrum; specify color either Red-Green-Blue (RGB);  alpha color code; Hexadecimal textboxes. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ColorPicker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ColorPicker — ColorPicker","text":"","code":"ColorPicker(...)  ColorPicker.shinyInput(inputId, ..., value = defaultValue)  updateColorPicker.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ColorPicker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ColorPicker — ColorPicker","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ColorPicker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ColorPicker — ColorPicker","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ColorPicker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ColorPicker — ColorPicker","text":"alphaLabel  string  Label alpha textfield. alphaSliderHidden  boolean  Whether hide alpha (transparency) slider text field. alphaType  'alpha' | 'transparency' | 'none' alpha (default) means display slider text field editing alpha values. transparency also displays slider text field editing transparency values. none hides controls.Alpha represents opacity color, whereas transparency represents transparentness color: .e. 30% transparent color 70% opaqueness. blueLabel  string  Label blue text field. className  string  Additional CSS class(es) apply ColorPicker. color  IColor | string  Object CSS-compatible string describe color. componentRef  IRefObject<IColorPicker>  Gets component ref. greenLabel  string  Label green text field. hexLabel  string  Label hex text field. onChange  (ev: React.SyntheticEvent<HTMLElement>, color: IColor) => void  Callback user changes color. (called color changed via props.) redLabel  string  Label red text field. showPreview  boolean  Whether show color preview box. strings  IColorPickerStrings  Labels elements within ColorPicker. Defaults provided English . styles  IStyleFunctionOrObject<IColorPickerStyleProps, IColorPickerStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme (provided customization). ariaDescription  string  Detailed description use color rectangle. Moving thumb horizontally adjusts saturation moving vertically adjusts value (essentially, brightness). ariaLabel  string  Label ColorRectangle benefit screen reader users. ariaValueFormat  string  Format string color rectangle's current value read screen readers. string must include descriptions two placeholders current values: {0} saturation {1} value/brightness. className  string  Additional CSS class(es) apply ColorRectangle. color  IColor  Current color rectangle. componentRef  IRefObject<IColorRectangle>  Gets component ref. minSize  number  Minimum width height. onChange  (ev: React.MouseEvent | React.KeyboardEvent, color: IColor) => void  Callback color changes. styles  IStyleFunctionOrObject<IColorRectangleStyleProps, IColorRectangleStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme (provided customization). ariaLabel  string  Label ColorSlider benefit screen reader users. className  string  Additional CSS class(es) apply ColorSlider. componentRef  IRefObject<IColorSlider>  Gets component ref. isAlpha  boolean  true, slider represents alpha slider display gray checkered pattern background. Otherwise, slider represents hue slider. maxValue  number  Maximum value slider. minValue  number  Minimum value slider. onChange  (event: React.MouseEvent | React.KeyboardEvent, newValue?: number) => void  Callback issued value changes. overlayColor  string  Hex color use rendering alpha transparency slider's overlay, without #. overlayStyle  React.CSSProperties  Custom style overlay element. styles  IStyleFunctionOrObject<IColorSliderStyleProps, IColorSliderStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme (provided customization). thumbColor  string  CSS-compatible string color thumb element. type  'hue' | 'alpha' | 'transparency'  Type slider display. value  number  Current value slider.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ColorPicker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ColorPicker — ColorPicker","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     ColorPicker.shinyInput(ns(\"color\"), value = \"#00FF01\"),     textOutput(ns(\"colorValue\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$colorValue <- renderText({       sprintf(\"Value: %s\", input$color)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ComboBox.html","id":null,"dir":"Reference","previous_headings":"","what":"ComboBox — ComboBox","title":"ComboBox — ComboBox","text":"combo box (ComboBox) combines text field drop-menu, giving people way select option list enter choice. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ComboBox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ComboBox — ComboBox","text":"","code":"ComboBox(...)  VirtualizedComboBox(...)  ComboBox.shinyInput(inputId, ..., value = defaultValue)  updateComboBox.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ComboBox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ComboBox — ComboBox","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ComboBox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ComboBox — ComboBox","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ComboBox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ComboBox — ComboBox","text":"allowFreeform  boolean  Whether ComboBox free form, meaning user input bound provided options. Defaults false. ariaDescribedBy  string  Optional prop add string id can referenced inside aria-describedby attribute autoComplete  '' | ''  Whether ComboBox auto completes. user inputing text, suggested potential matches list options. combo box expanded, also scroll suggested option, give selected style. autofill  IAutofillProps  AutofillProps passed Autofill component inside combobox buttonIconProps  IIconProps  IconProps use button aspect combobox caretDownButtonStyles  Partial<IButtonStyles>  Styles caret button. comboBoxOptionStyles  Partial<IComboBoxOptionStyles>  Default styles applied ComboBox options, case option come user-defined custom styles componentRef  IRefObject<IComboBox>  Optional callback access IComboBox interface. Use instead ref accessing public methods properties component. dropdownMaxWidth  number  Custom max width dropdown dropdownWidth  number  Custom width dropdown (unless useComboBoxAsMenuWidth undefined false) getClassNames  (theme: ITheme, isOpen: boolean, disabled: boolean, required: boolean, focused: boolean, allowFreeForm: boolean, hasErrorMessage: boolean, className?: string) => IComboBoxClassNames  Custom function providing classNames ComboBox. Can used provide styles component instead applying top default styles. iconButtonProps  IButtonProps  Optional iconButton props combo box isButtonAriaHidden  boolean  Sets 'aria-hidden' attribute ComboBox's button element instructing screen readers handle element. element hidden default functionality handled input element arrow button meant decorative. keytipProps  IKeytipProps  Optional keytip combo box multiSelectDelimiter  string  multiple items selected, used separate values combobox input. onChange  (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => void  Callback issued either: 1) selected option changes 2) manually edited value submitted. case may matched option allowFreeform also true (hence value true, parameter null case) onItemClick  (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number) => void  Callback issued ComboBox item clicked. onMenuDismiss  () => void  Function gets invoked menu gets dismissed onMenuDismissed  () => void  Function gets invoked ComboBox menu dismissed onMenuOpen  () => void  Function gets invoked ComboBox menu launched onPendingValueChanged  (option?: IComboBoxOption, index?: number, value?: string) => void  Callback issued user changes pending value ComboBox. called time component updated current pending value. Option, index, value undefined change taken place previously entered pending value still valid. onRenderLabel  IRenderFunction<IOnRenderComboBoxLabelProps>  Custom render function label text. onRenderLowerContent  IRenderFunction<IComboBoxProps>  Add additional content callout list. onRenderUpperContent  IRenderFunction<IComboBoxProps>  Add additional content callout list. onResolveOptions  (options: IComboBoxOption[]) => IComboBoxOption[] | PromiseLike<IComboBoxOption[]>  Callback issued options resolved, updated need passed first time onScrollToItem  (itemIndex: number) => void  Callback issued ComboBox requests list scroll specific element options  IComboBoxOption[]  Collection options ComboBox persistMenu  boolean  Menu created destroyed opened closed, instead hidden. improve perf menu opening potentially impact overall perf elements dom. used perf important. Note: may increase amount time takes comboBox mount. scrollSelectedToTop  boolean  options scrollable selected option positioned top callout opened (unless reached end scrollbar). shouldRestoreFocus  boolean  specified, determines whether callout (menu drops ) restore focus dismissed . false, menu try set focus whichever element focus menu opened. styles  Partial<IComboBoxStyles>  Custom styles component text  string  Value show input, map combobox option theme  ITheme  Theme provided HOC. useComboBoxAsMenuWidth  boolean  Whether use ComboBoxes width menu's width multiselectAccessibleText  string  Accessible text label combobox multiselected. props  IComboBoxProps  Props render combobox.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/ComboBox.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"ComboBox — ComboBox","text":"Use combo box multiple choices can collapsed one title, list items long, space constrained.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ComboBox.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"ComboBox — ComboBox","text":"Use single words shortened statements options. use punctuation end options.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ComboBox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ComboBox — ComboBox","text":"","code":"library(shiny) library(shiny.fluent)  options <- list(   list(key = \"A\", text = \"Option A\"),   list(key = \"B\", text = \"Option B\"),   list(key = \"C\", text = \"Option C\") )  ui <- function(id) {   ns <- NS(id)   div(     ComboBox.shinyInput(ns(\"combo\"), value = list(text = \"some text\"),       options = options, allowFreeform = TRUE     ),     textOutput(ns(\"comboValue\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$comboValue <- renderText({       sprintf(\"Value: %s\", input$combo$text)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/CommandBar.html","id":null,"dir":"Reference","previous_headings":"","what":"CommandBar — CommandBar","title":"CommandBar — CommandBar","text":"CommandBar surface houses commands operate content window, panel, parent region resides . CommandBars one visible recognizable ways surface commands, can intuitive method interacting content page; however, overloaded poorly organized, can difficult use hide valuable commands user. CommandBars can also display search box finding content, hold simple commands well menus, display status ongoing actions. Commands sorted order importance, left--right right--left depending culture. Secondarily, organize commands logical groupings easier recall. CommandBars work best display 5-7 commands. helps users quickly find valuable features. need show commands, consider using overflow menu. need render status viewing controls, go right side CommandBar (left side left--right experience). display 2-3 items right side make overall CommandBar difficult parse. command items icon label. Commands can render labels well. smaller widths, commands can just use icon , recognizable frequently used commands. commands go overflow text labels can shown. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/CommandBar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CommandBar — CommandBar","text":"","code":"CommandBar(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/CommandBar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CommandBar — CommandBar","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/CommandBar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CommandBar — CommandBar","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/CommandBar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CommandBar — CommandBar","text":"buttonStyles  IButtonStyles  Custom styles individual button cacheKey  string  custom cache key used item. cacheKey changed, cache invalidate. Defaults key value. commandBarButtonAs  IComponentAs<ICommandBarItemProps>  Method override render individual command bar button. used item rendered overflow. iconOnly  boolean  Show icon item, text. apply item overflow. renderedInOverflow  boolean  Context item rendered. value mutated CommandBar useful adjusting onRender function. tooltipHostProps  ITooltipHostProps  Props tooltip iconOnly mode. ariaLabel  string  Accessibility text read screen reader user's focus enters command bar. screen reader read text reading information first focusable item command bar. buttonAs  IComponentAs<IButtonProps>  Custom component near far item buttons. used overflow menu items. className  string  Additional css class apply command bar componentRef  IRefObject<ICommandBar>  Optional callback access ICommandBar interface. Use instead ref accessing public methods properties component. dataDidRender  (renderedData: ) => void  Function called every time data rendered. provides data actually rendered. use case adding telemetry particular control shown overflow dropped result onReduceData, count number renders implementation onReduceData triggers. farItems  ICommandBarItemProps[]  Items render right side (left, RTL). ICommandBarItemProps extends IContextualMenuItem. items  ICommandBarItemProps[]  Items render. ICommandBarItemProps extends IContextualMenuItem. onDataGrown  (movedItem: ICommandBarItemProps) => void  Callback invoked data grown. onDataReduced  (movedItem: ICommandBarItemProps) => void  Callback invoked data reduced. onGrowData  (data: ICommandBarData) => ICommandBarData | undefined  Custom function grow data items small given space. Return undefined steps can taken avoid infinate loop. onReduceData  (data: ICommandBarData) => ICommandBarData | undefined  Custom function reduce data items fit given space. Return undefined steps can taken avoid infinate loop. overflowButtonAs  IComponentAs<IButtonProps>  Custom component overflow button. overflowButtonProps  IButtonProps  Props passed overflow button. menuProps passed prop, items provided prepended computed overflow items. overflowItems  ICommandBarItemProps[]  Default items overflow menu. ICommandBarItemProps extends IContextualMenuItem. shiftOnReduce  boolean  true, items 'shifted' front array reduced, unshifted grow. styles  IStyleFunctionOrObject<ICommandBarStyleProps, ICommandBarStyles>  Customized styling layer top variant rules. theme  ITheme  Theme provided HOC.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/CommandBar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CommandBar — CommandBar","text":"","code":"library(shiny) library(shiny.fluent)  items <- list(   list(     key = \"newItem\",     text = \"New\",     cacheKey = \"myCacheKey\",     iconProps = list(iconName = \"Add\"),     subMenuProps = list(       items = list(         list(           key = \"emailMessage\",           text = \"Email message\",           iconProps = list(iconName = \"Mail\")         ),         list(           key = \"calendarEvent\",           text = \"Calendar event\",           iconProps = list(iconName = \"Calendar\")         )       )     )   ),   list(     key = \"upload\",     text = \"Upload\",     iconProps = list(iconName = \"Upload\")   ),   list(     key = \"share\",     text = \"Share\",     iconProps = list(iconName = \"Share\")   ),   list(     key = \"download\",     text = \"Download\",     iconProps = list(iconName = \"Download\")   ) )  farItems <- list(   list(     key = \"tile\",     text = \"Grid view\",     ariaLabel = \"Grid view\",     iconOnly = TRUE,     iconProps = list(iconName = \"Tiles\")   ),   list(     key = \"info\",     text = \"Info\",     ariaLabel = \"Info\",     iconOnly = TRUE,     iconProps = list(iconName = \"Info\")   ) )   ui <- function(id) {   ns <- NS(id)   CommandBar(items = items, farItems = farItems) }  server <- function(id) {   moduleServer(id, function(input, output, session) { }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/CommandBarItem.html","id":null,"dir":"Reference","previous_headings":"","what":"Command bar item — CommandBarItem","title":"Command bar item — CommandBarItem","text":"Helper function constructing items CommandBar.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/CommandBarItem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Command bar item — CommandBarItem","text":"","code":"CommandBarItem(text, icon = NULL, subitems = NULL, ...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/CommandBarItem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Command bar item — CommandBarItem","text":"text Text displayed menu. icon Optional name icon. subitems Optional list CommandBar items. ... Additional props pass CommandBarItem.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/CommandBarItem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Command bar item — CommandBarItem","text":"Item suitable use CommandBar.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/CommandBarItem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Command bar item — CommandBarItem","text":"CommandBar expects items definition nested structure, gets lengthy verbose. function helps makes definition shorter. Returns list arguments passed , except text, icon (inserted proper iconProps) subitems (inserted proper subMenuProps).","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/ContextualMenu.html","id":null,"dir":"Reference","previous_headings":"","what":"ContextualMenu — ContextualMenu","title":"ContextualMenu — ContextualMenu","text":"ContextualMenus lists commands based context selection, mouse hover keyboard focus. one effective highly used command surfaces, can used variety places. variants originate command bar, cursor focus. come CommandBars use beak horizontally centered button. Ones come right click menu button beak, appear right cursor. ContextualMenus can submenus commands, show selection checks, icons. Organize commands groups divided rules. helps users remember command locations, find less used commands based proximity others. One also group sets mutually exclusive multiple selectable options. Use icons sparingly, high value commands, don’t mix icons selection checks, makes parsing commands difficult. Avoid submenus submenus can difficult invoke remember. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ContextualMenu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ContextualMenu — ContextualMenu","text":"","code":"ContextualMenu(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ContextualMenu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ContextualMenu — ContextualMenu","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ContextualMenu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ContextualMenu — ContextualMenu","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ContextualMenu.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ContextualMenu — ContextualMenu","text":"className  string  Additional css class apply ContextualMenuItem classNames  IMenuItemClassNames  Classnames different aspects menu item componentRef  IRefObject<IContextualMenuRenderItem>  Optional callback access IContextualMenuRenderItem interface. Use instead ref accessing public methods properties component. dismissMenu  (ev?: , dismissAll?: boolean) => void  prop get set ContextualMenu can called close menu item belongs . dismissAll true, menus closed. dismissSubMenu  () => void  prop get set ContextualMenu can called close item's subMenu, present. getSubmenuTarget  () => HTMLElement | undefined  prop get set wrapping component return element wraps ContextualMenuItem. Used openSubMenu. hasIcons  boolean | undefined  item icons index  number  Index item item  IContextualMenuItem  item display onCheckmarkClick  (item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => void  Click handler checkmark openSubMenu  (item: , target: HTMLElement) => void  prop get set ContextualMenu can called open item's subMenu, present. styles  IStyleFunctionOrObject<IContextualMenuItemStyleProps, IContextualMenuItemStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided High-Order Component. focusableElementIndex  number hasCheckmarks  boolean hasIcons  boolean index  number totalItemCount  number defaultMenuItemRenderer  (item: IContextualMenuItemRenderProps) => React.ReactNode hasCheckmarks  boolean hasIcons  boolean items  IContextualMenuItem[] role  string totalItemCount  number alignTargetEdge  boolean  true positioning logic prefer flip edges rather nudge rectangle fit within bounds, thus making sure element aligns perfectly target's alignment edge ariaLabel  string  Accessible label ContextualMenu's root element (inside callout). beakWidth  number  width beak. bounds  IRectangle | ((target?: Target, targetWindow?: Window) => IRectangle | undefined)  bounding rectangle (callback returns rectangle) contextual menu can appear . calloutProps  ICalloutProps  Additional custom props Callout. className  string  Additional CSS class apply ContextualMenu. componentRef  IRefObject<IContextualMenu>  Optional callback access IContextualMenu interface. Use instead ref accessing public methods properties component. contextualMenuItemAs  React.ComponentClass<IContextualMenuItemProps> | React.FunctionComponent<IContextualMenuItemProps>  Custom component use rendering individual menu items. coverTarget  boolean  true, menu positioned cover target. false, positioned next target. delayUpdateFocusOnHover  boolean  true, contextual menu updated focus enters menu via means. result different behavior shouldFocusOnMount = false. directionalHint  DirectionalHint  menu positioned directionalHintFixed  boolean  true position change sides attempt fit ContextualMenu within bounds. still attempt align whatever bounds given. directionalHintForRTL  DirectionalHint  menu positioned RTL layouts. specified, mirror directionalHint used. doNotLayer  boolean  true render new layer. false render new layer. focusZoneProps  IFocusZoneProps  Props pass FocusZone. NOTE: default FocusZoneDirection used unless direction specified focusZoneProps (even focusZoneProps defined) gapSpace  number  gap ContextualMenu target getMenuClassNames  (theme: ITheme, className?: string) => IContextualMenuClassNames  Method provide classnames style contextual menu. hidden  boolean  true, renders ContextualMenu hidden state. Use flag, rather rendering ContextualMenu conditionally based visibility, improve rendering performance becomes visible. Note: ContextualMenu hidden content rendered. render ContextualMenu visible. id  string  ID ContextualMenu's root element (inside callout). used aria-owns uses, rather direct reference programmatic purposes. isBeakVisible  boolean  true beak visible. false shown. isSubMenu  boolean  Whether menu submenu another menu. items  IContextualMenuItem[]  Menu items display. labelElementId  string  Used aria-labelledby menu element inside callout. onDismiss  (ev?: React.MouseEvent | React.KeyboardEvent, dismissAll?: boolean) => void  Callback ContextualMenu tries close. dismissAll true submenus dismissed. onItemClick  (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) => boolean | void  Click handler invoked onClick passed individual contextual menu item. Returning true dismiss menu even ev.preventDefault() called. onMenuDismissed  (contextualMenu?: IContextualMenuProps) => void  Callback menu closed (removing DOM). onMenuOpened  (contextualMenu?: IContextualMenuProps) => void  Callback menu opened. onRenderMenuList  IRenderFunction<IContextualMenuListProps>  Method override render list menu items. onRenderSubMenu  IRenderFunction<IContextualMenuProps>  Custom render function submenu. onRestoreFocus  (options: { originalElement?: HTMLElement | Window; containsFocus: boolean; }) => void  Called component unmounting, focus needs restored. Argument passed contains two variables, element underlying popup believes focus go whether popup currently contains focus. prop provided, focus restored automatically, need call originalElement.focus() shouldFocusOnContainer  boolean  Whether focus contextual menu container (opposed first menu item). shouldFocusOnMount  boolean  Whether focus menu mounted. shouldUpdateWhenHidden  boolean  true, menu updated even hidden=true. Note consume resources update even nothing shown user. might helpful updates small want menu display quickly hidden set false. styles  IStyleFunctionOrObject<IContextualMenuStyleProps, IContextualMenuStyles>  Call provide customized styling layer top variant rules. subMenuHoverDelay  number  Delay (milliseconds) wait expanding / dismissing submenu mouseEnter mouseLeave target  Target  target ContextualMenu try position based . can either element, query selector string resolving valid element, MouseEvent. MouseEvent given, origin point event used. theme  ITheme  Theme provided higher-order component. title  string  Title displayed top menu, items. useTargetAsMinWidth  boolean  true context menu minimum width equal width target element useTargetWidth  boolean  true context menu render width target element","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ContextualMenu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ContextualMenu — ContextualMenu","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     DefaultButton.shinyInput(       ns(\"toggleContextualMenu\"),       id = \"target\",       text = \"Toggle menu\"     ),     reactOutput(ns(\"contextualMenu\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns      showContextualMenu <- reactiveVal(FALSE)     observeEvent(input$toggleContextualMenu, {       showContextualMenu(!showContextualMenu())     })      output$contextualMenu <- renderReact({       menuItems <- JS(\"[         {           key: 'newItem',           text: 'New',           onClick: () => console.log('New clicked'),         },         {           key: 'divider_1',           itemType: 1,         },         {           key: 'rename',           text: 'Rename',           onClick: () => console.log('Rename clicked'),         },         {           key: 'edit',           text: 'Edit',           onClick: () => console.log('Edit clicked'),         },         {           key: 'properties',           text: 'Properties',           onClick: () => console.log('Properties clicked'),         },         {           key: 'linkNoTarget',           text: 'Link same window',           href: 'http://bing.com',         },         {           key: 'linkWithTarget',           text: 'Link new window',           href: 'http://bing.com',           target: '_blank',         },         {           key: 'linkWithOnClick',           name: 'Link click',           href: 'http://bing.com',           onClick: function(){             alert('Link clicked');             ev.preventDefault();           },           target: '_blank',         },         {           key: 'disabled',           text: 'Disabled item',           disabled: true,           onClick: () => console.error('Disabled item should not be clickable.'),         },       ]\")        ContextualMenu(         items = menuItems,         hidden = !showContextualMenu(),         target = \"#target\",         onItemClick = JS(paste0(           \"function() {\",           \"  Shiny.setInputValue('\", ns(\"toggleContextualMenu\"), \"', Math.random());\",           \"}\"         )),         onDismiss = JS(paste0(           \"function() {\",           \"  Shiny.setInputValue('\", ns(\"toggleContextualMenu\"), \"', Math.random());\",           \"}\"         ))       )     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/DatePicker.html","id":null,"dir":"Reference","previous_headings":"","what":"DatePicker — DatePicker","title":"DatePicker — DatePicker","text":"Picking date can tough without context. date picker (DatePicker) offers drop-control ’s optimized picking single date calendar view contextual information like day week fullness calendar important. can modify calendar provide additional context limit available dates. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DatePicker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatePicker — DatePicker","text":"","code":"DatePicker(...)  DatePicker.shinyInput(inputId, ..., value = defaultValue)  updateDatePicker.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/DatePicker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatePicker — DatePicker","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DatePicker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DatePicker — DatePicker","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DatePicker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DatePicker — DatePicker","text":"allFocusable  boolean  Allows elements focused, including disabled ones allowTextInput  boolean  Whether DatePicker allows input date string directly ariaLabel  string  Aria Label TextField DatePicker screen reader users. borderless  boolean  Determines DatePicker border. calendarAs  IComponentAs<ICalendarProps>  Custom Calendar used date picking calendarProps  ICalendarProps  Pass calendar props calendar component calloutProps  ICalloutProps  Pass callout props callout component className  string  Optional Classname datepicker root element . componentRef  IRefObject<IDatePicker>  Optional callback access IDatePicker interface. Use instead ref accessing public methods properties component. dateTimeFormatter  ICalendarFormatDateCallbacks  Apply additional formating dates, example localized date formatting. disableAutoFocus  boolean  Whether DatePicker open automatically control focused disabled  boolean  Disabled state DatePicker. firstDayOfWeek  DayOfWeek  first day week locale. firstWeekOfYear  FirstWeekOfYear  Defines first week year start, FirstWeekOfYear.FirstDay, FirstWeekOfYear.FirstFullWeek FirstWeekOfYear.FirstFourDayWeek possible values formatDate  (date?: Date) => string  Optional method format chosen date string display DatePicker highlightCurrentMonth  boolean  Whether month picker highlight current month highlightSelectedMonth  boolean  Whether month picker highlight selected month initialPickerDate  Date  initially highlighted date calendar picker isMonthPickerVisible  boolean  Whether month picker shown beside day picker hidden. isRequired  boolean  Whether DatePicker required field label  string  Label DatePicker maxDate  Date  maximum allowable date. minDate  Date  minimum allowable date. onAfterMenuDismiss  () => void  Callback runs DatePicker's menu (Calendar) closed onSelectDate  (date: Date | null | undefined) => void  Callback issued date selected parseDateFromString  (dateStr: string) => Date | null  Optional method parse text input value date, useful allowTextInput set true pickerAriaLabel  string  Aria label date picker popup screen reader users. placeholder  string  Placeholder text DatePicker showCloseButton  boolean  Whether CalendarDay close button shown . showGoToToday  boolean  Whether \"Go today\" link shown showMonthPickerAsOverlay  boolean  Show month picker top date picker visible. showWeekNumbers  boolean  Whether calendar show week number (weeks 1 53) week row strings  IDatePickerStrings  Localized strings use DatePicker styles  IStyleFunctionOrObject<IDatePickerStyleProps, IDatePickerStyles>  Call provide customized styling layer top variant rules. tabIndex  number  tabIndex TextField textField  ITextFieldProps  Pass textField props textField component. Prop name \"textField\" compatiblity upcoming slots work. theme  ITheme  Theme provided High-Order Component. today  Date  Value today. null, current time client machine used. underlined  boolean  Whether Textfield DatePicker underlined. value  Date  Default value DatePicker, ","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/DatePicker.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"DatePicker — DatePicker","text":"Use control way ’s designed built. Don’t break apart.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DatePicker.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"DatePicker — DatePicker","text":"control provides  date specific format.  date can entered input field, provide helper text appropriate format.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DatePicker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatePicker — DatePicker","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     DatePicker.shinyInput(ns(\"date\"), value = \"2020-06-25T22:00:00.000Z\"),     textOutput(ns(\"dateValue\")),     h3(\"If `value` is missing, default to system date\"),     DatePicker.shinyInput(ns(\"date2\")),     textOutput(ns(\"dateDefault\")),     h3(\"If `value` is NULL, return NULL\"),     DatePicker.shinyInput(ns(\"date3\"), value = NULL, placeholder = \"I am placeholder!\"),     textOutput(ns(\"dateNull\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$dateValue <- renderText({       sprintf(\"Value: %s\", input$date)     })     output$dateDefault <- renderText({       sprintf(\"Value: %s\", input$date2)     })     output$dateNull <- renderText({       sprintf(\"Value: %s\", deparse(input$date3))     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/DetailsList.html","id":null,"dir":"Reference","previous_headings":"","what":"DetailsList — DetailsList","title":"DetailsList — DetailsList","text":"details list (DetailsList) robust way display information-rich collection items, allow people  sort, group, filter  content. Use  details list  information density critical. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DetailsList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DetailsList — DetailsList","text":"","code":"DetailsList(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/DetailsList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DetailsList — DetailsList","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DetailsList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DetailsList — DetailsList","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DetailsList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DetailsList — DetailsList","text":"onColumnDragEnd  (props: { dropLocation?: ColumnDragEndLocation; }, event: MouseEvent) => void  Callback notify column dragEnd event List Need check whether dragEnd happened corresponding list outside list cellStyleProps  ICellStyleProps  Custom styles cell rendering. column  IColumn  column definition component instance. columnIndex  number  column index component instance. componentRef  () => void  reference component instance. dragDropHelper  IDragDropHelper | null  drag drop helper component instance. isDraggable  boolean  Whether column can re-ordered via drag drop. isDropped  boolean  Whether column dropped via drag drop. onColumnClick  (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void  Callback fired click event occurs. onColumnContextMenu  (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void  Callback fired contextual menu event provide contextual menu UI. onRenderColumnHeaderTooltip  IRenderFunction<IDetailsColumnRenderTooltipProps>  Render function providing column header tooltip. parentId  string  Parent ID used accessibility label(s). setDraggedItemIndex  (itemIndex: number) => void styles  IStyleFunctionOrObject<IDetailsColumnStyleProps, IDetailsColumnStyles>  component styles respect render. theme  ITheme  theme object respect render. updateDragInfo  (props: { itemIndex: number; }, event?: MouseEvent) => void  Callback drag drop event. useFastIcons  boolean  Whether use fast icon check components. icons targeted customization still customizable via class names. columns  IColumn[]  Column metadata selection  ISelection  Selection utilities selectionMode  SelectionMode  Selection mode onRenderFooter  IRenderFunction<IDetailsGroupDividerProps> onRenderHeader  IRenderFunction<IDetailsGroupDividerProps> ariaLabel  string  ariaLabel entire header ariaLabelForSelectAllCheckbox  string  ariaLabel header checkbox selects deselects everything ariaLabelForSelectionColumn  string  ariaLabel selection column ariaLabelForToggleAllGroupsButton  string  ariaLabel expand/collapse group button className  string  Overriding class name collapseAllVisibility  CollapseAllVisibility  Whether collapse visibility columnReorderOptions  IColumnReorderOptions  Column reordering options columnReorderProps  IColumnReorderHeaderProps  Column reordering options componentRef  IRefObject<IDetailsHeader>  Ref component isAllCollapsed  boolean  Whether collapsed layoutMode  DetailsListLayoutMode  Layout mode - fixedColumns justified minimumPixelsForDrag  number  Minimum pixels moved dragging registered onColumnAutoResized  (column: IColumn, columnIndex: number) => void  Callback column automatically resized onColumnClick  (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void  Callback column clicked onColumnContextMenu  (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void  Callback column needs show context menu onColumnIsSizingChanged  (column: IColumn, isSizing: boolean) => void  Callback column sizing changed onColumnResized  (column: IColumn, newWidth: number, columnIndex: number) => void  Callback column resized onRenderColumnHeaderTooltip  IRenderFunction<IDetailsColumnRenderTooltipProps>  Callback render tooltip column header onRenderDetailsCheckbox  IRenderFunction<IDetailsCheckboxProps>  provided, can used render custom checkbox onToggleCollapseAll  (isAllCollapsed: boolean) => void  Callback collapse toggled selectAllVisibility  SelectAllVisibility  Select button visibility styles  IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme Higher Order Component useFastIcons  boolean  Whether use fast icon check components. icons targeted customization still customizable via class names. columns  IColumn[]  Column metadata selection  ISelection  Selection utilities selectionMode  SelectionMode  Selection mode cellStyleProps  ICellStyleProps  Rules rendering column cells. checkboxVisibility  CheckboxVisibility | undefined  Checkbox visibility columns  IColumn[]  Column metadata groupNestingDepth  number  Nesting depth grouping indentWidth  number | undefined  much indent rowWidth  number  Minimum width row. selection  ISelection | undefined  Selection utilities selectionMode  SelectionMode | undefined  Selection mode viewport  IViewport | undefined  View port virtualized list ariaLabel  string  Accessible label describing summarizing list. ariaLabelForGrid  string  Accessible label grid within list. ariaLabelForListHeader  string  Accessible label list header. ariaLabelForSelectAllCheckbox  string  Accessible label select checkbox. ariaLabelForSelectionColumn  string  Accessible label name selection column. cellStyleProps  ICellStyleProps  Props impacting render style cells. Since impact calculated column widths, handled separately normal theme styling, passed styling system. checkboxCellClassName  string  Class name add cell checkbox. checkboxVisibility  CheckboxVisibility  Controls visibility selection check box. checkButtonAriaLabel  string  Accessible label check button. className  string  Class name add root element. columnReorderOptions  IColumnReorderOptions  Options column reordering using drag drop. columns  IColumn[]  column defitions. none provided, default columns created based items' properties. compact  boolean  Whether render compact mode. componentRef  IRefObject<IDetailsList>  Callback access IDetailsList interface. Use instead ref accessing public methods properties component. constrainMode  ConstrainMode  Controls list contrains overflow. disableSelectionZone  boolean  Whether disable built-SelectionZone, host component can provide . dragDropEvents  IDragDropEvents  Map callback functions related row drag drop functionality. enableUpdateAnimations  boolean  Whether animate updates enterModalSelectionOnTouch  boolean  Whether selection zone enter modal state touch. getCellValueKey  (item?: , index?: number, column?: IColumn) => string  provided, \"default\" item column cell value return. column's getValueKey can override getCellValueKey. getGroupHeight  IGroupedListProps['getGroupHeight']  Callback override default group height calculation used list virtualization. getKey  (item: , index?: number) => string  Callback get item key, used selection render. Must provided sorting filtering enabled. getRowAriaDescribedBy  (item: ) => string  Callback get aria-describedby IDs (space-separated strings) elements describe item. getRowAriaLabel  (item: ) => string  Callback get aria-label string given item. groupProps  IDetailsGroupRenderProps  Override properties render groups. groups  IGroup[]  Grouping instructions. indentWidth  number  Override indent width used group nesting. initialFocusedIndex  number  Default index set focus items rendered index exists. isHeaderVisible  boolean  Controls visibility header. isPlaceholderData  boolean  Set true indicate items displayed placeholder data. items  []  items render. layoutMode  DetailsListLayoutMode  Controls columns adjusted. listProps  IListProps  Properties pass List components rendered. minimumPixelsForDrag  number  minimum mouse move distance interpret action drag event. onActiveItemChanged  (item?: , index?: number, ev?: React.FocusEvent<HTMLElement>) => void  Callback item list becomes active clicking anywhere inside row navigating keyboard. onColumnHeaderClick  (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void  Callback user clicks column header. onColumnHeaderContextMenu  (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void  Callback user asks contextual menu (usually via right click) column header. onColumnResize  (column?: IColumn, newWidth?: number, columnIndex?: number) => void  Callback fired column resize onDidUpdate  (detailsList?: DetailsListBase) => void  Callback list updated. Useful telemetry tracking externally. onItemContextMenu  (item?: , index?: number, ev?: Event) => void | boolean  Callback context menu item accessed. undefined false returned, ev.preventDefault() called. onItemInvoked  (item?: , index?: number, ev?: Event) => void  Callback given row invoked (pressing enter selected.) onRenderCheckbox  IRenderFunction<IDetailsListCheckboxProps>  provided, can used render custom checkbox. onRenderDetailsFooter  IRenderFunction<IDetailsFooterProps>  override render details footer. onRenderDetailsHeader  IRenderFunction<IDetailsHeaderProps>  override render details header. onRenderItemColumn  (item?: , index?: number, column?: IColumn) => React.ReactNode  provided, \"default\" item column renderer method. affects cells within rows, rows . column definition provides onRender method, used instead . onRenderMissingItem  (index?: number, rowProps?: IDetailsRowProps) => React.ReactNode  Callback render item missing. onRenderRow  IRenderFunction<IDetailsRowProps>  Callback override default row rendering. onRowDidMount  (item?: , index?: number) => void  Callback given row mounted. Useful identifying row rendered page. onRowWillUnmount  (item?: , index?: number) => void  Callback given row unmounted. Useful identifying row removed page. onShouldVirtualize  (props: IListProps) => boolean  Callback determine whether list rendered full, virtualized.Virtualization add remove pages items user scrolls visible range. benefits larger list scenarios reducing DOM screen, can negatively affect performance smaller lists.default implementation virtualize callback provided. rowElementEventMap  { eventName: string; callback: (context: IDragDropContext, event?: ) => void; }[]  Event names corresponding callbacks registered rendered row elements. selection  ISelection  Selection model track selection state. selectionMode  SelectionMode  Controls /details list manages selection. Options include none, single, multiple selectionPreservedOnEmptyClick  boolean  default, selection cleared clicking empty (non-focusable) section screen. Setting value true overrides behavior maintains selection. selectionZoneProps  ISelectionZoneProps  Additional props pass SelectionZone created default. setKey  string  key uniquely identifies given items. provided, selection reset key changes. shouldApplyApplicationRole  boolean  Whether role application applied list. styles  IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>  Custom overrides themed default styles. theme  ITheme  Theme provided higher-order component. useFastIcons  boolean  Whether use fast icon check components. icons targeted customization still customizable via class names. usePageCache  boolean  Whether enable render page caching. experimental performance optimization default. useReducedRowRenderer  boolean  Whether re-render row props changed. Might cause regression depending external updates. viewport  IViewport  Viewport info, provided withViewport decorator. cellsByColumn  { [columnKey: string]: React.ReactNode; }  Optional pre-rendered content per column. Preferred onRender onRenderItemColumn provided. checkboxCellClassName  string  Class name checkbox cell checkButtonAriaLabel  string  Check button's aria label className  string  Overriding class name collapseAllVisibility  CollapseAllVisibility  Collapse visibility compact  boolean  Whether render compact mode componentRef  IRefObject<IDetailsRow>  Ref component dragDropEvents  IDragDropEvents  Handling drag drop events dragDropHelper  IDragDropHelper  Helper drag drop enableUpdateAnimations  boolean  Whether animate updates eventsToRegister  { eventName: string; callback: (item?: , index?: number, event?: ) => void; }[]  list events register getRowAriaDescribedBy  (item: ) => string  Callback getting row aria-describedby getRowAriaLabel  (item: ) => string  Callback getting row aria label item   Data source component itemIndex  number  Index collection items DetailsList onDidMount  (row?: DetailsRowBase) => void  Callback mount parent onRenderCheck  (props: IDetailsRowCheckProps) => JSX.Element  Callback rendering checkbox onRenderDetailsCheckbox  IRenderFunction<IDetailsCheckboxProps>  provided, can used render custom checkbox onWillUnmount  (row?: DetailsRowBase) => void  Callback mount parent rowFieldsAs  React.ComponentType<IDetailsRowFieldsProps>  DOM element render row field styles  IStyleFunctionOrObject<IDetailsRowStyleProps, IDetailsRowStyles>  Overriding styles row theme  ITheme  Theme provided styled() function useFastIcons  boolean  Whether use fast icon check components. icons targeted customization still customizable via class names. useReducedRowRenderer  boolean  Rerender DetailsRow props changed. Might cause regression depending external updates. anySelected  boolean  selected - also true isSelectionModal canSelect  boolean  Can checkbox selectable checkClassName  string  classname passed Check component className  string  Optional className attach slider root element. compact  boolean  compact mode? isHeader  boolean  check part header DetailsList isVisible  boolean  Whether checkbox visible onRenderDetailsCheckbox  IRenderFunction<IDetailsCheckboxProps>  provided, can used render custom checkbox selected  boolean  Whether check selected styles  IStyleFunctionOrObject<IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>  Style override theme  ITheme  Theme provided High-Order Component. useFastIcons  boolean  Whether use fast icon check components. icons targeted customization still customizable via class names. cellStyleProps  ICellStyleProps  Style properties customize cell render output. columns  IColumn[]  Columns metadata columnStartIndex  number  Index start column compact  boolean  whether render compact field enableUpdateAnimations  boolean item   Data source component itemIndex  number  item index collection DetailsList rowClassNames  { [k keyof Pick<IDetailsRowStyles, 'isMultiline' | 'isRowHeader' | 'cell' | 'cellAnimation' | 'cellPadded' | 'cellUnpadded' | 'fields'>]: string; }  Subset classnames currently generated DetailsRow used within DetailsRowFields. columns  IColumn[]  Column metadata selection  ISelection  Selection utilities selectionMode  SelectionMode  Selection mode ariaLabelForShimmer  string  Aria label shimmer. Set grid shimmer enabled. detailsListStyles  IDetailsListProps['styles']  DetailsList styles pass . enableShimmer  boolean  Boolean flag control render placeholders vs real items. consumer app know fetching data done toggle prop. onRenderCustomPlaceholder  (rowProps: IDetailsRowProps, index?: number, defaultRender?: (props: IDetailsRowProps) => React.ReactNode) => React.ReactNode  Custom placeholder renderer used need override default placeholder DetailsRow. rowProps argument passed leverage calculated column measurements done DetailsList can use optional arguments item index defaultRender execute additional logic rendering default placeholder. removeFadingOverlay  boolean  Determines whether remove fading bottom overlay shimmering items used emphasize unknown number items fetched. shimmerLines  number  Number shimmer placeholder lines render. shimmerOverlayStyles  IStyleFunctionOrObject<IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles>  Custom styles override styles specific ShimmeredDetailsList root area. styles  IStyleFunctionOrObject<IShimmeredDetailsListStyleProps, IShimmeredDetailsListStyles>  Custom styles override styles specific ShimmeredDetailsList root area. skipViewportMeasures  boolean  Whether use ResizeObserver (available) detect measure viewport 'resize' events.Falls back window 'resize' event.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/DetailsList.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"DetailsList — DetailsList","text":"List items composed selection, icon, name columns minimum. can include columns,  date modified, metadata field associated collection. Avoid using file type icon overlays denote status file can make entire icon unclear. multiple lines text column, consider variable row height variant. Give columns ample default width display information.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DetailsList.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"DetailsList — DetailsList","text":"Use sentence-style capitalization column headers—capitalize first word. info, see [Capitalization] Microsoft Writing Style Guide. [capitalization]: https://docs.microsoft.com/style-guide/capitalization","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/DetailsList.html","id":"my-scrollable-content-isn-t-updating-on-scroll-what-should-i-do-","dir":"Reference","previous_headings":"","what":"My scrollable content isn't updating on scroll. What should I do?","title":"DetailsList — DetailsList","text":"Add data--scrollable=\"true\" attribute scrollable element containing DetailsList. default, List used within DetailsList use body element scrollable element. contain List within scrollable div using overflow: auto scroll, List needs listen scroll events element instead. initialization, List traverse DOM looking first element data--scrollable attribute know element listen knowing re-evaulate visible window.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DetailsList.html","id":"my-list-is-not-re-rendering-when-i-mutate-its-items-what-should-i-do-","dir":"Reference","previous_headings":"","what":"My List is not re-rendering when I mutate its items. What should I do?","title":"DetailsList — DetailsList","text":"determine List within DetailsList re-render contents, component performs referential equality check within shouldComponentUpdate method. done minimize performance overhead associated re-rendering virtualized List pages, recommended React documentation. result implementation, inner List determine re-render array values mutated. avoid problem, recommend re-creating items array backing DetailsList using method Array.prototype.concat ES6 spread syntax shown :   re-creating items array without mutating values, inner List correctly determine contents changed re-render new values.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DetailsList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DetailsList — DetailsList","text":"","code":"library(shiny) library(shiny.fluent)  items <- list(   list(key = \"1\", name = \"Mark\", surname = \"Swanson\"),   list(key = \"2\", name = \"Josh\", surname = \"Johnson\") )  columns <- list(   list(key = \"name\", fieldName = \"name\", name = \"Name\"),   list(key = \"surname\", fieldName = \"surname\", name = \"Surname\") )   ui <- function(id) {   ns <- NS(id)   DetailsList(items = items, columns = columns) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":null,"dir":"Reference","previous_headings":"","what":"Dialog — Dialog","title":"Dialog — Dialog","text":"dialog box (Dialog)   temporary pop-  takes focus  page  app requires people interact . ’s primarily used  confirming actions, deleting file, asking people make choice. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dialog — Dialog","text":"","code":"Dialog(...)  DialogFooter(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dialog — Dialog","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dialog — Dialog","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dialog — Dialog","text":"className  string  Optional override class name closeButtonAriaLabel  string  Label passed aria-label close button componentRef  IRefObject<IDialogContent>  Optional callback access IDialogContent interface. Use instead ref accessing public methods properties component. draggableHeaderClassName  string  classname header draggable isMultiline  boolean  inside multiline wrapper onDismiss  (ev?: React.MouseEvent<HTMLButtonElement>) =>  Callback Dialog dismissed close button light dismiss, animation completes. responsiveMode  ResponsiveMode  Responsive mode passed decorator. showCloseButton  boolean  Show 'x' close button upper-right corner styles  IStyleFunctionOrObject<IDialogContentStyleProps, IDialogContentStyles>  Call provide customized styling layer top variant rules subText  string  subtext display dialog subTextId  string  Id subText container theme  ITheme  Theme provided HOC. title  string | JSX.Element  title text display top dialog. titleId  string  Id title container titleProps  React.HTMLAttributes<HTMLDivElement>  props title container. topButtonsProps  IButtonProps[]  top buttons show next close button type  DialogType  type Dialog display. className  string  Optional override class name componentRef  IRefObject<IDialogFooter>  Gets component ref. styles  IStyleFunctionOrObject<IDialogFooterStyleProps, IDialogFooterStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC. ariaDescribedById  string  Optional id aria-DescribedBy ariaLabelledById  string  Optional id aria-LabelledBy className  string  Optional class name added root class componentRef  IRefObject<IDialog>  Optional callback access IDialog interface. Use instead ref accessing public methods properties component. containerClassName  string  Optional override container class contentClassName  string  Optional override content class dialogContentProps  IDialogContentProps  Props passed Dialog Content hidden  boolean  Whether dialog hidden. isBlocking  boolean  Whether dialog can light dismissed clicking outside dialog (overlay). isDarkOverlay  boolean  Whether overlay dark themed. isOpen  boolean  Whether dialog displayed. Deprecated, use hidden instead. maxWidth  ICSSRule | ICSSPixelUnitRule  Sets maximum width dialog. limits width property larger value specified max-width. minWidth  ICSSRule | ICSSPixelUnitRule  Sets minimum width dialog. limits width property smaller value specified min-width. modalProps  IModalProps  Props passed Modal onDismiss  (ev?: React.MouseEvent<HTMLButtonElement>) =>  callback function Dialog dismissed close button light dismiss. Can also specified separately content modal. onDismissed  () =>  callback function called Dialog dismissed animation complete. onLayerDidMount  () => void  callback function Dialog content mounted overlay layer onLayerMounted  () => void  Deprecated 0.81.2, use onLayerDidMount instead. styles  IStyleFunctionOrObject<IDialogStyleProps, IDialogStyles>  Call provide customized styling layer top variant rules subText  string  subtext display dialog. theme  ITheme  Theme provided HOC. title  string | JSX.Element  title text display top dialog. topButtonsProps  IButtonProps[]  top buttons show next close button type  DialogType  type Dialog display.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Dialog — Dialog","text":"use three buttons. Dialog boxes consist header, body, footer. Validate people’s entries acceptable closing dialog box. Show inline validation error near field must correct. Blocking dialogs used sparingly, critical people make choice provide information can proceed. Blocking dialogs generally used irreversible potentially destructive tasks. ’re typically paired overlay without light dismiss.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":"header","dir":"Reference","previous_headings":"","what":"Header","title":"Dialog — Dialog","text":"Locks top dialog. May include icon left title. Includes  Close button top-right corner.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":"footer","dir":"Reference","previous_headings":"","what":"Footer","title":"Dialog — Dialog","text":"Lock buttons bottom dialog. Includes one primary button. secondary button optional.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":"width","dir":"Reference","previous_headings":"","what":"Width","title":"Dialog — Dialog","text":"Maximum 340 pixels. Minimum 288 pixels.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":"height","dir":"Reference","previous_headings":"","what":"Height","title":"Dialog — Dialog","text":"Maximum 340 pixels. Minimum 172 pixels.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":"title","dir":"Reference","previous_headings":"","what":"Title","title":"Dialog — Dialog","text":"Keep title concise possible. Don’t use periods end  titles. mandatory content explain main information clear, concise, specific statement question. example, “Delete file?” instead “sure?” title shouldn’t description body content. example, don’t use “Error” title. Instead, use informative statement like “session ended.” Use sentence-style capitalization—capitalize first word. info, see Capitalization Microsoft Writing Style Guide.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":"body-copy-optional-","dir":"Reference","previous_headings":"","what":"Body copy (Optional)","title":"Dialog — Dialog","text":"restate title body. Use ending punctuation sentences. Use actionable language, important information beginning. Use optional body content area additional info instructions, needed. include information needed help people make decision.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":"button-labels","dir":"Reference","previous_headings":"","what":"Button labels","title":"Dialog — Dialog","text":"Write button labels specific responses main information title. title “Delete file?” buttons labeled “Delete” “Cancel”. concise. Limit labels one two words. Usually single verb best. Include noun room interpretation verb means. example, “Delete” “Delete file”.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dialog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dialog — Dialog","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     DefaultButton.shinyInput(ns(\"showDialog\"), text = \"Open dialog\"),     reactOutput(ns(\"reactDialog\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns      isDialogOpen <- reactiveVal(FALSE)     output$reactDialog <- renderReact({       dialogContentProps <- list(         type = 0,         title = \"Missing Subject\",         closeButtonAriaLabel = \"Close\",         subText = \"Do you want to send this message without a subject?\"       )       Dialog(         hidden = !isDialogOpen(),         onDismiss = JS(paste0(           \"function() {\",           \"  Shiny.setInputValue('\", ns(\"hideDialog\"),\"', Math.random());\",           \"}\"         )),         dialogContentProps = dialogContentProps,         modalProps = list(),         DialogFooter(           PrimaryButton.shinyInput(ns(\"dialogSend\"), text = \"Send\"),           DefaultButton.shinyInput(ns(\"dialogDontSend\"), text = \"Don't send\")         )       )     })      observeEvent(input$showDialog, isDialogOpen(TRUE))     observeEvent(input$hideDialog, isDialogOpen(FALSE))     observeEvent(input$dialogSend, isDialogOpen(FALSE))     observeEvent(input$dialogDontSend, isDialogOpen(FALSE))   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Divider.html","id":null,"dir":"Reference","previous_headings":"","what":"Divider — VerticalDivider","title":"Divider — VerticalDivider","text":"Divider line used visually differentiate different parts UI. commonly used headers command bars. divider automatically center algins within parent container can customized shown different heights colors. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Divider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Divider — VerticalDivider","text":"","code":"VerticalDivider(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Divider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Divider — VerticalDivider","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Divider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Divider — VerticalDivider","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Divider.html","id":"best-practices","dir":"Reference","previous_headings":"","what":"Best practices","title":"Divider — VerticalDivider","text":"Use divider component show sectional continuity change content two blocks information. spacing around divider generally determined content surrounding . two recommended divider color combinations: #C8C8C8/neutralTertiaryAlt divider used within #F4F4F4/neutralLighter layout #EAEAEA/neutralLight divider used within #FFFFFF/white layout","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DocumentCard.html","id":null,"dir":"Reference","previous_headings":"","what":"DocumentCard — DocumentCard","title":"DocumentCard — DocumentCard","text":"document card (DocumentCard) represents file, contains additional metadata actions. offers people richer view file typical grid view. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DocumentCard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DocumentCard — DocumentCard","text":"","code":"DocumentCard(...)  DocumentCardActions(...)  DocumentCardActivity(...)  DocumentCardDetails(...)  DocumentCardImage(...)  DocumentCardLocation(...)  DocumentCardLogo(...)  DocumentCardPreview(...)  DocumentCardStatus(...)  DocumentCardTitle(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/DocumentCard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DocumentCard — DocumentCard","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DocumentCard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DocumentCard — DocumentCard","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DocumentCard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DocumentCard — DocumentCard","text":"actions  IButtonProps[]  actions available document. className  string  Optional override class name componentRef  IRefObject<IDocumentCardActions>  Gets component ref. styles  IStyleFunctionOrObject<IDocumentCardActionsStyleProps, IDocumentCardActionsStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC. views  Number  number views document received. activity  string  Describes activity taken place, \"Created Feb 23, 2016\". className  string  Optional override class name componentRef  IRefObject<IDocumentCardActivity>  Gets component ref. people  IDocumentCardActivityPerson[]  One people involved activity. styles  IStyleFunctionOrObject<IDocumentCardActivityStyleProps, IDocumentCardActivityStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC. className  string  Optional override class name componentRef  IRefObject<IDocumentCardDetails>  Gets component ref. styles  IStyleFunctionOrObject<IDocumentCardDetailsStyleProps, IDocumentCardDetailsStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC. className  string  Optional override class name componentRef  IRefObject<IDocumentCardImage>  Gets component ref. height  number  provided, forces preview image height. iconProps  IIconProps  props icon associated document type. imageFit  ImageFit  Used determine size image fit dimensions component. dimensions provided, image fit using ImageFit.scale, otherwise ImageFit.none used. imageSrc  string  Path preview image. styles  IStyleFunctionOrObject<IDocumentCardImageStyleProps, IDocumentCardImageStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC. width  number  provided, forces preview image width. ariaLabel  string  Aria label link document location. className  string  Optional override class name componentRef  IRefObject<IDocumentCardLocation>  Gets component ref. location  string  Text location document. locationHref  string  URL navigate location. onClick  (ev?: React.MouseEvent<HTMLElement>) => void  Function call location clicked. styles  IStyleFunctionOrObject<IDocumentCardLocationStyleProps, IDocumentCardLocationStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC. className  string  Optional override class name componentRef  IRefObject<IDocumentCardLogo>  Gets component ref. logoIcon  string  Describes DocumentCard Logo badge. logoName  string  Describe Logo name, optional. styles  IStyleFunctionOrObject<IDocumentCardLogoStyleProps, IDocumentCardLogoStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC. className  string  Optional override class name componentRef  IRefObject<IDocumentCardPreview>  Gets component ref. getOverflowDocumentCountText  (overflowCount: number) => string  function return string describe number overflow documents. (overflowCount: number) =\\> +${ overflowCount } , previewImages  IDocumentCardPreviewImage[]  One preview images display. styles  IStyleFunctionOrObject<IDocumentCardPreviewStyleProps, IDocumentCardPreviewStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC. accentColor  string  Hex color value line card, correspond document type. supplied using 'compact' card layout.Deprecated v4.17.1, removed \\>= v5.0.0. children  React.ReactNode  Child components render within card. className  string  Optional override class name componentRef  IRefObject<IDocumentCard>  Optional callback access IDocumentCard interface. Use instead ref accessing public methods properties component. onClick  (ev?: React.SyntheticEvent<HTMLElement>) => void  Function call card clicked keyboard Enter/Space pushed. onClickHref  string  URL navigate card clicked. function also provided, used instead URL. onClickTarget  string  target browser context opening link. specified, open tab/window. role  string  Aria role assigned documentCard (Eg. button, link). Use override default assignment. styles  IStyleFunctionOrObject<IDocumentCardStyleProps, IDocumentCardStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC. type  DocumentCardType  type DocumentCard display. className  string  Optional override class name componentRef  IRefObject<IDocumentCardStatus>  Gets component ref. status  string  Describe status information. Required field. statusIcon  string  Describes DocumentCard status icon. styles  IStyleFunctionOrObject<IDocumentCardStatusStyleProps, IDocumentCardStatusStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC. className  string  Optional override class name componentRef  IRefObject<IDocumentCardTitle>  Gets component ref. shouldTruncate  boolean  Whether truncate title fit within box. May performance impact. showAsSecondaryTitle  boolean  Whether show title secondary title style smaller font lighter color. styles  IStyleFunctionOrObject<IDocumentCardTitleStyleProps, IDocumentCardTitleStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC. title  string  Title text. card represents one document, title one document \"+X\" string. example, collection four documents string \"Document.docx +3\".","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/DocumentCard.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"DocumentCard — DocumentCard","text":"Use control represent Office documents files aggregate views, showing someone’s trending document. Incorporate metadata relevant useful  particular view. card can specialized document’s latest changes, document’s popularity, see fit. Use document card illustrating event encompasses multiple files. example, card can configured represent single upload action  adding one file. Don’t use  document card views  someone likely performing bulk operations files, list may get long. Specifically, ’re showing items inside actual folder, card may overkill majority items folder may interesting metadata. Don’t use  document card space premium can’t show relevant timely commands metadata. Cards useful can expose -item interactions like “Share” buttons view counts. app need , show simple grid list items instead, easier scan.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/DocumentCard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DocumentCard — DocumentCard","text":"","code":"library(shiny) library(shiny.fluent)  title <- \"Long_file_name_with_underscores_used_to_separate_all_of_the_words\"  previewImages <- list(   list(     previewImageSrc = \"https://picsum.photos/318/196\",     width = 318,     height = 196   ) )  ui <- function(id) {   ns <- NS(id)   DocumentCard(     DocumentCardPreview(previewImages = previewImages),     DocumentCardTitle(       title = title,       shouldTruncate = TRUE     ),     DocumentCardActivity(       activity = \"Created a few minutes ago\",       people = list(list(name = \"Annie Lindqvist\"))     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dropdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Dropdown — Dropdown","title":"Dropdown — Dropdown","text":"dropdown menu list selected item always visible items visible demand clicking dropdown button. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dropdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dropdown — Dropdown","text":"","code":"Dropdown(...)  Dropdown.shinyInput(inputId, ..., value = defaultValue)  updateDropdown.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dropdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dropdown — Dropdown","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dropdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dropdown — Dropdown","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dropdown.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dropdown — Dropdown","text":"defaultSelectedKeys  string[] | number[]  Keys initially used set selected items. prop used multiSelect true (use defaultSelectedKey single select). Mutually exclusive selectedKeys. dropdownWidth  number  Custom width dropdown. value 0, width input field used. isDisabled  boolean  Deprecated v0.52.0, use disabled instead. keytipProps  IKeytipProps  Optional keytip dropdown multiSelectDelimiter  string  multiple items selected, used separate values dropdown input. notifyOnReselect  boolean  true, onChange still called already-selected item clicked single select mode. (Normally called case.) onChange  (event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption, index?: number) => void  Callback selected option changes. onChanged  (option: IDropdownOption, index?: number) => void onRenderCaretDown  IRenderFunction<IDropdownProps>  Custom renderer chevron icon onRenderLabel  IRenderFunction<IDropdownProps>  Custom renderer label. onRenderPlaceholder  IRenderFunction<IDropdownProps>  Custom renderer placeholder text onRenderPlaceHolder  IRenderFunction<IDropdownProps>  Custom renderer placeholder text onRenderTitle  IRenderFunction<IDropdownOption[]>  Custom renderer selected option displayed input options  IDropdownOption[]  Options dropdown. using defaultSelectedKey defaultSelectedKeys, options must pure correct behavior. placeHolder  string  Input placeholder text. Displayed option selected. responsiveMode  ResponsiveMode  default, dropdown render standard way screen sizes large , panel small medium screens. Manually set prop override behavior. selectedKeys  string[] | number[] | null  Keys selected items, used multiSelect true (use selectedKey single select). provide , must maintain selection state observing onChange events passing new prop value changed. Passing null clear selection. Mutually exclusive defaultSelectedKeys. styles  IStyleFunctionOrObject<IDropdownStyleProps, IDropdownStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided higher order component.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dropdown.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Dropdown — Dropdown","text":"Use dropdown list multiple choices can collapsed one title, list items long, space constrained. Use dropdown list selected option important alternatives (contrast radio buttons choices visible, putting equal emphasis options).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dropdown.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"Dropdown — Dropdown","text":"Use sentence-style capitalization—capitalize first word. info, see Capitalization Microsoft Writing Style Guide. dropdown list label describe can found menu. Use shortened statements single words list options. default option, use \"Select option\" placeholder text. \"None\" option, include . Write choices using parallel construction. example, start part speech verb tense.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Dropdown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dropdown — Dropdown","text":"","code":"library(shiny) library(shiny.fluent)  options <- list(   list(key = \"A\", text = \"Option A\"),   list(key = \"B\", text = \"Option B\"),   list(key = \"C\", text = \"Option C\") )  ui <- function(id) {   ns <- NS(id)   div(     Dropdown.shinyInput(ns(\"dropdown\"), value = \"A\", options = options),     textOutput(ns(\"dropdownValue\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$dropdownValue <- renderText({       sprintf(\"Value: %s\", input$dropdown)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Facepile.html","id":null,"dir":"Reference","previous_headings":"","what":"Facepile — Facepile","title":"Facepile — Facepile","text":" face pile (Facepile) displays list personas. circle represents person contains image initials. Often control used sharing access specific view file, assigning someone task within workflow. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Facepile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facepile — Facepile","text":"","code":"Facepile(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Facepile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facepile — Facepile","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Facepile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facepile — Facepile","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Facepile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Facepile — Facepile","text":"addButtonProps  IButtonProps  Button properties add face button ariaDescription  string  ARIA label persona list ariaLabel  string  Defines aria label screen readers use focus goes list personas. chevronButtonProps  IButtonProps  Deprecated v0.70, use overflowButtonProps instead. className  string  Additional css class apply Facepile componentRef  IRefObject<IFacepile>  Optional callback access IFacepile interface. Use instead ref accessing public methods properties component. getPersonaProps  (persona: IFacepilePersona) => IPersonaSharedProps  Method access properties underlying Persona control maxDisplayablePersonas  number  Maximum number personas show onRenderPersona  IRenderFunction<IFacepilePersona>  Optional custom renderer persona, gets called one persona personas array onRenderPersonaCoin  IRenderFunction<IFacepilePersona>  Optional custom renderer persona coins, gets called multiple persona personas array overflowButtonProps  IButtonProps  Properties overflow icon overflowButtonType  OverflowButtonType  Type overflow icon use overflowPersonas  IFacepilePersona[]  Personas place overflow personas  IFacepilePersona[]  Array IPersonaProps define Persona. personaSize  PersonaSize  Size display personas showAddButton  boolean  Show add person button styles  IStyleFunctionOrObject<IFacepileStyleProps, IFacepileStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided High-Order Component.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Facepile.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Facepile — Facepile","text":"face pile empty state include  \"Add\" button. Another variant use input field placeholder text instructing people add person. See  people picker component menu used add people  face pile list. one person  face pile, consider using name next face initials. need show  face pile expanded vertical list, include downward chevron button. Selecting chevron opens standard list view  people.  face pile exceeds max number 5 people, show button end list indicating many shown. Clicking tapping overflow open standard list view  people. component can include \"Add\" button can used quickly adding person list. hovering person face pile, include tooltip people card offers information person.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Facepile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Facepile — Facepile","text":"","code":"library(shiny) library(shiny.fluent)  personas <- list(   list(personaName = \"Adams Baker\"),   list(personaName = \"Clark Davis\"),   list(personaName = \"Evans Frank\") )  ui <- function(id) {   ns <- NS(id)   Facepile(personas = personas) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/FocusTrapZone.html","id":null,"dir":"Reference","previous_headings":"","what":"FocusTrapZone — FocusTrapCallout","title":"FocusTrapZone — FocusTrapCallout","text":"FocusTrapZone used trap focus html element. Pressing tab circle focus within inner focusable elements FocusTrapZone. Note: Trapping focus restrict interaction elements website side nav. Turn \"Use trap zone\" toggle control allow interaction happen . details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/FocusTrapZone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusTrapZone — FocusTrapCallout","text":"","code":"FocusTrapCallout(...)  FocusTrapZone(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/FocusTrapZone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusTrapZone — FocusTrapCallout","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/FocusTrapZone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FocusTrapZone — FocusTrapCallout","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/FocusTrapZone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FocusTrapZone — FocusTrapCallout","text":"ariaLabelledBy  string  Sets aria-labelledby attribute. componentRef  IRefObject<IFocusTrapZone>  Optional callback access IFocusTrapZone interface. Use instead ref accessing public methods properties component. disabled  boolean  Whether disable FocusTrapZone's focus trapping behavior. disableFirstFocus  boolean  put focus onto first element inside focus trap zone. elementToFocusOnDismiss  HTMLElement  Sets element focus exiting FocusTrapZone. enableAriaHiddenSiblings  boolean  Puts aria-hidden=true non-ancestors current element, screen readers. experimental feature graduated default behavior testing. flag removed next major release. firstFocusableSelector  string | (() => string)  Class name (actual selector) first focusable item. append dot. applies focusPreviouslyFocusedInnerElement false. focusPreviouslyFocusedInnerElement  boolean  Specifies descendant element focus focus() called. false, use first focusable descendant, filtered firstFocusableSelector property present. true, use element focused trap zone last focused descendant (fall back first focusable descendant trap zone never focused). forceFocusInsideTrap  boolean  Whether focus trap zone force focus stay inside . ignoreExternalFocusing  boolean  false (default), trap zone restore focus element activated trap zone unmounted disabled. Set true disable behavior. isClickableOutsideFocusTrap  boolean  Whether clicks allowed outside FocusTrapZone.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/FocusTrapZone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FocusTrapZone — FocusTrapCallout","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   reactOutput(ns(\"focusTrapZone\")) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns     output$focusTrapZone <- renderReact({       useTrapZone <- isTRUE(input$useTrapZone)       stackStyles <- list(root = list(         border = if (useTrapZone) '2px solid #ababab' else 'transparent',         padding = 10       ))       textFieldStyles <- list(root = list(width = 300));       stackTokens = list(childrenGap = 8);        div(         FocusTrapZone(           disabled = !useTrapZone,           Stack(             horizontalAlign = \"start\",             tokens = stackTokens,             styles = stackStyles,             Toggle.shinyInput(ns(\"useTrapZone\"),               value = FALSE,               label = \"Use trap zone\",               onText = \"On (toggle to exit)\",               offText = \"Off (toggle to trap focus)\"             ),             TextField.shinyInput(               ns(\"textInput\"),               label = \"Input inside trap zone\",               styles = textFieldStyles             ),             Link(               href = \"https://bing.com\",               target = \"_blank\",               \"Hyperlink inside trap zone\"             )           )         ),         Link(           href = \"https://bing.com\",           target = \"_blank\",           \"Hyperlink outside trap zone\"         )       )     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/FocusZone.html","id":null,"dir":"Reference","previous_headings":"","what":"FocusZone — FocusZone","title":"FocusZone — FocusZone","text":"FocusZones abstract arrow key navigation behaviors. Tabbable elements (buttons, anchors, elements data--focusable='true' attributes) considered pressing directional arrow keys focus moved appropriately. Tabbing zone sets focus current \"active\" element, making simple use tab key transition one zone next, rather every focusable element. Using FocusZone simple. Just wrap bunch content inside FocusZone, arrows tabbling handled ! See examples . details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/FocusZone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FocusZone — FocusZone","text":"","code":"FocusZone(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/FocusZone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FocusZone — FocusZone","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/FocusZone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FocusZone — FocusZone","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/FocusZone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FocusZone — FocusZone","text":"allowFocusRoot  boolean  Allows focus park root focus FocusZone render time. allowTabKey  boolean  Allows tab key handled tab list items focus zone, unfortunate side effect users able tab focus zone hit escape key. ariaDescribedBy  string  Sets aria-describedby attribute. ariaLabelledBy  string  Sets aria-labelledby attribute.  React.ElementType  component used root element FocusZone component. checkForNoWrap  boolean  Determines whether check data--horizontal-wrap data--vertical-wrap attributes determining move focus className  string  Additional class name provide root element, addition ms-FocusZone class. componentRef  IRefObject<IFocusZone>  Optional callback access IFocusZone interface. Use instead ref accessing public methods properties component. defaultActiveElement  string  Optionally provide selector identifying initial active element. defaultTabbableElement  string | ((root: HTMLElement) => HTMLElement)  Optionally defines initial tabbable element inside FocusZone. string passed treated selector identifying initial tabbable element. function passed uses root element parameter return initial tabbable element. direction  FocusZoneDirection  Defines arrows react . disabled  boolean  set, FocusZone tabbable keyboard navigation disabled. affect disabled attribute child. doNotAllowFocusEventToPropagate  boolean  Whether FocusZone allow focus events propagate past FocusZone. elementType   Element type root element use. Default \"div\". handleTabKey  FocusZoneTabbableElements  Allows tab key handled tab list items focus zone, unfortunate side effect users able tab focus zone hit escape key. isCircularNavigation  boolean  set, cycle beginning targets user navigates next target end, end navigate previous beginning. isInnerZoneKeystroke  (ev: React.KeyboardEvent<HTMLElement>) => boolean  provided, callback executed keypresses determine user intends navigate inner zone. Returning true ask first inner zone set focus. onActiveElementChanged  (element?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void  Callback one immediate children elements gets active getting focused one respective children elements focused. onBeforeFocus  (childElement?: HTMLElement) => boolean  Callback method determining focus indeed set given element. onFocus  (event: React.FocusEvent<HTMLElement | FocusZone>) => void  Callback called \"focus\" event triggered FocusZone. onFocusNotification  () => void  Callback notify creators focus set FocusZone pagingSupportDisabled  boolean  Determines whether disable paging support Page Page keyboard scenarios. preventDefaultWhenHandled  boolean  true, FocusZone prevents default behavior Keyboard events changing focus elements. preventFocusRestoration  boolean  true, prevents FocusZone attempting restore focus inner element focus root element componentDidUpdate. rootProps  React.HTMLAttributes<HTMLDivElement>  Deprecated v1.12.1. DIV props provided FocusZone mixed root element. shouldEnterInnerZone  (ev: React.KeyboardEvent<HTMLElement>) => boolean  Callback function executed keypresses determine user intends navigate inner (nested) zone. Returning true ask first inner zone set focus. shouldFocusInnerElementWhenReceivedFocus  boolean  true FocusZone's root element (container) receives focus, focus land either defaultTabbableElement (set) first tabbable element FocusZone. Usually case nested focus zones, nested focus zone's container focusable element. shouldFocusOnMount  boolean  Determines default tabbable element force focused FocusZone mount.  @default false shouldInputLoseFocusOnArrowKey  (inputElement: HTMLInputElement) => boolean  callback method determine input element lose focus arrow keys shouldRaiseClicks  boolean  Determines whether FocusZone walk DOM trying invoke click callbacks focusable elements Enter Space keydowns ensure accessibility tags guarantee behavior. shouldReceiveFocus  (childElement?: HTMLElement) => boolean  Callback method determining focus indeed set given element. shouldResetActiveElementWhenTabFromZone  boolean  true TAB key handled FocusZone, resets current active element null value. example, roving index desirable focus always reset default tabbable element. stopFocusPropagation  boolean  Whether FocusZone allow focus events propagate past FocusZone.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/FocusZone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FocusZone — FocusZone","text":"","code":"library(shiny) library(shiny.fluent)  tokens <- list(childrenGap = 20)  ui <- function(id) {   ns <- NS(id)   Stack(     tokens = tokens,     horizontalAlign = \"start\",     FocusZone(       Stack(         tokens = tokens,         horizontal = TRUE,         verticalAlign = \"center\",         tags$span(\"Enabled FocusZone:\"),         DefaultButton(text = \"Button 1\"),         DefaultButton(text = \"Button 2\"),         TextField(placeholder = \"FocusZone TextField\"),         DefaultButton(text = \"Button 3\")       )     ),     DefaultButton(text = \"Tabbable Element 1\"),     FocusZone(       disabled = TRUE,       Stack(         tokens = tokens,         horizontal = TRUE,         verticalAlign = \"center\",         tags$span(\"Disabled FocusZone:\"),         DefaultButton(text = \"Button 1\"),         DefaultButton(text = \"Button 2\")       )     ),     TextField(placeholder = \"Tabbable Element 2\")   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/GroupedList.html","id":null,"dir":"Reference","previous_headings":"","what":"GroupedList — GroupedList","title":"GroupedList — GroupedList","text":"grouped list (GroupedList) allows render set items multiple lists various grouping properties. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/GroupedList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GroupedList — GroupedList","text":"","code":"GroupedList(...)  GroupHeader(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/GroupedList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GroupedList — GroupedList","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/GroupedList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GroupedList — GroupedList","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/GroupedList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GroupedList — GroupedList","text":"className  string  Custom className compact  boolean  Boolean value indicate component render compact mode. Set false default componentRef  IRefObject<{}> expandButtonProps  React.HTMLAttributes<HTMLButtonElement>  Props expand/collapse button footerText  string  Text display group footer. group  IGroup  group rendered header. groupIndex  number  index group. groupLevel  number  indent level group. groups  IGroup[]  Stores parent group's children. indentWidth  number  Width corresponding single level. multiplied groupLevel get full spacer width group. isCollapsedGroupSelectVisible  boolean  Determines group selection check box shown collapsed groups. isGroupLoading  (group: IGroup) => boolean  Callback determine group missing items needs load server. isSelected  boolean  Deprecated v.65.1 removed v 1.0. Use selected instead. loadingText  string  Text shown group headers indicate group loaded. onGroupHeaderClick  (group: IGroup) => void  Callback group header clicked. onRenderTitle  IRenderFunction<IGroupHeaderProps>  Override allows caller provider custom renderer GroupHeader title. onToggleCollapse  (group: IGroup) => void  Callback group expanded collapsed. onToggleSelectGroup  (group: IGroup) => void  Callback group selected. onToggleSummarize  (group: IGroup) => void  Callback group \"Show \" link clicked selected  boolean  items group selected. selectionMode  SelectionMode  selection mode list group lives within. showAllLinkText  string  Text display group \"Show \" link. theme  ITheme  Theme provided Higher Order Component viewport  IViewport  reference viewport header rendered. className  string  Optional class name add root element. compact  boolean  Boolean value indicate component render compact mode. Set false default componentRef  IRefObject<IGroupedList>  Optional callback access IGroupedList interface. Use instead ref accessing public methods properties component. dragDropEvents  IDragDropEvents  Map callback functions related drag drop functionality. dragDropHelper  IDragDropHelper  helper manage drag/drop across item groups eventsToRegister  { eventName: string; callback: (context: IDragDropContext, event?: ) => void; }[]  Event names corresponding callbacks registered groups rendered elements focusZoneProps  IFocusZoneProps  Optional properties pass FocusZone. getGroupHeight  (group: IGroup, groupIndex: number) => number  Optional function override default group height calculation used list virtualization. groupProps  IGroupRenderProps  Optional override properties render groups. groups  IGroup[]  Optional grouping instructions. items  []  List items render. listProps  IListProps  Optional properties pass list components rendered. onGroupExpandStateChanged  (isSomeGroupExpanded: boolean) => void  Optional callback group expand state changes collapsed least one group expanded. onRenderCell  (nestingDepth?: number, item?: , index?: number) => React.ReactNode  Rendering callback render group items. onShouldVirtualize  (props: IListProps) => boolean  Optional callback determine whether list rendered full, virtualized. Virtualization add remove pages items user scrolls visible range. benefits larger list scenarios reducing DOM screen, can negatively affect performance smaller lists. default implementation virtualize callback provided. selection  ISelection  Optional selection model track selection state. selectionMode  SelectionMode  Controls /list manages selection. styles  IStyleFunctionOrObject<IGroupedListStyleProps, IGroupedListStyles>  Style function passed override themed default styles theme  ITheme  Theme passed Higher Order Component usePageCache  boolean  boolean control pages containing unchanged items cached, perf optimization property List.Props viewport  IViewport  Optional Viewport, provided parent component. styles  IStyleFunctionOrObject<IGroupFooterStyleProps, IGroupFooterStyles>  Style function passed override themed default styles checked  boolean theme  ITheme ariaPosInSet  number  Defines element's number position current set listitems treeitems ariaSetSize  number  Defines number items current set listitems treeitems expandButtonIcon  string  Defines name custom icon used group headers. set, default icon used expandButtonProps  React.HTMLAttributes<HTMLButtonElement>  Native props GroupHeader expand collapse button groupedListId  string  GroupedList id aria-controls onRenderGroupHeaderCheckbox  IRenderFunction<IGroupHeaderCheckboxProps>  provided, can used render custom checkbox selectAllButtonProps  React.HTMLAttributes<HTMLButtonElement>  Native props GroupHeader select button styles  IStyleFunctionOrObject<IGroupHeaderStyleProps, IGroupHeaderStyles>  Style function passed override themed default styles useFastIcons  boolean  Whether use fast icon check components. icons targeted customization still customizable via class names. collapseAllVisibility  CollapseAllVisibility  Flag indicate whether ignore collapsing icon header. footerProps  IGroupFooterProps  Information pass group footer. getGroupItemLimit  (group: IGroup) => number  Grouping item limit. headerProps  IGroupHeaderProps  Information pass group header. isAllGroupsCollapsed  boolean  Boolean indicating groups collapsed state. onRenderFooter  IRenderFunction<IGroupFooterProps>  Override allows caller provide custom footer. onRenderHeader  IRenderFunction<IGroupHeaderProps>  Override allows caller provide custom header. onRenderShowAll  IRenderFunction<IGroupShowAllProps>  Override allows caller provide custom Show link. onToggleCollapseAll  (isAllCollapsed: boolean) => void  Callback groups expanded collapsed. role  string  Override allows caller provide custom aria role showAllProps  IGroupShowAllProps  Information pass group Show footer. showEmptyGroups  boolean  Boolean indicating empty groups shown showAllLinkText  string  Show link text. styles  IStyleFunctionOrObject<IGroupShowAllStyleProps, IGroupShowAllStyles>  Style function passed override themed default styles count  number  Count spacer(s) indentWidth  number  much indent styles  IStyleFunctionOrObject<IGroupSpacerStyleProps, IGroupSpacerStyles>  Style function passed override themed default styles theme  ITheme  Theme Higher Order Component","code":""},{"path":[]},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/GroupedList.html","id":"my-list-is-not-re-rendering-when-i-mutate-its-items-what-should-i-do-","dir":"Reference","previous_headings":"","what":"My List is not re-rendering when I mutate its items. What should I do?","title":"GroupedList — GroupedList","text":"determine list within grouped list re-render contents, component performs referential equality check within shouldComponentUpdate method. done minimize performance overhead associating re-rendering virtualized List pages, recommended React documentation. result implementation, inner list determine re-render array values mutated. avoid problem, recommend re-creating items array backing grouped list using method Array.prototype.concat ES6 spread syntax shown :   re-creating items array without mutating values, inner List correctly determine contents changed re-render new values.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/GroupedList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GroupedList — GroupedList","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   GroupedList(     items = list(\"Item A\", \"Item B\", \"Item C\", \"Item D\", \"Item E\"),     groups = list(       list(key = \"g1\", name = \"Some items\", startIndex = 0, count = 2),       list(key = \"g2\", name = \"More items\", startIndex = 2, count = 3)     ),     selectionMode = 0,     onRenderCell = JS(\"(depth, item) => (       jsmodule['react'].createElement('span', { style: { paddingLeft: 49 } }, item)     )\")   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/HoverCard.html","id":null,"dir":"Reference","previous_headings":"","what":"HoverCard — HoverCard","title":"HoverCard — HoverCard","text":"Hover cards (HoverCard) show commands  information,  metadata  activity, someone hovers item. Tabbing keyboard element triggering HoverCard open focus (see first example). case navigation within card available navigating next element close card. Tabbing keyboard element triggering HoverCard opening hotKey pressed (see second example). card opened automatically focus first focusable element card content. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/HoverCard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HoverCard — HoverCard","text":"","code":"HoverCard(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/HoverCard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HoverCard — HoverCard","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/HoverCard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HoverCard — HoverCard","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/HoverCard.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"HoverCard — HoverCard","text":"compactCardHeight  number  Height compact card expandedCardHeight  number  Height expanded card mode  ExpandingCardMode  Use open card expanded format wait delay onRenderCompactCard  IRenderFunction<>  Render function populate compact content area onRenderExpandedCard  IRenderFunction<>  Render function populate expanded content area cardDismissDelay  number  Length card dismiss delay. min number necessary pointer hop target card cardOpenDelay  number  Length compact card delay className  string  Additional CSS class(es) apply HoverCard root element. componentRef  IRefObject<IHoverCard>  Optional callback access IHoverCardHost interface. Use instead ref accessing public methods properties component. eventListenerTarget  HTMLElement | string | null  prop separate target anchor hover card target attach event listener. set, prop separates target anchor hover card target attach event listener. eventListenerTarget given, HoverCard use target prop root set event listener. expandedCardOpenDelay  number  Time ms expanded card open compact card expandingCardProps  IExpandingCardProps  Additional ExpandingCard props pass HoverCard like renderers, target. gapSpace etc. Used along 'type' prop set HoverCardType.expanding. Reference detail properties ICardProps IExpandingCardProps. instantOpenOnClick  boolean  Enables instant open full card upon click onCardExpand  () => void  Callback visible card expanded. onCardHide  () => void  Callback card hides onCardVisible  () => void  Callback card becomes visible openHotKey  KeyCodes  HotKey used opening HoverCard tabbed target. plainCardProps  IPlainCardProps  Additional PlainCard props pass HoverCard like renderers, target, gapSpace etc. Used along 'type' prop set HoverCardType.plain. See details ICardProps IPlainCardProps interfaces. setAriaDescribedBy  boolean  Whether mark container described hover card. specified, caller mark element described hover card id. setInitialFocus  boolean  Set true set focus first focusable element card. Works pair 'trapFocus' prop. shouldBlockHoverCard  () => void  block hover card sticky  boolean  true disables Card dismiss upon mouse leave, card sticks around. styles  IStyleFunctionOrObject<IHoverCardStyleProps, IHoverCardStyles>  Custom styles component target  HTMLElement | string | null  Optional target element tag hover card . provided using HoverCard wrapper, set 'data--focusable=true' attribute root wrapped child. target given, HoverCard use root target become focusable element focus listener attached . theme  ITheme  Theme provided higher order component. trapFocus  boolean  Set true want render content HoverCard FocusTrapZone accessibility reasons. Optionally 'setInitialFocus' prop can set true move focus inside FocusTrapZone. type  HoverCardType  Type hover card render. onRenderPlainCard  IRenderFunction<>  Render function populate compact content area","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/HoverCard.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"HoverCard — HoverCard","text":"Hover cards contain  compact expanded states,  compact state appearing  500 milliseconds expanded state appearing user continues hover  1500 milliseconds.  hover card positions automatically, depending upon target viewport. Position  target  card doesn’t obstruct inline commanding item.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/HoverCard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HoverCard — HoverCard","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   HoverCard(     type = \"PlainCard\",     plainCardProps = JS(\"{       onRenderPlainCard: (a, b, c) => 'HoverCard contents',       style: { margin: 10 }     }\"),     \"Hover over me\"   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Icon — FontIcon","title":"Icon — FontIcon","text":"user interface, icon image represents application, capability, concept specific entity meaning user. icon usually selectable can also nonselectable image, company's logo. list icons, visit icon documentation. Note icons bundled default typically must loaded calling initializeIcons @uifabric/icons package root application. See icon documentation details. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Icon — FontIcon","text":"","code":"FontIcon(...)  Icon(...)  ImageIcon(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Icon — FontIcon","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Icon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Icon — FontIcon","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Icon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Icon — FontIcon","text":"className  string  Custom class style icon. iconName  string  name icon use icon font. string empty, placeholder icon rendered width icon. ariaLabel  string  aria label icon benefit screen readers. iconName  string  name icon use icon font. string empty, placeholder icon rendered width icon. iconType  IconType  type icon render (image icon font). imageErrorAs  React.ComponentType<IImageProps>  rendering image icon, component rendered event loading image fails. imageProps  IImageProps  rendering image icon, props passed Image component. styles  IStyleFunctionOrObject<IIconStyleProps, IIconStyles>  Gets styles Icon. theme  ITheme className  string  Custom class style icon. imageProps  IImageProps  Props passed Image component.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Icon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Icon — FontIcon","text":"","code":"library(shiny) library(shiny.fluent)  style <- list(fontSize = 50, margin = 10)  ui <- function(id) {   ns <- NS(id)   tags$div(     FontIcon(iconName = \"CompassNW\", style = style),     FontIcon(iconName = \"Dictionary\", style = style),     FontIcon(iconName = \"TrainSolid\", style = style)   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Image.html","id":null,"dir":"Reference","previous_headings":"","what":"Image — Image","title":"Image — Image","text":"image graphic representation something (e.g photo illustration). borders added examples order help visualize empty space image frame. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Image — Image","text":"","code":"Image(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Image — Image","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Image — Image","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Image.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Image — Image","text":"className  string  Additional css class apply Component coverStyle  ImageCoverStyle  Specifies cover style used image. specified, dynamically calculated based aspect ratio image. errorSrc  string  Deprecated v1.3.6, replace src case errors, use onLoadingStateChange instead rerender Image difference src. imageFit  ImageFit  Used determine image scaled cropped fit frame. maximizeFrame  boolean  true, image frame expand fill parent container. onLoadingStateChange  (loadState: ImageLoadState) => void  Optional callback method image load state changed. 'loadState' parameter indicates current state Image. shouldFadeIn  boolean  true, fades image loaded. shouldStartVisible  boolean  true, image starts visible hidden error. Otherwise, image hidden successfully loaded. disables shouldFadeIn. styles  IStyleFunctionOrObject<IImageStyleProps, IImageStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Image — Image","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   Image(src = \"https://via.placeholder.com/350x150\") }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Keytip.html","id":null,"dir":"Reference","previous_headings":"","what":"Keytip — Keytip","title":"Keytip — Keytip","text":"Keytip small popup near component indicates key sequence trigger component. confused keyboard shortcuts; instead key sequences traverse levels UI components. Technically, Keytip wrapper around Callout target element discovered 'data-ktp-target' attribute element. enable Keytips page, developer add KeytipLayer component somewhere document. can added anywhere document, must added . Use registerKeytip utility helper add Keytip. user enter exit keytip mode IKeytipTransitionSequence, key amount modifiers (Alt, Shift, etc). default, entry exit sequence 'Alt-Windows' (Meta) Windows 'Option-Control' macOS. also sequence 'return' level keytips traversing. default 'Esc'. Fluent UI React components keytips enabled optional 'keytipProps' prop handles registering, unregistering, rendering keytip. keySequences Keytip full sequence get keytip. 'buildKeytipConfigMap' helper build map ID -> IKeytipProps assist defining keytips. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Keytips.html","id":null,"dir":"Reference","previous_headings":"","what":"Keytips — KeytipLayer","title":"Keytips — KeytipLayer","text":"details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Keytips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keytips — KeytipLayer","text":"","code":"KeytipLayer(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Keytips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Keytips — KeytipLayer","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Keytips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Keytips — KeytipLayer","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Keytips.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Keytips — KeytipLayer","text":"componentRef  IRefObject<IKeytipLayer>  Optional callback access KeytipLayer component. Use instead ref accessing public methods properties component. content  string  String put inside layer used aria-describedby component keytip one starting sequences keytipExitSequences  IKeytipTransitionKey[]  List key sequences exit keytips mode keytipReturnSequences  IKeytipTransitionKey[]  List key sequences execute return functionality keytips (going back previous level keytips) keytipStartSequences  IKeytipTransitionKey[]  List key sequences start keytips mode onEnterKeytipMode  () => void  Callback function triggered keytip mode entered onExitKeytipMode  (ev?: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>) => void  Callback function triggered keytip mode exited. ev Mouse Keyboard Event triggered exit, . styles  IStyleFunctionOrObject<IKeytipLayerStyleProps, IKeytipLayerStyles>  (Optional) Call provide customized styling. calloutProps  ICalloutProps  ICalloutProps pass callout element content  string  Content put inside keytip disabled  boolean  T/F corresponding control keytip disabled hasDynamicChildren  boolean  Whether keytip children keytips dynamically created (DOM generated keytip activation). Common cases Pivot Modal. hasMenu  boolean  Whether keytip belongs component menu Keytip mode stay menu opened, even items menu keytips keySequences  string[]  Array KeySequences full key sequence trigger keytip include initial 'start' key sequence offset  Point  Offset x y keytip, added top-left corner default keytip anchored bottom-center element onExecute  (executeTarget: HTMLElement | null, target: HTMLElement | null) => void  Function call keytip activated. 'executeTarget' DOM element marked 'data-ktp-execute-target'. 'target' DOM element marked 'data-ktp-target'. onReturn  (executeTarget: HTMLElement | null, target: HTMLElement | null) => void  Function call keytip currentKeytip return sequence pressed. 'executeTarget' DOM element marked 'data-ktp-execute-target'. 'target' DOM element marked 'data-ktp-target'. overflowSetSequence  string[]  Full KeySequence overflow set button, set automatically keytip inside overflow styles  IStyleFunctionOrObject<IKeytipStyleProps, IKeytipStyles>  Optional styles component. theme  ITheme  Theme component visible  boolean  T/F keytip visible","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Keytips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keytips — KeytipLayer","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   tagList(     tags$script(HTML(paste0(\"       const btnExecute = (el) => {         console.log(el);         el.click();       };        const keytipConfig = {         keytips: [           // Button example           {             id: 'Button',             content: '1A',             optionalProps: {               onExecute: btnExecute,             },           },           {             id: 'CompoundButton',             content: '1B',             optionalProps: {               onExecute: btnExecute,             },           },           {             id: 'ButtonWithMenu',             content: '2A',             optionalProps: {               onExecute: btnExecute,             },             children: [               {                 id: 'ButtonMenuItem1',                 content: 'E',                 optionalProps: {                   onExecute: btnExecute,                 },               },               {                 id: 'ButtonMenuItem2',                 content: '8',                 optionalProps: {                   onExecute: btnExecute,                 },               },             ],           }         ],       };        keytipMap = jsmodule['@fluentui/react'].buildKeytipConfigMap(keytipConfig);        const buttonProps = {         items: [           {             key: 'buttonMenuItem1',             text: 'Menu Item 1',             keytipProps: keytipMap.ButtonMenuItem1,             onClick: () => Shiny.setInputValue('\", ns(\"button3\"), \"', Math.random())           },           {             key: 'buttonMenuItem2',             text: 'Menu Item 2',             keytipProps: keytipMap.ButtonMenuItem2,             onClick: () => Shiny.setInputValue('\", ns(\"button3\"), \"', Math.random())           },         ],       };     \"))),     textOutput(ns(\"keytipsResult\")),     div(       Label(         paste0(           \"To open keytips, hit 'Alt-Windows' on Windows/Linux and 'Option-Control' on macOS.\",           \"Keytips will appear. Type what you see, e.g. 1 and then A to 'click' the first button.\"         )       ),       Label(         paste0(           \"When multiple Keytips start with the same character,\",           \"typing that character will filter the visible keytips.\"         )       ),       KeytipLayer(),       Stack(horizontal = TRUE, tokens = list(childrenGap = 20),         DefaultButton.shinyInput(           ns(\"button1\"),           keytipProps = JS(\"keytipMap.Button\"),           text = \"Button\"         ),         CompoundButton.shinyInput(           ns(\"button2\"),           style = list(marginBottom = 28),           keytipProps = JS(\"keytipMap.CompoundButton\"),           text = \"Compound Button\",           secondaryText = 'With a Keytip'         ),         DefaultButton.shinyInput(           ns(\"button3\"),           keytipProps = JS(\"keytipMap.ButtonWithMenu\"),           text = \"Button with Menu\",           menuProps = JS(\"buttonProps\")         )       )     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     clicks <- reactiveVal(0)     addClick <- function() clicks(clicks() + 1)     output$keytipsResult <- renderText(paste(\"Buttons clicked: \", clicks()))     observeEvent(input$button1, addClick())     observeEvent(input$button2, addClick())     observeEvent(input$button3, addClick())   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Label.html","id":null,"dir":"Reference","previous_headings":"","what":"Label — Label","title":"Label — Label","text":"Labels give name title control group  controls, including text fields, check boxes, combo boxes, radio buttons, drop-menus. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label — Label","text":"","code":"Label(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label — Label","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label — Label","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Label — Label","text":" IComponentAs<React.AllHTMLAttributes<HTMLElement>>  Render root element another type. componentRef  IRefObject<ILabel>  Optional callback access ILabel interface. Use instead ref accessing public methods properties component. disabled  boolean  Renders label disabled. required  boolean  Whether associated form field required styles  IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>  Styles label. theme  ITheme  Theme provided HOC.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Label.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Label — Label","text":"Labels close control paired .","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Label.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"Label — Label","text":"Labels describe purpose control. Use sentence-style capitalization—capitalize first word. info, see Capitalization Microsoft Writing Style Guide. short concise. Use nouns short noun phrases. use labels instructional text. example, \"Click get started\".","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label — Label","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   Label(\"Required label\", required = TRUE) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Layer — Layer","title":"Layer — Layer","text":"Layer technical component specific Design guidance. Layers used render content outside DOM tree, end document. allows content escape traditional boundaries caused \"overflow: hidden\" css rules keeps top without using z-index rules. useful example ContextualMenu Tooltip scenarios, content always overlay everything else. special considerations. Due nature rendering content elsewhere asynchronously, React refs within content resolvable synchronously time Layer mounted. Therefore, use refs correctly, use functional refs ref={ (el) => { ._root = el; } rather string refs ref='root'. Additionally measuring physical Layer element include children, since render . Events propgate within content go Layer element well. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layer — Layer","text":"","code":"Layer(...)  LayerHost(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layer — Layer","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Layer — Layer","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Layer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Layer — Layer","text":"className  string  Additional css class apply Layer componentRef  IRefObject<ILayer>  Optional callback access ILayer interface. Use instead ref accessing public methods properties component. eventBubblingEnabled  boolean  enabled, Layer allows events bubble Layer content. Traditionally Layer behavior. prop preserves backwards compatibility default allowing users opt new event bubbling functionality. hostId  string  optional id property provided LayerHost Layer render within. LayerHost need immediately available rendered, missing, avoid trying render Layer content host available. id provided, render Layer content fixed position element rendered end document. insertFirst  boolean  Whether layer added first child host. true, layer inserted first child host default, layer appended end host onLayerDidMount  () => void  Callback layer mounted. onLayerMounted  () => void  Callback layer mounted. onLayerWillUnmount  () => void  Callback layer unmounted. styles  IStyleFunctionOrObject<ILayerStyleProps, ILayerStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Layer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layer — Layer","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     style = \"margin-top: 60px; border: 1px solid navy; padding: 10px; background: #eee;\",     Checkbox.shinyInput(ns(\"useLayer\"), value = FALSE, label = \"Display a message in a layer\"),     reactOutput(ns(\"layer\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$layer <- renderReact({       box <- div(         style = \"background-color: #60C7FF; margin: 10px; padding: 10px\",         \"Hello!\"       )       if (isTRUE(input$useLayer)) Layer(box)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) } library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     LayerHost(id = \"host\", style = list(border = \"1px dashed\", padding = 10)),     \"Layer children are rendered in the LayerHost\",     Layer(hostId = \"host\", \"Content\")   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Link.html","id":null,"dir":"Reference","previous_headings":"","what":"Link — Link","title":"Link — Link","text":"Links lead  another part app,  pages,  help articles. can also used initiate commands. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Link — Link","text":"","code":"Link(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Link — Link","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Link — Link","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Link.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Link — Link","text":" string | React.ComponentClass | React.FunctionComponent  component used root element link returned Link component. componentRef  IRefObject<ILink>  Optional callback access ILink interface. Use instead ref accessing public methods properties component. disabled  boolean  Whether link disabled keytipProps  IKeytipProps  Optional keytip Link styles  IStyleFunctionOrObject<ILinkStyleProps, ILinkStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme (provided customization.)","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Link.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Link — Link","text":"Links visually indicate can clicked, typically displayed using visited unvisited link system colors. Traditionally, links underlined well, approach often reserved body copy links within article.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Link.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"Link — Link","text":"People able accurately predict result selecting link based link text optional tooltip. Use descriptive, actionable link text possible. Avoid using URLs link text. use action destructive irreversible. Links appropriate commands significant consequences. Keep discrete links far enough apart people can differentiate easily select one. Use sentence-style capitalization—capitalize first word. info, see Capitalization Microsoft Writing Style Guide.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Link — Link","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   Link(href = \"https://appsilon.com\", \"Appsilon\") }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/List.html","id":null,"dir":"Reference","previous_headings":"","what":"List — List","title":"List — List","text":"list provides base component rendering large sets items. ’s agnostic layout,  tile component used, selection management. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/List.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List — List","text":"","code":"List(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/List.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List — List","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/List.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List — List","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/List.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List — List","text":"divProps  React.HTMLAttributes<HTMLDivElement>  Props apply list root element. pages  IPage<T>[]  active pages rendered list. rendered using onRenderPage. rootRef  React.Ref<HTMLDivElement>  ref applied list root. List uses element track scroll position sizing. surfaceElement  JSX.Element | null  content rendered list surface element. rendered using onRenderSurface. divProps  React.HTMLAttributes<HTMLDivElement>  Props apply list surface element. pageElements  JSX.Element[]  content rendered representing active pages. pages  IPage<T>[]  active pages rendered list. rendered using onRenderPage. surfaceRef  React.Ref<HTMLDivElement>  ref applied surface element. List uses element track content size focus. className  string  Optional classname append root list. componentRef  IRefObject<IList>  Optional callback access IList interface. Use instead ref accessing public methods properties component. getItemCountForPage  (itemIndex?: number, visibleRect?: IRectangle) => number  Method called list get many items render per page specified index. general, use getPageSpecification instead. getKey  (item: T, index?: number) => string  Optional callback get item key, used render. getPageHeight  (itemIndex?: number, visibleRect?: IRectangle, itemCount?: number) => number  Method called list get pixel height given page. default, measure first page's height default pages height calculating surface space. ideal able adequately predict page heights order keep surface space jumping pixels, seen cause browser performance issues. general, use getPageSpecification instead. getPageSpecification  (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification  Called list get specification page. Use method provide allocation items per page, well estimated rendered height page. list use optimize virtualization. getPageStyle  (page: IPage<T>) =>  Method called list derive page style object. spacer pages, list derive height passed heights ignored. ignoreScrollingState  boolean  Whether disable scroll state updates. causes isScrolling arg onRenderCell always undefined. performance optimization let List skip render cycle updating scrolling state. items  T[]  Items render. onPageAdded  (page: IPage<T>) => void  Optional callback monitoring page added. onPageRemoved  (page: IPage<T>) => void  Optional callback monitoring page removed. onPagesUpdated  (pages: IPage<T>[]) => void  Optional callback invoked List rendering completed. can initial mount re-render due scrolling. method called result changes List pages (added removed), changes complete. track individual page Add / Remove use onPageAdded / onPageRemoved instead. onRenderCell  (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode  Method call trying render item. onRenderPage  IRenderFunction<IPageProps<T>>  Called List render page. Override control cells rendered within page. onRenderRoot  IRenderFunction<IListOnRenderRootProps<T>>  Render override element root List. Use apply final attributes structure content time list updated new active pages items. onRenderSurface  IRenderFunction<IListOnRenderSurfaceProps<T>>  Render override element representing surface List. Use alter structure rendered content necessary update. onShouldVirtualize  (props: IListProps<T>) => boolean  Optional callback determine whether list rendered full, virtualized. Virtualization add remove pages items user scrolls visible range. benefits larger list scenarios reducing DOM screen, can negatively affect performance smaller lists. default implementation virtualize callback provided. renderCount  number  Number items render. Defaults items.length. renderedWindowsAhead  number  addition visible window, many windowHeights render ahead. renderedWindowsBehind  number  addition visible window, many windowHeights render behind. role  string  role assign list root element. Use override default assignment 'list' root 'listitem' cells. startIndex  number  Index items array start rendering . Defaults 0. usePageCache  boolean  Boolean value enable render page caching. experimental performance optimization default. version  {}  object can passed fresh instance 'force update' list. page  IPage<T>  allocation data page. role  string  role assigned rendered page element list.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/List.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"List — List","text":"List items composed selection, icon, name columns minimum. can include columns,  date modified, metadata field associated collection. Avoid using file type icon overlays denote status file can make entire icon unclear. multiple lines text column, consider variable row height variant. Give columns ample default width display information.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/List.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"List — List","text":"Use sentence-style capitalization—capitalize first word. info, see Capitalization Microsoft Writing Style Guide.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/List.html","id":"my-scrollable-content-isn-t-updating-on-scroll-what-should-i-do-","dir":"Reference","previous_headings":"","what":"My scrollable content isn't updating on scroll, what should I do?","title":"List — List","text":"Add  data--scrollable=\"true\" attribute scrollable element containing List. default, List use  <body> element scrollable element. contain List within scrollable <div> using overflow: auto  scroll, List needs listen scroll events element instead. initialization, List traverse DOM looking first element  data--scrollable attribute know element listen knowing re-evaulate visible window.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/List.html","id":"my-list-isn-t-re-rendering-when-i-mutate-its-items-what-should-i-do-","dir":"Reference","previous_headings":"","what":"My list isn't re-rendering when I mutate its items, what should I do?","title":"List — List","text":"determine List re-render contents, component performs referential equality check  items array  shouldComponentUpdate method. done minimize performance overhead associating re-rendering virtualized list pages, recommended  React documentation. result implementation, List determine re-render values within array mutated. avoid problem, recommend re-creating  items array using method  Array.prototype.concat ES6 spread syntax shown :   Since  items array re-created, list conclude contents changed re-render new values.","code":"public appendItems(): void {   const { items } = this.state;    this.setState({     items: [...items, ...[{ name: 'Foo' }, { name: 'Bar' }]]   }) }  public render(): JSX.Element {   const { items } = this.state;    return <List items={items} />; }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/List.html","id":"how-do-i-limit-rendering-to-improve-performance-","dir":"Reference","previous_headings":"","what":"How do I limit rendering to improve performance?","title":"List — List","text":"Performance important, DOM content expensive. Therefore, limit render. list component applies principle using UI virtualization. Unlike simple  loop renders items set, list renders subset items, scroll around, subset rendered content shifted. gives much better experience large sets, especially per-item components complex/render-intensive/network-intensive. list breaks set items passed pages. pages within \"materialized window\" actually rendered. window changes due scroll events, pages fall outside window removed, layout space remembered pushed spacer elements. gives user experience browsing massive amounts content using small number actual elements. gives browser much less layout resolve, gives React DOM diffing much less content worry . Note:  onRenderCell provided  IListProps, list attempt render  name property object  items array.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/List.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List — List","text":"","code":"library(shiny) library(shiny.fluent)  items <- do.call(paste0, replicate(20, sample(LETTERS, 200, TRUE), FALSE))  ui <- function(id) {   ns <- NS(id)   div(     style = \"overflow: auto; max-height: 400px\",     List(       items = items,       onRenderCell = JS(\"(item, index) => `${index} ${item}`\")     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/MarqueeSelection.html","id":null,"dir":"Reference","previous_headings":"","what":"MarqueeSelection — MarqueeSelection","title":"MarqueeSelection — MarqueeSelection","text":"MarqueeSelection component provides service allows user drag rectangle drawn around items select . works conjunction selection object, can used generically store selection state, separate component consumes state. MarqueeSelection also works conjunction AutoScroll utility automatically scroll container drag rectangle within vicinity edges. selection rectangle dragged, look elements data-selection-index attribute populated. get elements' boundingClientRects compare root's rect determine selection state. update selection state appropriately. virtualization cases items selected dematerialized, keep item previous state know definitively /. (words, works List.) details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MarqueeSelection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MarqueeSelection — MarqueeSelection","text":"","code":"MarqueeSelection(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/MarqueeSelection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MarqueeSelection — MarqueeSelection","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MarqueeSelection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MarqueeSelection — MarqueeSelection","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MarqueeSelection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MarqueeSelection — MarqueeSelection","text":"className  string  Additional CSS class(es) apply MarqueeSelection. componentRef  IRefObject<IMarqueeSelection>  Optional callback access IMarqueeSelection interface. Use instead ref accessing public methods properties component. isDraggingConstrainedToRoot  boolean  Optional flag restrict drag rect root element, instead allowing drag rect start outside root element boundaries. isEnabled  boolean  Optional flag control enabled state marquee selection. allows render events ready go, conditionally disable . way transitioning enabled/disabled generate difference DOM. onShouldStartSelection  (ev: MouseEvent) => boolean  Optional callback called, mouse event occurs, order determine start marquee selection. true returned, cancel mousedown event prevent upstream mousedown handlers executing. rootProps  React.HTMLAttributes<HTMLDivElement>  Optional props mix root DIV element. selection  ISelection  selection object interact updating selection changes. styles  IStyleFunction<IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme (provided customization.)","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MarqueeSelection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MarqueeSelection — MarqueeSelection","text":"","code":"library(shiny) library(shiny.fluent)  # This is an advanced demo showing how you can use virtually all features of Fluent UI # by creating custom components in JS and rendering them with shiny.react. # This example is a translation of the example in # https://developer.microsoft.com/en-us/fluentui#/controls/web/marqueeselection.  # Script showing how to: # 1. Use mergeStyles and themes from Fluent # 2. Define custom components # 3. Send results back to Shiny. script <- function(id) tags$script(HTML(paste0(\"   const React = jsmodule['react'];   const Fluent = jsmodule['@fluentui/react'];    const theme = Fluent.getTheme();   const styles = Fluent.mergeStyleSets({     photoList: {       display: 'inline-block',       border: '1px solid ' + theme.palette.neutralTertiary,       margin: 0,       padding: 10,       overflow: 'hidden',       userSelect: 'none',     },      photoCell: {       position: 'relative',       display: 'inline-block',       margin: 2,       boxSizing: 'border-box',       background: theme.palette.neutralLighter,       lineHeight: 100,       verticalAlign: 'middle',       textAlign: 'center',       selectors: {         '&.is-selected': {           background: theme.palette.themeLighter,           border: '1px solid ' + theme.palette.themePrimary,         },       },     },     checkbox: {       margin: '10px 0',     },   });    const useForceUpdate = () => {     const [, setIt] = React.useState(false);     return () => setIt(it => !it);   };    jsmodule.exampleApp = {}   jsmodule.exampleApp.MarqueeSelectionExample = function(params) {     const forceUpdate = useForceUpdate();     const name = params['name'];     const photos = params['photos'];      if (window.selection === undefined) {       window.selection = new Fluent.Selection({         items: photos,         onSelectionChanged: function() {           Shiny.setInputValue('\", id, \"' + name, window.selection.getSelectedIndices());           forceUpdate();         }       });     }      const items = photos.map((photo, index) => {       return React.createElement(         'div',         {           key: index,           'data-is-focusable': true,           className: Fluent.css(             styles.photoCell,             window.selection.isIndexSelected(index) && 'is-selected'           ),           'data-selection-index': index,           style: { width: photo.width, height: photo.height }         },         index       );     });      return React.createElement(       Fluent.MarqueeSelection,       { selection: window.selection, isEnabled: true },       React.createElement('ul', { className: styles.photoList }, items)     );   }; \")))   MarqueeSelectionExample <- function(...) shiny.react::reactElement(   module = \"exampleApp\", name = \"MarqueeSelectionExample\",   props = shiny.react::asProps(...), )  ui <- function(id) {   ns <- NS(id)   tagList(     script(ns(\"\")),     div(       textOutput(ns(\"marqueeResult\")),       Label(\"Drag a rectangle around the items below to select them\"),       reactOutput(ns(\"marqueeSelection\"))     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     photos <- lapply(1:50, function(index) {       randomWidth <- 50 + sample.int(150, 1)       list(         key = index,         url = paste0('http://placehold.it/', randomWidth, 'x100'),         width = randomWidth,         height = 100       )     })      output$marqueeResult <- renderText({       paste(\"You have selected: \", paste(input$selectedIndices, collapse = \", \"))     })      output$marqueeSelection <- renderReact({       MarqueeSelectionExample(         name = \"selectedIndices\",         photos = photos       )     })   } ) } if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/MessageBar.html","id":null,"dir":"Reference","previous_headings":"","what":"MessageBar — MessageBar","title":"MessageBar — MessageBar","text":" banner (MessageBar) displays errors, warnings, important information open app file. example, file failed upload error message bar appear. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MessageBar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MessageBar — MessageBar","text":"","code":"MessageBar(...)  MessageBarButton(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/MessageBar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MessageBar — MessageBar","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MessageBar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MessageBar — MessageBar","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MessageBar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MessageBar — MessageBar","text":"actions  JSX.Element  actions want show side. ariaLabel  string  description message bar benefit screen readers. className  string  Additional CSS class(es) apply MessageBar. componentRef  IRefObject<IMessageBar>  Optional callback access IMessageBar interface. Use instead ref accessing public methods properties component. dismissButtonAriaLabel  string  Aria label dismiss button onDismiss defined. dismissIconProps  IIconProps  Custom icon prop replace dismiss icon. unset, default Fabric Clear icon. isMultiline  boolean  Determines message bar multi lined. false, text overflows buttons another line, clipped. messageBarIconProps  IIconProps  Custom icon prop replace message bar icon. unset, default icon set messageBarType. messageBarType  MessageBarType  type MessageBar render. onDismiss  (ev?: React.MouseEvent<HTMLElement | BaseButton | Button>) =>  Whether message bar dismiss button callback. null, show dismiss button. overflowButtonAriaLabel  string  Aria label overflow button truncated defined. styles  IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme (provided customization.) truncated  boolean  Determines message bar text truncated. true, button render toggle single line view multiline view. prop single line message bars buttons limited space scenario.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/MessageBar.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"MessageBar — MessageBar","text":" message bar  commonly found near top app, underneath app's main command bar. example,  Microsoft Office message bar positioned beneath Ribbon, document canvas. Multiple message bars can appear time,  given scenario related set scenarios aim show one message bar time. Message bars rarely shown direct response action; rather, shown  ’s something person know   overall app document. Use icons options indicate message type: Info icon information messages; ShieldAlert icon security-related messages; Warning icon non-blocking errors; ErrorBadge icon critical errors; Blocked icon blocking messages; Completed icon success messages.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MessageBar.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"MessageBar — MessageBar","text":"Message bars include:","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MessageBar.html","id":"title","dir":"Reference","previous_headings":"","what":"Title","title":"MessageBar — MessageBar","text":"Limit titles  50 characters (including spaces) leave room  text expansion  translated. People able scan  title determine  purpose  message. Capitalize first word title proper nouns.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MessageBar.html","id":"body-text","dir":"Reference","previous_headings":"","what":"Body text","title":"MessageBar — MessageBar","text":"Describe information error state concisely, ideally single sentence. Limit message fewer 512 characters (including spaces) leave room text expansion translated. Include end punctuation complete sentences.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MessageBar.html","id":"action-buttons-optional-","dir":"Reference","previous_headings":"","what":"Action buttons (Optional)","title":"MessageBar — MessageBar","text":"Offer one two action buttons help people solve errors receiving. Limit button text fewer 50 charactesr (including spaces) leave room translation. Action buttons can callback attached provide people options address notification dismiss message bar.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MessageBar.html","id":"link-optional-","dir":"Reference","previous_headings":"","what":"Link (Optional)","title":"MessageBar — MessageBar","text":"Don’t use buttons subtler link suffice. Reserve use button  MessageBar  single ”hero” action  useful  particular moment. Avoid using one button.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MessageBar.html","id":"close-button","dir":"Reference","previous_headings":"","what":"Close button","title":"MessageBar — MessageBar","text":"Always offer quick way people close message bar, unless issue must resolved immediately, expired subscription.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/MessageBar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MessageBar — MessageBar","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   MessageBar(\"Message\") }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Modal.html","id":null,"dir":"Reference","previous_headings":"","what":"Modal — Modal","title":"Modal — Modal","text":"Modals temporary pop-ups  take focus  page app require people interact  . Unlike dialog box (Dialog), modal used  hosting lengthy content, privacy statements  license agreements,   asking people perform complex multiple actions, changing settings. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modal — Modal","text":"","code":"Modal(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modal — Modal","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Modal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modal — Modal","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Modal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modal — Modal","text":"allowTouchBodyScroll  boolean  Allow body scroll content overlay touch devices. Changing mounting effect. className  string  Optional class name added root class componentRef  IRefObject<IModal>  Optional callback access IDialog interface. Use instead ref accessing public methods properties component. containerClassName  string  Optional override container class dragOptions  IDragOptions  options make modal draggable enableAriaHiddenSiblings  boolean  Puts aria-hidden=true non-ancestors current modal, screen readers. experimental feature graduated default behavior testing. flag removed next major release. isBlocking  boolean  Whether dialog can light dismissed clicking outside dialog (overlay). isDarkOverlay  boolean  Whether overlay dark themed. isModeless  boolean  Whether dialog modeless (e.g. dismiss focusing/clicking outside dialog). true: isBlocking ignored, overlay (isDarkOverlay ignored), isClickableOutsideFocusTrap true, forceFocusInsideTrap false isOpen  boolean  Whether dialog displayed. layerProps  ILayerProps  Defines optional set props passed Layer onDismiss  (ev?: React.MouseEvent<HTMLButtonElement>) =>  callback function Modal dismissed light dismiss, animation completes. onDismissed  () =>  callback function called Modal dismissed animation complete. onLayerDidMount  () => void  callback function Modal content mounted overlay layer overlay  IOverlayProps  Defines optional set props passed Overlay scrollableContentClassName  string  Optional override scrollable content class styles  IStyleFunctionOrObject<IModalStyleProps, IModalStyles>  Call provide customized styling layer top variant rules. subtitleAriaId  string  ARIA id subtitle Modal, theme  ITheme  Theme provided High-Order Component. titleAriaId  string  ARIA id title Modal, topOffsetFixed  boolean  Whether modal top offset fixed opened expand bottom content changes dynamically.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Modal.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Modal — Modal","text":"Use variable width minimum width 288 pixels. Use variable height minimum height 172 pixels. Center vertically horizontally available space. Always least one focusable element inside modal. Blocking modals (Modeless Modal) used sparingly, critical people make choice provide information can proceed. Provide clear way people dismiss control,  Close button, always go upper right corner.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Modal.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"Modal — Modal","text":"Use sentence-style capitalization—capitalize first word. info, see Capitalization Microsoft Writing Style Guide.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Modal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modal — Modal","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   tagList(     reactOutput(ns(\"modal\")),     PrimaryButton.shinyInput(ns(\"showModal\"), text = \"Show modal\"),   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns     modalVisible <- reactiveVal(FALSE)     observeEvent(input$showModal, modalVisible(TRUE))     observeEvent(input$hideModal, modalVisible(FALSE))     output$modal <- renderReact({       Modal(isOpen = modalVisible(),         Stack(tokens = list(padding = \"15px\", childrenGap = \"10px\"),           div(style = list(display = \"flex\"),             Text(\"Title\", variant = \"large\"),             div(style = list(flexGrow = 1)),             IconButton.shinyInput(               ns(\"hideModal\"),               iconProps = list(iconName = \"Cancel\")             ),           ),           div(             p(\"A paragraph of text.\"),             p(\"Another paragraph.\")           )         )       )     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Nav.html","id":null,"dir":"Reference","previous_headings":"","what":"Nav — Nav","title":"Nav — Nav","text":"Navs (also called \"left nav\" \"navigation pane\") provide links main areas app site. larger configurations, Nav always -screen, usually left view. smaller configurations, Nav may collapse skinnier version completely hidden user taps icon. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Nav.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nav — Nav","text":"","code":"Nav(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Nav.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nav — Nav","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Nav.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nav — Nav","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Nav.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nav — Nav","text":"link  INavLink  (Optional) Link rendered. ariaLabel  string  (Optional) nav container aria label. className  string  Additional css class apply Nav componentRef  IRefObject<INav>  Optional callback access INav interface. Use instead ref accessing public methods properties component. expandButtonAriaLabel  string  (Optional) nav container aria label. link name prepended label. provided, aria label default link name. groups  INavLinkGroup[] | null  collection link groups display navigation bar initialSelectedKey  string  (Optional) key nav item initially selected. isOnTop  boolean  Indicates whether navigation component renders top content UI linkAs  IComponentAs<INavButtonProps>  Render custom link place normal one. replaces entire button rather simply button content onLinkClick  (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => void  Function callback invoked link navigation clicked onLinkExpandClick  (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => void  Function callback invoked chevron link clicked onRenderGroupHeader  IRenderFunction<IRenderGroupHeaderProps>  Used customize content inside group header rendered onRenderLink  IRenderFunction<INavLink>  Used customize content inside link tag rendered selectedAriaLabel  string  (Deprecated) Use ariaCurrent links instead selectedKey  string  (Optional) key nav item selected caller. styles  IStyleFunctionOrObject<INavStyleProps, INavStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Nav.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nav — Nav","text":"","code":"library(shiny) library(shiny.fluent)  navigation_styles <- list(   root = list(     height = \"100%\",     boxSizing = \"border-box\",     border = \"1px solid #eee\",     overflowY = \"auto\"   ) )  link_groups <- list(   list(     links = list(       list(         name = \"Home\",         expandAriaLabel = \"Expand Home section\",         collapseAriaLabel = \"Collapse Home section\",         links = list(           list(             name = \"Activity\",             url = \"http://msn.com\",             key = \"key1\",             target = \"_blank\"           ),           list(             name = \"MSN\",             url = \"http://msn.com\",             disabled = TRUE,             key = \"key2\",             target = \"_blank\"           )         ),         isExpanded = TRUE       ),       list(         name = \"Documents\",         url = \"http://example.com\",         key = \"key3\",         isExpanded = TRUE       ),       list(         name = \"Pages\",         url = \"http://msn.com\",         key = \"key4\"       ),       list(         name = \"Notebook\",         url = \"http://msn.com\",         key = \"key5\",         disabled = TRUE       ),       list(         name = \"Communication and Media\",         url = \"http://msn.com\",         key = \"key6\"       ),       list(         name = \"News\",         url = \"http://cnn.com\",         icon = \"News\",         key = \"key7\",         target = \"_blank\",         iconProps = list(           iconName = \"News\",           styles = list(             root = list(               fontSize = 20,               color = \"#106ebe\"             )           )         )       )     )   ) )  ui <- function(id) {   ns <- NS(id)   Nav(     groups = link_groups,     selectedKey = \"key1\",     styles = navigation_styles   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/OverflowSet.html","id":null,"dir":"Reference","previous_headings":"","what":"OverflowSet — OverflowSet","title":"OverflowSet — OverflowSet","text":"OverflowSet flexible container component useful displaying primary set content additional content overflow callout. Note example example render component, specific use case.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/OverflowSet.html","id":"accessibility","dir":"Reference","previous_headings":"","what":"Accessibility","title":"OverflowSet — OverflowSet","text":"default, OverflowSet simply role=group. used menu, need add role=\"menubar\" add proper aria roles rendered item (menuitem, menuitemcheckbox, menuitemradio) details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/OverflowSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OverflowSet — OverflowSet","text":"","code":"OverflowSet(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/OverflowSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OverflowSet — OverflowSet","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/OverflowSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"OverflowSet — OverflowSet","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/OverflowSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"OverflowSet — OverflowSet","text":"key  string  Unique id identify item. keytipProps  IKeytipProps  Optional keytip overflowSetItem. className  string  Class name componentRef  IRefObject<IOverflowSet>  Gets component ref. doNotContainWithinFocusZone  boolean  true contain OverflowSet inside FocusZone, otherwise OverflowSet contain FocusZone. set true focusZoneProps ignored. Use one . focusZoneProps  IFocusZoneProps  Custom properties OverflowSet's FocusZone. doNotContainWithinFocusZone set true focusZoneProps ignored. Use one . items  IOverflowSetItemProps[]  array items rendered onRenderItem function primary content area itemSubMenuProvider  (item: IOverflowSetItemProps) => [] | undefined  Function take IOverflowSetItemProps return subMenu item. provided, use 'item.subMenuProps.items' default. used overflow set keytips. keytipSequences  string[]  Optional full keytip sequence overflow button, keytip. onRenderItem  (item: IOverflowSetItemProps) =>  Method call trying render item. onRenderOverflowButton  IRenderFunction<[]>  Rendering method overflow button contextual menu. argument function overflowItems passed props function. overflowItems  IOverflowSetItemProps[]  array items passed overflow contextual menu overflowSide  'start' | 'end'  Controls wether overflow button placed start end items. gives reveresed visual behavior maintains correct keyboard navigation. role  string  role OverflowSet. styles  IStyleFunctionOrObject<IOverflowSetProps, IOverflowSetStyles>  Call provide customized styling layer top variant rules. vertical  boolean  Change item layout direction vertical/stacked. role set menubar, vertical={true} also add proper aria-orientation.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/OverflowSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OverflowSet — OverflowSet","text":"","code":"library(shiny) library(shiny.fluent)  items <- list(   list(key = \"item1\", icon = \"Add\", name = \"Link 1\"),   list(key = \"item2\", icon = \"Upload\", name = \"Link 2\"),   list(key = \"item3\", icon = \"Share\", name = \"Link 3\") ) overflowItems <- list(   list(key = \"item4\", icon = \"Mail\", name = \"Overflow Link 1\"),   list(key = \"item5\", icon = \"Calendar\", name = \"Overflow Link 2\") ) onRenderItem <- JS(\"item =>   jsmodule['react'].createElement(jsmodule['@fluentui/react'].CommandBarButton, {     role: 'menuitem',     iconProps: { iconName: item.icon },     styles: {       root: { padding: '10px' }     }   }) \") onRenderOverflowButton <- JS(\"overflowItems =>   jsmodule['react'].createElement(jsmodule['@fluentui/react'].CommandBarButton, {     role: 'menuitem',     title: 'More items',     styles: {       root: { padding: '10px' }     },     menuIconProps: { iconName: 'More' },     menuProps: { items: overflowItems }   }) \")   ui <- function(id) {   ns <- NS(id)   OverflowSet(     vertical = TRUE,     items = items,     overflowItems = overflowItems,     onRenderItem = onRenderItem,     onRenderOverflowButton = onRenderOverflowButton   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Overlay.html","id":null,"dir":"Reference","previous_headings":"","what":"Overlay — Overlay","title":"Overlay — Overlay","text":"Overlays used render semi-transparent layer top existing UI. Overlays help focus user content sits added layer often used help designate modal blocking experience. Overlays can seen used conjunction Panels Dialogs. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Overlay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overlay — Overlay","text":"","code":"Overlay(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Overlay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overlay — Overlay","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Overlay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Overlay — Overlay","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Overlay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Overlay — Overlay","text":"allowTouchBodyScroll  boolean  Allow body scroll touch devices. Changing mounting effect. className  string  Additional css class apply Overlay componentRef  IRefObject<IOverlay>  Gets component ref. isDarkThemed  boolean  Whether use dark-themed overlay. onClick  () => void styles  IStyleFunctionOrObject<IOverlayStyleProps, IOverlayStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Overlay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overlay — Overlay","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     DefaultButton.shinyInput(ns(\"toggleOverlay\"), text = \"Open Overlay\"),     reactOutput(ns(\"overlay\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns     show <- reactiveVal(FALSE)     observeEvent(input$toggleOverlay, show(!show()))     output$overlay <- renderReact({       if (show()) {         Overlay(           onClick = JS(paste0(             \"function() {\",             \"  Shiny.setInputValue('\", ns(\"toggleOverlay\"), \"', Math.random());\",             \"}\"           )),           isDarkThemed = TRUE,           div(             style = \"background: white; width: 50vw; height: 20rem; margin: auto;\",             div(               style = \"padding: 2rem;\",               h1(\"Inside Overlay\"),               p(\"Click anywhere to hide.\")             )           )         )       }     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Panel.html","id":null,"dir":"Reference","previous_headings":"","what":"Panel — Panel","title":"Panel — Panel","text":"Panels overlays  contain supplementary content used complex creation, edit, management experiences.   example, viewing details item list  editing settings. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Panel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Panel — Panel","text":"","code":"Panel(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Panel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Panel — Panel","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Panel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Panel — Panel","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Panel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Panel — Panel","text":"allowTouchBodyScroll  boolean  Allow body scroll content overlay touch devices. Changing mounting effect. className  string  Additional css class apply Panel closeButtonAriaLabel  string  Aria label close button componentId  string  Deprecated property. Serves function. componentRef  IRefObject<IPanel>  Optional callback access IPanel interface. Use instead ref accessing public methods properties component. customWidth  string  Custom panel width, used type set PanelType.custom. elementToFocusOnDismiss  HTMLElement  Sets HTMLElement focus exiting FocusTrapZone. firstFocusableSelector  string  Indicates selector first focusable item. Deprecated, use focusTrapZoneProps. focusTrapZoneProps  IFocusTrapZoneProps  Optional props pass FocusTrapZone component manage focus panel. forceFocusInsideTrap  boolean  Indicates whether Panel force focus inside focus trap zone. explicitly specified, behavior aligns FocusTrapZone's default behavior. Deprecated, use focusTrapZoneProps. hasCloseButton  boolean  close button visible. headerClassName  string  Optional parameter provider class name header text headerText  string  Header text Panel. headerTextProps  React.HTMLAttributes<HTMLDivElement>  props header text container. ignoreExternalFocusing  boolean  Indicates Panel ignore keeping track HTMLElement activated Zone. Deprecated, use focusTrapZoneProps. isBlocking  boolean  Whether panel uses modal overlay isFooterAtBottom  boolean  Determines content stretch fill available space putting footer bottom page isHiddenOnDismiss  boolean  Whether panel hidden dismiss, instead destroyed DOM. Protects contents destroyed panel dismissed. isLightDismiss  boolean  Whether panel can light dismissed. isOpen  boolean  Whether panel displayed. true, cause panel stay open even dismissed. false, cause panel stay hidden. undefined, allow panel control visility open/dismiss methods. layerProps  ILayerProps  Optional props pass Layer component hosting panel. onDismiss  (ev?: React.SyntheticEvent<HTMLElement>) => void  callback function panel closed, animation completes. panel dismissed based keyboard event, simply call ev.preventDefault() onDismissed  () => void  callback function called Panel dismissed animation complete. (need update Panel's isOpen prop response dismiss event, use onDismiss instead.) onLightDismissClick  () => void  Optional custom function handle clicks outside panel lightdismiss mode onOpen  () => void  callback function Panel opened, animation completes. onOpened  () => void  callback function Panel opened, animation completes. onOuterClick  () => void  Optional custom function handle clicks outside component onRenderBody  IRenderFunction<IPanelProps>  Optional custom renderer body region. Replaces children passed component. onRenderFooter  IRenderFunction<IPanelProps>  Optional custom renderer footer region. Replaces sticky footer. onRenderFooterContent  IRenderFunction<IPanelProps>  Custom renderer content sticky footer onRenderHeader  IPanelHeaderRenderer  Optional custom renderer header region. Replaces current title onRenderNavigation  IRenderFunction<IPanelProps>  Optional custom renderer navigation region. Replaces region contains close button. onRenderNavigationContent  IRenderFunction<IPanelProps>  Optional custom renderer content navigation region. Replaces current close button. overlayProps  IOverlayProps  Optional props pass Overlay component panel uses. styles  IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided High-Order Component. type  PanelType  Type panel.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Panel.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Panel — Panel","text":"Use self-contained experiences  someone doesn’t need interact  app view complete task. Consider panel contained contents scale across responsive web breakpoints.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Panel.html","id":"header","dir":"Reference","previous_headings":"","what":"Header","title":"Panel — Panel","text":"Include  close button top-right corner. Lock title top panel. header can contain variety components. Components stacked main title, locked  top, push content .","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Panel.html","id":"body","dir":"Reference","previous_headings":"","what":"Body","title":"Panel — Panel","text":"body flexible container can house wide variety components, content, formatting. Content can scroll.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Panel.html","id":"footer","dir":"Reference","previous_headings":"","what":"Footer","title":"Panel — Panel","text":"Standard footers include primary secondary buttons confirm cancel changes  task. Read-panels may contain single Close button. Lock footer  bottom panel.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Panel.html","id":"title","dir":"Reference","previous_headings":"","what":"Title","title":"Panel — Panel","text":"Titles explain panel content clear, concise, specific terms. Keep length title one line, possible. Use sentence-style capitalization—capitalize first word. info, see [Capitalization] Microsoft Writing Style Guide. Don’t put period end title. [capitalization]: https://docs.microsoft.com/style-guide/capitalization","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Panel.html","id":"button-labels","dir":"Reference","previous_headings":"","what":"Button labels","title":"Panel — Panel","text":"concise. Limit labels one two words. Usually single verb best. Include noun ’s room interpretation verb means. example, “Save” “Save settings.”","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Panel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Panel — Panel","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     DefaultButton.shinyInput(ns(\"showPanel\"), text = \"Open panel\"),     reactOutput(ns(\"reactPanel\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     ns <- session$ns     isPanelOpen <- reactiveVal(FALSE)     output$reactPanel <- renderReact({       Panel(         headerText = \"Sample panel\",         isOpen = isPanelOpen(),         \"Content goes here.\",         onDismiss = JS(paste0(           \"function() {\",           \"  Shiny.setInputValue('\", ns(\"hidePanel\"), \"', Math.random());\",           \"}\"         ))       )     })     observeEvent(input$showPanel, isPanelOpen(TRUE))     observeEvent(input$hidePanel, isPanelOpen(FALSE))   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/PeoplePicker.html","id":null,"dir":"Reference","previous_headings":"","what":"PeoplePicker — CompactPeoplePicker","title":"PeoplePicker — CompactPeoplePicker","text":"people picker (PeoplePicker) used  select one entities, people groups, list. makes composing email someone,  adding group, easy  don’t know full name email address. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/PeoplePicker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PeoplePicker — CompactPeoplePicker","text":"","code":"CompactPeoplePicker(...)  NormalPeoplePicker(...)  NormalPeoplePicker.shinyInput(inputId, ..., value = defaultValue)  updateNormalPeoplePicker.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/PeoplePicker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PeoplePicker — CompactPeoplePicker","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/PeoplePicker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PeoplePicker — CompactPeoplePicker","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/PeoplePicker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PeoplePicker — CompactPeoplePicker","text":"styles  IStyleFunctionOrObject<IPeoplePickerItemSelectedStyleProps, IPeoplePickerItemSelectedStyles>  Call provide customized styling layer top variant rules. ValidationState  ValidationState className  string  Additional CSS class(es) apply PeoplePickerItem root element. theme  ITheme  Theme provided High-Order Component. compact  boolean  Flag controls whether suggested PeoplePicker item (Persona) rendered without secondary text compact look. personaProps  IPersonaProps  Persona props suggested picking PeoplePicker item. styles  IStyleFunctionOrObject<IPeoplePickerItemSuggestionStyleProps, IPeoplePickerItemSuggestionStyles>  Call provide customized styling layer top variant rules. suggestionsProps  IBasePickerSuggestionsProps  General common props PeoplePicker items suggestions.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/PeoplePicker.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"PeoplePicker — CompactPeoplePicker","text":"Use  people picker add someone   line email, add someone list. Use  MemberList PeoplePicker display selections  input field.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/PeoplePicker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PeoplePicker — CompactPeoplePicker","text":"","code":"library(shiny) library(shiny.fluent)  assetsUrl <- \"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-react-assets/\" malePersonaUrl <- paste0(assetsUrl, \"persona-male.png\") femalePersonaUrl <- paste0(assetsUrl, \"persona-female.png\")  people <- tibble::tibble(   key = c(1, 2, 3, 4, 5, 6, 7),   imageUrl = c(     femalePersonaUrl,     malePersonaUrl,     malePersonaUrl,     malePersonaUrl,     malePersonaUrl,     femalePersonaUrl,     malePersonaUrl   ),   imageInitials = c(\"PV\", \"AR\", \"AL\", \"RK\", \"CB\", \"VL\", \"MS\"),   text = c(     \"Annie Lindqvist\",     \"Aaron Reid\",     \"Alex Lundberg\",     \"Roko Kolar\",     \"Christian Bergqvist\",     \"Valentina Lovric\",     \"Maor Sharett\"   ),   secondaryText = c(     \"Designer\",     \"Designer\",     \"Software Developer\",     \"Financial Analyst\",     \"Sr. Designer\",     \"Design Developer\",     \"UX Designer\"   ),   tertiaryText = c(     \"In a meeting\",     \"In a meeting\",     \"In a meeting\",     \"In a meeting\",     \"In a meeting\",     \"In a meeting\",     \"In a meeting\"   ),   optionalText = c(     \"Available at 4:00pm\",     \"Available at 4:00pm\",     \"Available at 4:00pm\",     \"Available at 4:00pm\",     \"Available at 4:00pm\",     \"Available at 4:00pm\",     \"Available at 4:00pm\"   ),   isValid = c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE),   presence = c(2, 6, 4, 1, 2, 2, 3),   canExpand = c(NA, NA, NA, NA, NA, NA, NA) )  ui <- function(id) {   ns <- NS(id)   tagList(     textOutput(ns(\"selectedPeople\")),     NormalPeoplePicker.shinyInput(       ns(\"selectedPeople\"),       options = people,       pickerSuggestionsProps = list(         suggestionsHeaderText = 'Matching people',         mostRecentlyUsedHeaderText = 'Sales reps',         noResultsFoundText = 'No results found',         showRemoveButtons = TRUE       )     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$selectedPeople <- renderText({       if (length(input$selectedPeople) == 0) {         \"Select recipients below:\"       } else {         selectedPeople <- dplyr::filter(people, key %in% input$selectedPeople)         paste(\"You have selected:\", paste(selectedPeople$text, collapse=\", \"))       }     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Persona.html","id":null,"dir":"Reference","previous_headings":"","what":"Persona — Persona","title":"Persona — Persona","text":"persona visual representation person across products, typically showcasing image person  chosen  upload . control can also  used show person's online status. complete control inclues individual's avatar (uploaded image composition person’s initials background color), name identification, online status. persona control used  PeoplePicker  Facepile controls. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Persona.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Persona — Persona","text":"","code":"Persona(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Persona.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Persona — Persona","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Persona.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Persona — Persona","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Persona.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Persona — Persona","text":"className  string  Additional css class apply PersonaCoin componentRef  IRefObject<{}>  Gets component ref. styles  IStyleFunctionOrObject<IPersonaCoinStyleProps, IPersonaCoinStyles>  Call provide customized styling layer top variant rules componentRef  IRefObject<{}>  Gets component ref. styles  IStyleFunctionOrObject<IPersonaPresenceStyleProps, IPersonaPresenceStyles>  Call provide customized styling layer top variant rules className  string  Additional CSS class(es) apply Persona componentRef  IRefObject<IPersona>  Optional callback access IPersona interface. Use instead ref accessing public methods properties component. onRenderOptionalText  IRenderFunction<IPersonaProps>  Optional custom renderer optional text. onRenderPrimaryText  IRenderFunction<IPersonaProps>  Optional custom renderer primary text. onRenderSecondaryText  IRenderFunction<IPersonaProps>  Optional custom renderer secondary text. onRenderTertiaryText  IRenderFunction<IPersonaProps>  Optional custom renderer tertiary text. styles  IStyleFunctionOrObject<IPersonaStyleProps, IPersonaStyles>  Call provide customized styling layer top variant rules allowPhoneInitials  boolean  Whether initials calculated phone numbers number sequences. Example: Set property true get initials project names consisting numbers . coinProps  IPersonaCoinProps  Optional HTML element props Persona coin. coinSize  number  Optional custom persona coin size pixel. hidePersonaDetails  boolean  Whether render persona details, just render persona image/initials. imageAlt  string  Alt text image use. Defaults empty string. imageInitials  string  user's initials display image area image. imageShouldFadeIn  boolean  true, adds css class '-fadeIn' image. imageShouldStartVisible  boolean  true, image starts visible hidden error. Otherwise, image hidden successfully loaded. disables imageShouldFadeIn. imageUrl  string  Url image use, square aspect ratio big enough fit image area. initialsColor  PersonaInitialsColor | string  background color user's initials displayed. isOutOfOffice  boolean  flag can used signal persona office. change way presence icon looks statuses support dual-presence. onPhotoLoadingStateChange  (newImageLoadState: ImageLoadState) => void  Optional callback loading state photo changes onRenderCoin  IRenderFunction<IPersonaSharedProps>  Optional custom renderer coin onRenderInitials  IRenderFunction<IPersonaSharedProps>  Optional custom renderer initials onRenderPersonaCoin  IRenderFunction<IPersonaSharedProps>  Optional custom renderer coin optionalText  string  Optional text display, usually custom message set. optional text shown using size100. presence  PersonaPresence  Presence person display - display presence undefined. presenceColors  { available: string; away: string; busy: string; dnd: string; offline: string; oof: string; background: string; }  colors used presence-icon background presenceTitle  string  Presence title shown tooltip hover presence icon. primaryText  string  Primary text display, usually name person. secondaryText  string  Secondary text display, usually role user. showInitialsUntilImageLoads  boolean  true renders initials image loading. applies imageUrl provided. showSecondaryText  boolean showUnknownPersonaCoin  boolean  true, show special coin unknown persona. '?' place initials, static font background colors size  PersonaSize  Decides size control. tertiaryText  string  Tertiary text display, usually status user. tertiary text shown using size72 size100. text  string  Primary text display, usually name person. theme  ITheme  Theme provided High-Order Component.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Persona.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Persona — Persona","text":"Use  24-pixel persona text fields read- mode experiences like multicolumn lists need compact persona representations. Use  32-pixel persona text fields edit mode. Use  32-pixel, 40-pixel,  48-pixel persona  menus  list views. Use  72-pixel  100-pixel persona profile cards views.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Persona.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"Persona — Persona","text":"Change values color swatches high contrast mode.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Persona.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Persona — Persona","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   Persona(     imageInitials = \"AL\",     text = \"Annie Lindqvist\",     secondaryText = \"Software Engineer\",     presence = 4   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Pickers.html","id":null,"dir":"Reference","previous_headings":"","what":"Pickers — BasePickerListBelow","title":"Pickers — BasePickerListBelow","text":"details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result. Pickers used  select one  items, tags files, large list. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Pickers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pickers — BasePickerListBelow","text":"","code":"BasePickerListBelow(...)  TagPicker(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Pickers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pickers — BasePickerListBelow","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Pickers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pickers — BasePickerListBelow","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Pickers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pickers — BasePickerListBelow","text":"className  string  ClassName picker. componentRef  IRefObject<IBasePicker<T>>  Optional callback access IBasePicker interface. Use instead ref accessing public methods properties component. createGenericItem  (input: string, ValidationState: ValidationState) => ISuggestionModel<T> | T  Function specifies arbitrary text entered well handled. defaultSelectedItems  T[]  Initial items already selected appear people picker. disabled  boolean  Flag disabling picker. enableSelectedSuggestionAlert  boolean  Adds additional alert currently selected suggestion. prop set true IE11 , enables proper screen reader behavior suggestion (since aria-activedescendant work IE11). set modern browsers (Edge, Chrome). getTextFromItem  (item: T, currentValue?: string) => string  callback get text item. Used autofill text pickers. inputProps  IInputProps  AutoFill input native props itemLimit  number  Restrict amount selectable items. onBlur  React.FocusEventHandler<HTMLInputElement | Autofill>  callback user moves focus away picker onChange  (items?: T[]) => void  callback selected list items changes. onDismiss  (ev?: , selectedItem?: T) => boolean | void  callback override default behavior adding selected suggestion dismiss. returns true nothing, selected item added dismiss. false, selected item added dismiss. onEmptyInputFocus  (selectedItems?: T[]) => T[] | PromiseLike<T[]>  callback happen user clicks within input area. onEmptyResolveSuggestions  (selectedItems?: T[]) => T[] | PromiseLike<T[]>  callback happen suggestions shown without input provided. Returns already selected items resolver can filter . used conjunction resolveDelay kick delay throttle. onFocus  React.FocusEventHandler<HTMLInputElement | Autofill>  callback user put focus picker onGetMoreResults  (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>  callback gets rest results user clicks get results. onInputChange  (input: string) => string  callback used modify input string. onItemSelected  (selectedItem?: T) => T | PromiseLike<T> | null  callback process selection user selects something picker. callback returns null, item added picker. onRemoveSuggestion  (item: T) => void  callback item removed suggestion list onRenderItem  (props: IPickerItemProps<T>) => JSX.Element  Function specifies selected item appear. onRenderSuggestionsItem  (props: T, itemProps: ISuggestionItemProps<T>) => JSX.Element  Function specifies individual suggestion item appear. onResolveSuggestions  (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>  callback happen person types text input. Returns already selected items resolver can filter . used conjunction resolveDelay kick delay throttle. onValidateInput  (input: string) => ValidationState  function used validate raw text entered well can added selected items list pickerCalloutProps  ICalloutProps  properties get passed Callout component. pickerSuggestionsProps  IBasePickerSuggestionsProps  properties get passed Suggestions component. removeButtonAriaLabel  string  Aria label \"X\" button selected item component. resolveDelay  number  delay time ms resolving suggestions, kicked input changed. e.g. second input change happens within resolveDelay time, timer start . timer completes onResolveSuggestions called. searchingText  ((props: { input: string; }) => string) | string  text display searching results limited suggestions list selectedItems  T[]  items base picker currently display selected. provided picker act controlled component. styles  IStyleFunctionOrObject<IBasePickerStyleProps, IBasePickerStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided styled() function. \"aria-label\"  string  Screen reader label apply input element. defaultVisibleValue  string  default value visible autofill first created. different placeholder text placeholder text disappear re-appear. text persists deleted changed. componentRef  IRefObject<IPickerItem>  Optional callback access IPickerItem interface. Use instead ref accessing public methods properties component. index  number  Index number item array picked items. item  T  item Type T (Persona, Tag, custom item provided). key  string | number  Unique key picked item. onItemChange  (item: T, index: number) => void  Internal Use , gives callback renderer call item changed. allows base picker keep track changes items. onRemoveItem  () => void  Callback issued item removed array picked items. removeButtonAriaLabel  string  Aria-label picked item remove button. selected  boolean  Whether picked item selected . className  string  Optional className root element suggestion item. componentRef  IRefObject<ISuggestionsItem>  Optional callback access ISuggestionItem interface. Use instead ref accessing public methods properties component. id  string  Unique id suggested item. isSelectedOverride  boolean  override 'selected' property SuggestionModel. onClick  (ev: React.MouseEvent<HTMLButtonElement>) => void  Callback user clicks suggestion. onRemoveItem  (ev: React.MouseEvent<HTMLButtonElement>) => void  Callback item removed array suggested items. removeButtonAriaLabel  string  ARIA label button remove suggestion list. RenderSuggestion  (item: T, suggestionItemProps: ISuggestionItemProps<T>) => JSX.Element  Optional renderer override default one type picker. showRemoveButton  boolean  Whether remove button rendered . styles  IStyleFunctionOrObject<ISuggestionsItemStyleProps, ISuggestionsItemStyles>  Call provide customized styling layer top variant rules. suggestionModel  ISuggestionModel<T>  Individual suggestion object containing properties. theme  ITheme  Theme provided High-Order Component. className  string  CSS className suggestions root. componentRef  IRefObject<ISuggestions<T>>  Optional callback access ISuggestions interface. Use instead ref accessing public methods properties component. createGenericItem  () => void  callback called user attempts use input text item forceResolveText  string  text appears indicating use force resolve input isLoading  boolean  Used indicate whether suggestions loading. isMostRecentlyUsedVisible  boolean  Indicates short list recent suggestions shown. isResultsFooterVisible  boolean  Indicates text resultsFooter resultsFooterFull shown end suggestion list. isSearching  boolean  Used indicate whether component searching results. loadingText  string  text display results loading. moreSuggestionsAvailable  boolean  Used indicate whether user can request suggestions. Dictates whether searchForMore button displayed. mostRecentlyUsedHeaderText  string  text appear top recently used box. noResultsFoundText  string  text appear results found searching. onGetMoreResults  () => void  callback called user attempts get results onRenderNoResultFound  IRenderFunction<void>  \"result found\" look suggestion list. onRenderSuggestion  (props: T, suggestionItemProps: ISuggestionItemProps<T>) => JSX.Element  suggestion look suggestion list. onSuggestionClick  (ev?: React.MouseEvent<HTMLElement>, item?: , index?: number) => void  occur suggestion clicked onSuggestionRemove  (ev?: React.MouseEvent<HTMLElement>, item?: T | IPersonaProps, index?: number) => void  Function fire one optional remove buttons suggestion clicked.TODO (adjective-object) remove IPersonaprops next major version bump refocusSuggestions  (keyCode: KeyCodes) => void  function resets focus expected item suggestion list removeSuggestionAriaLabel  string  ARIA label use buttons remove individual suggestions. resultsFooter  (props: ISuggestionsProps<T>) => JSX.Element  renderer adds element end suggestions list fewer items resultsMaximumNumber. resultsFooterFull  (props: ISuggestionsProps<T>) => JSX.Element  renderer adds element end suggestions list items resultsMaximumNumber. resultsMaximumNumber  number  Maximum number suggestions show full suggestion list. searchErrorText  string  text appear search error. searchForMoreText  string  text appears indicating user can search results. searchingText  string  text display searching results limited suggestions list. showForceResolve  () => boolean  callback called see force resolve command shown showRemoveButtons  boolean  Indicates whether show button suggestion remove suggestion. styles  IStyleFunctionOrObject<, >  Call provide customized styling layer top variant rules. suggestions  ISuggestionModel<T>[]  list Suggestions displayed suggestionsAvailableAlertText  string  Screen reader message read suggestions available. suggestionsClassName  string  CSS className suggestions list suggestionsContainerAriaLabel  string  ARIA label container parent suggestions. suggestionsHeaderText  string  text appears top suggestions list. suggestionsItemClassName  string  className suggestion item. suggestionsListId  string  string used suggestionsListId. used BasePicker keep track list aria. theme  ITheme  Theme provided High-Order Component.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Pickers.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Pickers — BasePickerListBelow","text":"Use  picker quickly search  tags files. Use  picker  manage group  tags files.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Pickers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pickers — BasePickerListBelow","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   tagList(     tags$script(HTML(\"       testTags = [         'black',         'blue',         'brown',         'cyan',         'green',         'magenta',         'mauve',         'orange',         'pink',         'purple',         'red',         'rose',         'violet',         'white',         'yellow',       ].map(item => ({ key: item, name: item }));        function listContainsTagList(tag, tagList) {         if (!tagList || !tagList.length || tagList.length === 0) {           return false;         }         return tagList.some(compareTag => compareTag.key === tag.key);       };        function filterSuggestedTags(filterText, tagList) {         return filterText           ? testTags.filter(               tag => tag.name.toLowerCase().indexOf(filterText.toLowerCase()) === 0 &&                !listContainsTagList(tag, tagList),             )           : [];       };     \")),     textOutput(ns(\"selectedTags\")),     TagPicker(       onResolveSuggestions = JS(\"filterSuggestedTags\"),       onEmptyInputFocus = JS(         \"function(tagList) { return testTags.filter(tag => !listContainsTagList(tag, tagList)); }\"       ),       getTextFromItem = JS(\"function(item) { return item.text }\"),       pickerSuggestionsProps = list(         suggestionsHeaderText = 'Suggested tags',         noResultsFoundText = 'No color tags found'       ),       itemLimit = 2,       onChange = JS(paste0(         \"function(selection) {\",         \"  Shiny.setInputValue('\", ns(\"selectedTags\") ,\"', JSON.stringify(selection));\",         \"}\"       ))     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$selectedTags <- renderText({       if (is.null(input$selectedTags)) {         \"Select up to 2 colors below:\"       } else {         paste(           \"You have selected:\",           paste(jsonlite::fromJSON(input$selectedTags)$name, collapse = \", \")         )       }     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Pivot.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot — Pivot","title":"Pivot — Pivot","text":"Pivot control related tabs pattern used navigating frequently accessed, distinct content categories. Pivots allow navigation two content views relies text headers articulate different sections content. Tapping pivot item header navigates header's section content. Tabs visual variant Pivot use combination icons text just icons articulate section content. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Pivot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot — Pivot","text":"","code":"Pivot(...)  PivotItem(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Pivot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot — Pivot","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Pivot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot — Pivot","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Pivot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pivot — Pivot","text":"alwaysRender  boolean  Defines whether always render pivot item (regardless whether selected ). Useful rendering content expensive mount. ariaLabel  string  aria label pivot link read screen reader instead linkText.Note unless compelling requirements override aria-label. componentRef  IRefObject<{}>  Gets component ref. headerButtonProps  IButtonProps | { [key: string]: string | number | boolean; }  Props header command button. provides way pass native props, data-* aria-*, pivot header/link element. headerText  string  text displayed pivot link. itemCount  number | string  Defines optional item count displayed parentheses just linkText.Examples: completed (4), Unread (99+) itemIcon  string  optional icon show next pivot link. itemKey  string  required key uniquely identify pivot item.Note: 'key' react props used inside component. keytipProps  IKeytipProps  Optional keytip PivotItem. linkText  string  text displayed pivot link - renaming headerText. onRenderItemLink  IRenderFunction<IPivotItemProps>  Optional custom renderer pivot item link. className  string  Additional css class apply Pivot componentRef  IRefObject<IPivot>  Optional callback access IPivot interface. Use instead ref accessing public methods properties component. defaultSelectedIndex  number  Default selected index pivot. provide pivot uncontrolled component; otherwise, use selectedKey property.property also mutually exclusive defaultSelectedKey. defaultSelectedKey  string  Default selected key pivot. provide pivot uncontrolled component; otherwise, use selectedKey property.property also mutually exclusive defaultSelectedIndex. getTabId  (itemKey: string, index: number) => string  Callback customize IDs generated tab header. Useful rendering content outside need connect aria-labelledby. headersOnly  boolean  Whether skip rendering tabpanel content selected tab. Use prop plan separately render tab content want leave empty tabpanel page may confuse Screen Readers. initialSelectedIndex  number  Index pivot item initially selected. Mutually exclusive initialSelectedKey. provide pivot uncontrolled component; otherwise, use selectedKey. initialSelectedKey  string  Key pivot item initially selected. Mutually exclusive initialSelectedIndex. provide pivot uncontrolled component; otherwise, use selectedKey. linkFormat  PivotLinkFormat  PivotLinkFormat use (links, tabs) linkSize  PivotLinkSize  PivotLinkSize use (normal, large) onLinkClick  (item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => void  Callback selected pivot item changed. selectedKey  string | null  Key selected pivot item. Updating override Pivot's selected item state. provide pivot controlled component maintaining current state; otherwise, use defaultSelectedKey. styles  IStyleFunctionOrObject<IPivotStyleProps, IPivotStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided High-Order Component.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Pivot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot — Pivot","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   Pivot(     PivotItem(headerText = \"Tab 1\", Label(\"Hello 1\")),     PivotItem(headerText = \"Tab 2\", Label(\"Hello 2\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ProgressIndicator.html","id":null,"dir":"Reference","previous_headings":"","what":"ProgressIndicator — ProgressIndicator","title":"ProgressIndicator — ProgressIndicator","text":"ProgressIndicators used show completion status operation lasting 2 seconds. state progress determined, use Spinner instead. ProgressIndicators can appear new panel, flyout, UI initiating operation, even replacing initiating UI, long UI can return operation canceled stopped. ProgressIndicators feature bar showing total units completion, total units finished. description operation appears bar, status text appears . description tell someone exactly operation . Examples formatting include: [Object] [operation name], [Object] [operation name] [destination name] [Object] [operation name] [source name] [destination name] Status text generally units elapsed total units. operation can canceled, “X” icon used placed upper right, aligned baseline operation name. error occurs, replace status text error description using ms-fontColor-redDark. Real-world examples include copying files storage location, saving edits file, . Use units informative relevant give best idea users long operation take complete. Avoid time units rarely accurate enough trustworthy. Also, combine steps complex operation one total bar avoid “rewinding” bar. Instead change operation description reflect change necessary. Bars moving backwards reduce confidence service. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ProgressIndicator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ProgressIndicator — ProgressIndicator","text":"","code":"ProgressIndicator(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ProgressIndicator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ProgressIndicator — ProgressIndicator","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ProgressIndicator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ProgressIndicator — ProgressIndicator","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ProgressIndicator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ProgressIndicator — ProgressIndicator","text":"ariaValueText  string  Text alternative progress status, used screen readers reading value progress. barHeight  number  Height ProgressIndicator className  string  Additional css class apply ProgressIndicator description  React.ReactNode  Text describing supplementing operation. May string React virtual elements. label  React.ReactNode  Label display control. May string React virtual elements. onRenderProgress  IRenderFunction<IProgressIndicatorProps>  render override progress track. percentComplete  number  Percentage operation's completeness, numerically 0 1. set, indeterminate progress animation shown instead. progressHidden  boolean  Whether hide progress state. styles  IStyleFunctionOrObject<IProgressIndicatorStyleProps, IProgressIndicatorStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided High-Order Component. title  string  Deprecated v0.43.0, removed \\>= v0.53.0. Use label instead.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ProgressIndicator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ProgressIndicator — ProgressIndicator","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   ProgressIndicator(     label = \"Example title\",     description = \"Example description\"   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Rating.html","id":null,"dir":"Reference","previous_headings":"","what":"Rating — Rating","title":"Rating — Rating","text":"Ratings show people’s opinions   product, helping others make  informed purchasing decisions. People can also rate products ’ve purchased. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Rating.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rating — Rating","text":"","code":"Rating(...)  Rating.shinyInput(inputId, ..., value = defaultValue)  updateRating.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Rating.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rating — Rating","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Rating.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rating — Rating","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Rating.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rating — Rating","text":"allowZeroStars  boolean  Allow rating value set 0 instead minimum 1. ariaLabelFormat  string  Optional label format rating star read screen readers. Can used like \"{0} {1} stars selected\", {0} substituted current rating {1} substituted max rating. ariaLabelId  string  Deprecated: Optional id label describing instance Rating. componentRef  IRefObject<IRating>  Optional callback access IRating interface. Use instead ref accessing public methods properties component. getAriaLabel  (rating: number, max: number) => string icon  string  Custom icon max  number  Maximum rating, defaults 5, \\>= min min  number  Minimum rating, defaults 1, \\>= 0 onChange  (event: React.FocusEvent<HTMLElement>, rating?: number) => void  Callback issued rating changes. onChanged  (rating: number) => void rating  number  Selected rating, integer min max readOnly  boolean  Optional flag mark rating control readOnly size  RatingSize  Size rating, defaults small styles  IStyleFunctionOrObject<IRatingStyleProps, IRatingStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme (provided customization.) unselectedIcon  string  Custom icon unselected rating elements.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Rating.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Rating — Rating","text":"Make clear item rating pertains making sure layout grouping clear several items page. use rating component data continuous range, brightness photo. Instead, use slider.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Rating.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"Rating — Rating","text":"Use five-star rating system. Use sentence-style capitalization—capitalize first word. info, see Capitalization Microsoft Writing Style Guide.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Rating.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rating — Rating","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     Rating.shinyInput(ns(\"rating\"), value = 2),     textOutput(ns(\"ratingValue\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$ratingValue <- renderText({       sprintf(\"Value: %s\", input$rating)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ResizeGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"ResizeGroup — ResizeGroup","title":"ResizeGroup — ResizeGroup","text":"ResizeGroup React component can used help fit right amount content within container. consumer ResizeGroup provides initial data, reduce function, render function. render function responsible populating contents container given data. initial data represent data rendered ResizeGroup infinite width. contents returned render function fit within ResizeGroup, reduce function called get version data whose rendered width smaller data just rendered. example scenario shown , controls fit screen rendered overflow menu. data situation list 'primary' controls rendered top level set overflow controls rendered overflow menu. initial data case controls primary set. implementation onReduceData moves control overflow well primary control set. component queries DOM dimensions elements. many dimension queries negatively affect performance component cause poor interactive performance websites. One way reduce number measurements performed component provide cacheKey initial data return value onReduceData. Two data objects cacheKey assumed width, resulting measurements skipped data object. controls overflow example, cacheKey simply concatenation keys controls appear top level. boolean context property (isMeasured) added let child components know used measurement purposes. isMeasured true, signify component instance visible user. needed scenarios. intended used skip unwanted side effects mounting child component . includes cases component makes API requests, requests focus one elements, expensive computations, /renders markup unrelated size. careful use property change components rendered output way effects size way. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ResizeGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ResizeGroup — ResizeGroup","text":"","code":"ResizeGroup(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ResizeGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ResizeGroup — ResizeGroup","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ResizeGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ResizeGroup — ResizeGroup","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ResizeGroup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ResizeGroup — ResizeGroup","text":"className  string  Additional css class apply Component componentRef  IRefObject<IResizeGroup>  Optional callback access IResizeGroup interface. Use instead ref accessing public methods properties component. data   Initial data passed onRenderData function. onGrowData provided, data represent passed render function parent container ResizeGroup maximum supported width. cacheKey property may optionally included part data. Two data objects cacheKey assumed take width prevent measurements. type cacheKey string. dataDidRender  (renderedData: ) => void  Function called every time data rendered. provides data actually rendered. use case adding telemetry particular control shown overflow well dropped result onReduceData count number renders implementation onReduceData triggers. direction  ResizeGroupDirection  Direction resize group, vertical horizontal onGrowData  (prevData: ) =>  Function performed data order increase width. called scenarios container room previous render may able fit content. scaling operations perform teh data, return undefined prevent infinite render loop. onReduceData  (prevData: ) =>  Function performed data order reduce width make fit given space. scaling steps apply, return undefined prevent infinite render loop. onRenderData  (data: ) => JSX.Element  Function render data. Called rendering contents screen rendering hidden div measure size contents. styles  IStyleFunctionOrObject<IResizeGroupStyleProps, IResizeGroupStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ResizeGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ResizeGroup — ResizeGroup","text":"","code":"library(shiny) library(shiny.fluent)  data <- list(   items = list(     \"many\", \"strings\", \"with\", \"varying\", \"length\", \"sometimes\", \"very\", \"short\",     \"other\", \"times\", \"extraordinarily\", \"long\"   ) ) onRenderData <- JS(\"data =>   data.items.map(item =>     jsmodule['react'].createElement('div',       {         style: {           display: 'inline-block',           backgroundColor: 'orange',           padding: '10px',           margin: '10px',           fontSize: '20px',         }       },       item     )   ) \") onReduceData <- JS(\"data => ({ items: data.items.slice(0, -1) })\")  ui <- function(id) {   ns <- NS(id)   div(     p(\"Resize the browser to see how the elements are hidden when they do not fit:\"),     ResizeGroup(       data = data,       onRenderData = onRenderData,       onReduceData = onReduceData     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ScrollablePane.html","id":null,"dir":"Reference","previous_headings":"","what":"ScrollablePane — ScrollablePane","title":"ScrollablePane — ScrollablePane","text":"scrollable pane (ScrollablePane) helper component used Sticky component.  \"stick\" top bottom   scrollable region remain visible. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ScrollablePane.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ScrollablePane — ScrollablePane","text":"","code":"ScrollablePane(...)  Sticky(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/ScrollablePane.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ScrollablePane — ScrollablePane","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ScrollablePane.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ScrollablePane — ScrollablePane","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ScrollablePane.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ScrollablePane — ScrollablePane","text":"className  string  Additional css class apply ScrollablePane componentRef  IRefObject<IScrollablePane>  Optional callback access IScrollablePane interface. Use instead ref accessing public methods properties component. initialScrollPosition  number  Sets initial scroll position ScrollablePane scrollbarVisibility  ScrollbarVisibility styles  IStyleFunctionOrObject<IScrollablePaneStyleProps, IScrollablePaneStyles>  Call provide customized styling layer top variant rules theme  ITheme  Theme provided HOC.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/ScrollablePane.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"ScrollablePane — ScrollablePane","text":"Use sticky component  block-level elements. Sticky components  ideally  section headers /footers. Use position: absolute. Ensure parent element explicit height position: relative, space already allocated  scrollable pane. Ensure total height Sticky components  exceed height  ScrollablePane.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/ScrollablePane.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ScrollablePane — ScrollablePane","text":"","code":"library(shiny) library(shiny.fluent)  pane <- function(header, paragraphs) (   div(     Sticky(       div(         style = \"background-color: #80CAF1; border-top: 1px solid; border-bottom: 1px solid\",         header       )     ),     stringi::stri_rand_lipsum(paragraphs)   ) )  ui <- function(id) {   ns <- NS(id)   ScrollablePane(     styles = list(       root = list(position = \"relative\", height = \"500px\", width = \"400px\")     ),     pane(\"Some text\", 3),     pane(\"A lot of text\", 5),     pane(\"Just a short ending\", 1)   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/SearchBox.html","id":null,"dir":"Reference","previous_headings":"","what":"SearchBox — SearchBox","title":"SearchBox — SearchBox","text":"search box (SearchBox) provides input field searching content within site app  find specific items. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SearchBox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SearchBox — SearchBox","text":"","code":"SearchBox(...)  SearchBox.shinyInput(inputId, ..., value = defaultValue)  updateSearchBox.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/SearchBox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SearchBox — SearchBox","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SearchBox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SearchBox — SearchBox","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SearchBox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SearchBox — SearchBox","text":"ariaLabel  string  aria label SearchBox benefit screen readers. className  string  CSS class apply SearchBox. clearButtonProps  IButtonProps  props clear button. componentRef  IRefObject<ISearchBox>  Optional callback access ISearchBox interface. Use instead ref accessing public methods properties component. defaultValue  string  default value text SearchBox, case uncontrolled component. prop deprecated since far, uncontrolled behavior implemented. disableAnimation  boolean  Whether animate SearchBox icon focus. iconProps  Pick<IIconProps, Exclude<keyof IIconProps, 'className'>>  props icon. labelText  string  Deprecated. Use placeholder instead. onChange  (event?: React.ChangeEvent<HTMLInputElement>, newValue?: string) => void  Callback function typed input SearchBox changed. onChanged  (newValue: ) => void  Deprecated v0.52.2, use onChange instead. onClear  (ev?: ) => void  Callback executed user clears search box either clicking 'X' hitting escape. onEscape  (ev?: ) => void  Callback executed user presses escape search box. onSearch  (newValue: ) => void  Callback executed user presses enter search box. placeholder  string  Placeholder search box. styles  IStyleFunctionOrObject<ISearchBoxStyleProps, ISearchBoxStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme (provided customization). underlined  boolean  Whether SearchBox underlined. value  string  value text SearchBox.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/SearchBox.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"SearchBox — SearchBox","text":"build custom search control based default text box control. Use search box without parent container restricted certain width accommodate content. search box span entire width space .","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SearchBox.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"SearchBox — SearchBox","text":"Use placeholder text search box describe people can search . example, \"Search\", \"Search files\", \"Search contacts list\". Although search entry points tend similarly visualized, can provide access results range broad narrow. effectively communicating scope search, can ensure people's expectations met capabilities search performing, reduce possibility frustration. search entry point placed near content searched.common search scopes include: Global: Search across multiple sources cloud local content. Varied results include URLs, documents, media, actions, apps, . Web: Search web index. Results include pages, entities, answers. stuff: Search across devices, cloud, social graphs, . Results varied constrained connection user accounts.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SearchBox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SearchBox — SearchBox","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     SearchBox.shinyInput(ns(\"search\"), placeholder = \"Search\"),     textOutput(ns(\"searchValue\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$searchValue <- renderText({       sprintf(\"Value: %s\", input$search)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Separator.html","id":null,"dir":"Reference","previous_headings":"","what":"Separator — Separator","title":"Separator — Separator","text":"separator visually separates content groups. can render content separator specifying component's children. component's children can plain text component like Icon. content center-aligned default. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Separator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Separator — Separator","text":"","code":"Separator(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Separator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Separator — Separator","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Separator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Separator — Separator","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Separator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Separator — Separator","text":"alignContent  'start' | 'center' | 'end'  content aligned separator. styles  IStyleFunctionOrObject<ISeparatorStyleProps, ISeparatorStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme (provided customization.) vertical  boolean  Whether element vertical separator.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Separator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Separator — Separator","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   Separator(\"Text\") }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Shimmer.html","id":null,"dir":"Reference","previous_headings":"","what":"Shimmer — Shimmer","title":"Shimmer — Shimmer","text":"Shimmer temporary animation placeholder service call takes time return data want block rendering rest UI. smooth transition Shimmer content desired, wrap content node Shimmer element use isDataLoaded prop trigger transition. cases content node wrapped Shimmer, use shimmerElements customElementsGroup props, data arrives, manually replace Shimmer UI intended content. See examples reference. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Shimmer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shimmer — Shimmer","text":"","code":"Shimmer(...)  ShimmerElementsGroup(...)  ShimmeredDetailsList(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Shimmer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shimmer — Shimmer","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Shimmer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shimmer — Shimmer","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Shimmer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shimmer — Shimmer","text":"borderStyle  IRawStyle  Use set custom styling shimmerCircle borders. componentRef  IRefObject<IShimmerCircle>  Optional callback access IShimmerCircle interface. Use instead ref accessing public methods properties component. height  number  Sets height circle. styles  IStyleFunctionOrObject<IShimmerCircleStyleProps, IShimmerCircleStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided High-Order Component. backgroundColor  string  Defines background color space around shimmer elements. componentRef  IRefObject<IShimmerElementsGroup>  Optional callback access IShimmerElementsGroup interface. Use instead ref accessing public methods properties component. flexWrap  boolean  Optional boolean enabling flexWrap container containing shimmerElements. rowHeight  number  Optional maximum row height shimmerElements container. shimmerElements  IShimmerElement[]  Elements render one group Shimmer. styles  IStyleFunctionOrObject<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided High-Order Component. width  string  Optional width ShimmerElements container. borderStyle  IRawStyle  Use set custom styling shimmerGap borders. componentRef  IRefObject<IShimmerGap>  Optional callback access IShimmerGap interface. Use instead ref accessing public methods properties component. height  number  Sets height gap. styles  IStyleFunctionOrObject<IShimmerGapStyleProps, IShimmerGapStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided High-Order Component. width  number | string  Sets width value gap. borderStyle  IRawStyle  Use set custom styling shimmerLine borders. componentRef  IRefObject<IShimmerLine>  Optional callback access IShimmerLine interface. Use instead ref accessing public methods properties component. height  number  Sets height rectangle. styles  IStyleFunctionOrObject<IShimmerLineStyleProps, IShimmerLineStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided High-Order Component. width  number | string  Sets width value line. ariaLabel  string  Localized string status label screen reader className  string  Additional CSS class(es) apply Shimmer container. componentRef  IRefObject<IShimmer>  Optional callback access IShimmer interface. Use instead ref accessing public methods properties component. customElementsGroup  React.ReactNode  Custom elements necessary build complex placeholder skeletons. isDataLoaded  boolean  Controls shimmer swapped actual data animated transition. shimmerColors  IShimmerColors  Defines object possible colors pass Shimmer customization used different backgrounds. shimmerElements  IShimmerElement[]  Elements render one line Shimmer. styles  IStyleFunctionOrObject<IShimmerStyleProps, IShimmerStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided High-Order Component. width  number | string  Sets width value shimmer wave wrapper.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Shimmer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shimmer — Shimmer","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   tagList(     div(       p(\"Basic Shimmer with no elements provided. It defaults to a line of 16px height.\"),       Shimmer(),       Shimmer(width = \"75%\"),       Shimmer(width = \"50%\")     ),     tags$head(tags$style(       \".ms-Shimmer-container { margin: 10px 0 }\"     ))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Slider.html","id":null,"dir":"Reference","previous_headings":"","what":"Slider — Slider","title":"Slider — Slider","text":" slider provides visual indication adjustable content, well current setting total range content. Use slider want people set defined values (volume brightness), people benefit instant feedback effect setting changes. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Slider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slider — Slider","text":"","code":"Slider(...)  Slider.shinyInput(inputId, ..., value = defaultValue)  updateSlider.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Slider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slider — Slider","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Slider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slider — Slider","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Slider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Slider — Slider","text":"ariaLabel  string  description Slider benefit screen readers. ariaValueText  (value: number) => string  text description Slider number value benefit screen readers. used Slider number value accurately represented number. buttonProps  React.HTMLAttributes<HTMLButtonElement>  Optional mixin additional props thumb button within slider. className  string  Optional className attach slider root element. componentRef  IRefObject<ISlider>  Optional callback access ISlider interface. Use instead ref accessing public methods properties component. defaultValue  number  initial value Slider. Use intend Slider uncontrolled component. value mutually exclusive value. Use one . disabled  boolean  Optional flag render Slider disabled. label  string  Description label Slider max  number  max value Slider min  number  min value Slider onChange  (value: number) => void  Callback value changed onChanged  (event: MouseEvent | TouchEvent | KeyboardEvent, value: number) => void  Callback mouse touch end originFromZero  boolean  Optional flag attach origin slider zero. Helpful range include negatives. showValue  boolean  Whether show value right Slider. snapToStep  boolean  Optional flag decide thumb snap closest value moving slider step  number  difference two adjacent values Slider styles  IStyleFunctionOrObject<ISliderStyleProps, ISliderStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided High-Order Component. value  number  initial value Slider. Use intend pass new value result onChange events. value mutually exclusive defaultValue. Use one . valueFormat  (value: number) => string  Optional function format slider value. vertical  boolean  Optional flag render slider vertically. Defaults rendering horizontal.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Slider.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Slider — Slider","text":"use slider binary settings. use continuous slider range values large. use range fewer three values. Sliders typically horizontal can vertical, needed.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Slider.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"Slider — Slider","text":"Include label indicating value slider changes. Use step points want slider allow arbitrary values minimum maximum.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Slider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slider — Slider","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     Slider.shinyInput(ns(\"slider\"), value = 42, min = -100, max = 100),     textOutput(ns(\"sliderValue\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$sliderValue <- renderText({       sprintf(\"Value: %s\", input$slider)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/SpinButton.html","id":null,"dir":"Reference","previous_headings":"","what":"SpinButton — SpinButton","title":"SpinButton — SpinButton","text":" spin button (SpinButton) allows someone  incrementally adjust  value small steps. ’s mainly used numeric values, values supported . details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SpinButton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SpinButton — SpinButton","text":"","code":"SpinButton(...)  SpinButton.shinyInput(inputId, ..., value = defaultValue)  updateSpinButton.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/SpinButton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SpinButton — SpinButton","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SpinButton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SpinButton — SpinButton","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SpinButton.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SpinButton — SpinButton","text":"ariaDescribedBy  string  ID label describes control, using default label. ariaLabel  string  description control benefit screen reader users. ariaPositionInSet  number  position parent set (set). ariaSetSize  number  total size parent set (set). ariaValueNow  number  Sets control's aria-valuenow. numeric form value. Providing makes sense using controlled component. ariaValueText  string className  string  Custom className control. componentRef  IRefObject<ISpinButton>  Gets component ref. decrementButtonAriaLabel  string  Accessible label text decrement button (screen reader users). decrementButtonIcon  IIconProps  Custom props decrement button. defaultValue  string  Initial value control. Updates prop respected.Use intend SpinButton uncontrolled component maintains value. Mutually exclusive value. disabled  boolean  Whether control disabled. downArrowButtonStyles  Partial<IButtonStyles>  Custom styles arrow button.Note: buttons checked state arrow keys used incremenent/decrement SpinButton. Use rootChecked instead rootPressed styling case. getClassNames  (theme: ITheme, disabled: boolean, isFocused: boolean, keyboardSpinDirection: KeyboardSpinDirection, labelPosition?: Position, className?: string) => ISpinButtonClassNames  Custom function providing classNames control. Can used provide styles component instead applying top default styles. iconButtonProps  IButtonProps  Additional props arrow buttons. iconProps  IIconProps  Props icon display alongside control's label. incrementButtonAriaLabel  string  Accessible label text increment button (screen reader users). incrementButtonIcon  IIconProps  Custom props increment button. inputProps  React.InputHTMLAttributes<HTMLElement | HTMLInputElement>  Additional props input field. keytipProps  IKeytipProps  Keytip control. label  string  Descriptive label control. labelPosition  Position  position control's label. max  number  Max value control. min  number  Min value control. onBlur  React.FocusEventHandler<HTMLInputElement>  Callback control loses focus. onDecrement  (value: string, event?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => string | void  Callback decrement button arrow key pressed. onFocus  React.FocusEventHandler<HTMLInputElement>  Callback user focuses control. onIncrement  (value: string, event?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => string | void  Callback increment button arrow key pressed. onValidate  (value: string, event?: React.SyntheticEvent<HTMLElement>) => string | void  Callback entered value validated. precision  number  many decimal places value rounded .default calculated based precision step: .e. step = 1, precision = 0. step = 0.0089, precision = 4. step = 300, precision = 2. step = 23.00, precision = 2. step  number  Difference two adjacent values control. value used calculate precision input precision given. precision calculated way always \\>= 0. styles  Partial<ISpinButtonStyles>  Custom styling individual elements within control. theme  ITheme  Theme provided HOC. title  string  descriptive title control, visible tooltip. upArrowButtonStyles  Partial<IButtonStyles>  Custom styles arrow button.Note: buttons checked state arrow keys used incremenent/decrement SpinButton. Use rootChecked instead rootPressed styling case. value  string  Current value control.Use intend pass new value result change events. Mutually exclusive defaultValue.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/SpinButton.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"SpinButton — SpinButton","text":"Use spin button need incrementally change value. Use spin button values tied unit measure. use spin button binary settings. use spin button range three values less. Place labels left spin button control. example, \"Length ruler (cm)\". Spin button width adjust fit number values.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SpinButton.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"SpinButton — SpinButton","text":"Include label indicating value spin button changes.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SpinButton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SpinButton — SpinButton","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     SpinButton.shinyInput(ns(\"spin\"), value = 15, min = 0, max = 50, step = 5),     textOutput(ns(\"spinValue\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$spinValue <- renderText({       sprintf(\"Value: %s\", input$spin)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Spinner.html","id":null,"dir":"Reference","previous_headings":"","what":"Spinner — Spinner","title":"Spinner — Spinner","text":"Spinner outline circle animates around indicating user things processing. Spinner shown unsure long task take making indeterminate version ProgressIndicator. can various sizes, located inline content centered. generally appear action processed committed. subtle generally take much space, transitions completed task. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Spinner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spinner — Spinner","text":"","code":"Spinner(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Spinner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spinner — Spinner","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Spinner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spinner — Spinner","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Spinner.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spinner — Spinner","text":"ariaLabel  string  Alternative status label screen reader ariaLive  'assertive' | 'polite' | ''  Politeness setting label update announcement. className  string  Additional CSS class(es) apply Spinner. componentRef  IRefObject<ISpinner>  Optional callback access ISpinner interface. Use instead ref accessing public methods properties component. label  string  label show next Spinner. Label updates announced screen readers. Use ariaLive control politeness level. labelPosition  SpinnerLabelPosition  position label regards spinner animation. size  SpinnerSize  size Spinner render. { extraSmall, small, medium, large } styles  IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme (provided customization.) type  SpinnerType  Deprecated removed \\>= 2.0.0. Use SpinnerSize instead.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Spinner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spinner — Spinner","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   Spinner(size = 3, label = \"Loading, please wait...\") }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack — Stack","title":"Stack — Stack","text":"Stack container-type component abstracts implementation flexbox order define layout children components.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Stack.html","id":"stack-properties","dir":"Reference","previous_headings":"","what":"Stack Properties","title":"Stack — Stack","text":"Although Stack component number different properties, three particular define overall layout component : Direction: Refers whether stacking children components horizontal vertical. default Stack component vertical, can turned horizontal adding horizontal property using component. Alignment: Refers children components aligned inside container. controlled via verticalAlign horizontalAlign properties. One thing notice flexbox containers align always across cross axis, Stack aims remove mental strain involved process making verticalAlign horizontalAlign properties always follow vertical horizontal axes, respectively, regardless direction Stack. Spacing: Refers space exists children components inside Stack. controlled via gap verticalGap properties.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Stack.html","id":"stack-items","dir":"Reference","previous_headings":"","what":"Stack Items","title":"Stack — Stack","text":"Stack component provides abstraction flexbox container flexbox related properties applied specific children flexbox instead applied container. Stack Items comes play. Stack Item abstracts properties can specifically applied flexbox's children, like grow shrink. use Stack Item application, Stack component imported Stack.Item used inside Stack. done existence Stack Item inherently linked Stack component.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Stack.html","id":"stack-wrapping","dir":"Reference","previous_headings":"","what":"Stack Wrapping","title":"Stack — Stack","text":"Aside previously mentioned properties, another property called wrap determines items overflow Stack container wrap around . wrap property works direction Stack, means children components can still overflow perpendicular direction (.e. Vertical Stack, items might overflow horizontally vice versa).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Stack.html","id":"stack-nesting","dir":"Reference","previous_headings":"","what":"Stack Nesting","title":"Stack — Stack","text":"Stacks can nested inside one another order able configure layout application desired. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack — Stack","text":"","code":"Stack(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack — Stack","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack — Stack","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Stack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stack — Stack","text":"align  'auto' | 'stretch' | 'baseline' | 'start' | 'center' | 'end'  Defines align StackItem along x-axis (vertical Stacks) y-axis (horizontal Stacks). className  string  Defines CSS class name used style StackItem. disableShrink  boolean  Defines whether StackItem prevented shrinking. can used prevent StackItem shrinking inside Stack shrinking items. grow  boolean | number | 'inherit' | 'initial' | 'unset'  Defines much grow StackItem proportion siblings. order  number | string  Defines order StackItem. shrink  boolean | number | 'inherit' | 'initial' | 'unset'  Defines ratio StackItem shrink fit available space. verticalFill  boolean  Defines whether StackItem take 100% height parent.  React.ElementType<React.HTMLAttributes<HTMLElement>>  Defines render Stack. disableShrink  boolean  Defines whether Stack children shrink fit available space. gap  number | string  Defines spacing Stack children. property specified value 'row gap', followed optionally value 'column gap'. 'column gap' omitted, set value 'row gap'. grow  boolean | number | 'inherit' | 'initial' | 'unset'  Defines much grow Stack proportion siblings. horizontal  boolean  Defines whether render Stack children horizontally. horizontalAlign  Alignment  Defines align Stack children horizontally (along x-axis). maxHeight  number | string  Defines maximum height Stack can take. maxWidth  number | string  Defines maximum width Stack can take. padding  number | string  Defines inner padding Stack. reversed  boolean  Defines whether render Stack children opposite direction (bottom--top vertical Stack right--left horizontal Stack). verticalAlign  Alignment  Defines align Stack children vertically (along y-axis). verticalFill  boolean  Defines whether Stack take 100% height parent. property required set true using grow flag children vertical oriented Stacks. Stacks rendered block elements grow horizontally container already. wrap  boolean  Defines whether Stack children wrap onto multiple rows columns overflow size Stack.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Stack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack — Stack","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   Stack(     tokens = list(childrenGap = 10),     reversed = TRUE,     span(\"Item One\"),     span(\"Item Two\"),     span(\"Item Three\")   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/SwatchColorPicker.html","id":null,"dir":"Reference","previous_headings":"","what":"SwatchColorPicker — SwatchColorPicker","title":"SwatchColorPicker — SwatchColorPicker","text":" swatch color picker (SwatchColorPicker) displays color options  grid. can  shown ,   header dividers, button  expands show  swatch color picker. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SwatchColorPicker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SwatchColorPicker — SwatchColorPicker","text":"","code":"SwatchColorPicker(...)  SwatchColorPicker.shinyInput(inputId, ..., value = defaultValue)  updateSwatchColorPicker.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/SwatchColorPicker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SwatchColorPicker — SwatchColorPicker","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SwatchColorPicker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SwatchColorPicker — SwatchColorPicker","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SwatchColorPicker.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SwatchColorPicker — SwatchColorPicker","text":"color  string  CSS-compatible string describe color id  string  Arbitrary unique string associated option index  number  Index option label  string  Tooltip aria label item borderWidth  number  Width border indicates selected/hovered cell, pixels. circle  boolean  True cell rendered circle, false square.  @default true (render circle) color  string  CSS-compatible string describe color disabled  boolean  Whether cell disabled  @default false height  number  Height cell, pixels id  string  Used PREFIX cell's ID (cell literal string ID). idPrefix  string  Prefix cell's ID. required future version id removed. index  number  Index option item  IColorCellProps  Item render label  string  Tooltip aria label item onClick  (item: IColorCellProps) => void  Handler color cell clicked. onFocus  (item: IColorCellProps) => void onHover  (item?: IColorCellProps) => void onKeyDown  (ev: React.KeyboardEvent<HTMLButtonElement>) => void onMouseEnter  (ev: React.MouseEvent<HTMLButtonElement>) => boolean  Mouse enter handler. Returns true event processed, false otherwise. onMouseLeave  (ev: React.MouseEvent<HTMLButtonElement>) => void onMouseMove  (ev: React.MouseEvent<HTMLButtonElement>) => boolean  Mouse move handler. Returns true event processed, false otherwise. onWheel  (ev: React.MouseEvent<HTMLButtonElement>) => void selected  boolean  Whether cell currently selected styles  IStyleFunctionOrObject<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>  Custom styles component. theme  ITheme  theme object use styling. width  number  Width cell, pixels ariaPosInSet  number  Position grid parent set (index parent menu, example) ariaSetSize  number  Size parent set (size parent menu, example) cellBorderWidth  number  Width border indicating hovered/selected cell, pixels cellHeight  number  Height individual cell, pixels cellMargin  number  distance cells, pixels cellShape  'circle' | 'square'  shape color cells.  @default 'circle' cellWidth  number  Width individual cell, pixels className  string  Additional class name provide root element colorCells  IColorCellProps[]  color cells made available user.Note: reference prop changes, regardless many color cells change, color cells re-rendered (potentially bad perf) memoize based prop's reference. columnCount  number  Number columns swatch color picker disabled  boolean  Whether control disabled. doNotContainWithinFocusZone  boolean  false (default), grid contained inside FocusZone. true, FocusZone used.  @default false focusOnHover  boolean  Whether update focus cell hovered. getColorGridCellStyles  IStyleFunctionOrObject<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>  Styles grid cells. id  string  ID swatch color picker's root element. Also used prefix IDs color cells. isControlled  boolean  Indicates whether SwatchColorPicker fully controlled. true, component set internal state track selected color. Instead, parent component responsible handling state callbacks like onColorChanged.NOTE: property temporary workaround force component fully controllable without breaking existing behavior mouseLeaveParentSelector  string | undefined  Selector focus mouse leave. used conjunction focusOnHover. onCellFocused  (id?: string, color?: string) => void  Callback user focuses color cell. id color unspecified, cells longer focused. onCellHovered  (id?: string, color?: string) => void  Callback user hovers color cell. id color unspecified, cells longer hovered. onColorChanged  (id?: string, color?: string) => void  Callback user changes color. id color unspecified, selected cell. (e.g. user executed currently selected cell unselect ) positionInSet  number selectedId  string  ID color cell currently selected setSize  number shouldFocusCircularNavigate  boolean  Whether focus cycle back beginning user navigates past end (vice versa). relevant doNotContainWithinFocusZone true. styles  IStyleFunctionOrObject<ISwatchColorPickerStyleProps, ISwatchColorPickerStyles>  Styles component. theme  ITheme  Theme apply component.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/SwatchColorPicker.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"SwatchColorPicker — SwatchColorPicker","text":"Use  swatch color picker multiple color options can grouped collapsed one title. Don’t use  swatch color picker ’s large number color options. best component  color picker.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/SwatchColorPicker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SwatchColorPicker — SwatchColorPicker","text":"","code":"library(shiny) library(shiny.fluent)  colorCells <- list(   list(id = \"orange\", color = \"#ca5010\"),   list(id = \"cyan\", color = \"#038387\"),   list(id = \"blueMagenta\", color = \"#8764b8\"),   list(id = \"magenta\", color = \"#881798\"),   list(id = \"white\", color = \"#ffffff\") )  ui <- function(id) {   ns <- NS(id)   div(     SwatchColorPicker.shinyInput(ns(\"color\"), value = \"orange\",       colorCells = colorCells, columnCount = length(colorCells)     ),     textOutput(ns(\"swatchValue\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$swatchValue <- renderText({       sprintf(\"Value: %s\", input$color)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/TeachingBubble.html","id":null,"dir":"Reference","previous_headings":"","what":"TeachingBubble — TeachingBubble","title":"TeachingBubble — TeachingBubble","text":" teaching bubble (TeachingBubble) brings attention new important feature,  goal increasing engagement   feature.  teaching bubble typically follows  coach mark. Use teaching bubbles sparingly. Consider frequently people see , many ’ll see across entire experience. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TeachingBubble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TeachingBubble — TeachingBubble","text":"","code":"TeachingBubble(...)  TeachingBubbleContent(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/TeachingBubble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TeachingBubble — TeachingBubble","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TeachingBubble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TeachingBubble — TeachingBubble","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TeachingBubble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TeachingBubble — TeachingBubble","text":"ariaDescribedBy  string  Defines element id referencing element containing description TeachingBubble. ariaLabelledBy  string  Defines element id referencing element containing label text TeachingBubble. calloutProps  ICalloutProps  Properties pass Callout, reference detail properties ICalloutProps componentRef  IRefObject<ITeachingBubble>  Optional callback access ITeachingBubble interface. Use instead ref accessing public methods properties component. focusTrapZoneProps  IFocusTrapZoneProps  Properties pass FocusTrapZone, reference detail properties IFocusTrapZoneProps footerContent  string | JSX.Element  Text rendered footer TeachingBubble. May rendered alongside primary secondary buttons. hasCloseButton  boolean  Whether TeachingBubble renders close button top right corner. hasCloseIcon  boolean hasCondensedHeadline  boolean  variation smaller bold headline margins. hasSmallHeadline  boolean  variation smaller bold headline margins body. (hasCondensedHeadline takes precedence also set true.) headline  string  headline Teaching Bubble. illustrationImage  IImageProps  Image TeachingBubble. isWide  boolean  Whether TeachingBubble wide, image left side. onDismiss  (ev?: ) => void  Callback TeachingBubble tries close. primaryButtonProps  IButtonProps  Primary interaction button secondaryButtonProps  IButtonProps  Secondary interaction button styles  IStyleFunctionOrObject<ITeachingBubbleStyleProps, ITeachingBubbleStyles>  Call provide customized styling layer top variant rules. target  Target  Element, MouseEvent, Point, querySelector string TeachingBubble anchor . targetElement  HTMLElement theme  ITheme  Theme provided High-Order Component.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/TeachingBubble.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"TeachingBubble — TeachingBubble","text":"Teaching bubbles can used sequence walk people complex, multistep interactions . show one teaching bubble time. maximum 3 sequenced teaching bubbles used single experience. Sequenced teaching bubbles “x y” text indicate progress sequence. example, first teaching bubble sequence might “1 3”.) Always place primary button left, secondary button just right . Show one primary button inherits theme color rest state. event two buttons equal priority, buttons neutral backgrounds.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TeachingBubble.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"TeachingBubble — TeachingBubble","text":"teaching bubble include:","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TeachingBubble.html","id":"title","dir":"Reference","previous_headings":"","what":"Title","title":"TeachingBubble — TeachingBubble","text":" 25 characters (including spaces)  draw people  get interested. Limit one line  text,  use sentence casing (capitalize first word proper nouns)  punctuation.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TeachingBubble.html","id":"body-copy","dir":"Reference","previous_headings":"","what":"Body copy","title":"TeachingBubble — TeachingBubble","text":"Lead  feature useful rather describe . make possible? Keep within 120 characters (including spaces).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TeachingBubble.html","id":"action-buttons","dir":"Reference","previous_headings":"","what":"Action buttons","title":"TeachingBubble — TeachingBubble","text":"Limit button labels 15 characters (including spaces). Provide people  explicit action dismiss  teaching bubble, “Got ”. Include  secondary button give people option  take action, “Show ” “Edit settings”.  two buttons needed, make call--action button primary button dismissal button (“thanks”) secondary button. Use sentence casing (capitalize first word proper nouns) punctuation. sequenced teaching bubble, use \"Next\" action button label \"Got \" final sequenced teaching bubble action button text closes experience.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TeachingBubble.html","id":"link-optional-","dir":"Reference","previous_headings":"","what":"Link (Optional)","title":"TeachingBubble — TeachingBubble","text":"  additional steps people need know , helpful information may want read, consider linking help article. Typically, links labeled “Learn ” punctuation end.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TeachingBubble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TeachingBubble — TeachingBubble","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     DefaultButton.shinyInput(       ns(\"toggleTeachingBubble\"),       id = \"target\",       text = \"Toggle TeachingBubble\"     ),     reactOutput(ns(\"teachingBubble\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     showBubble <- reactiveVal(FALSE)     observeEvent(input$toggleTeachingBubble, showBubble(!showBubble()))     output$teachingBubble <- renderReact({       if (showBubble()) {         TeachingBubble(           target = \"#target\",           headline = \"Very useful!\"         )       }     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Text.html","id":null,"dir":"Reference","previous_headings":"","what":"Text — Text","title":"Text — Text","text":"Text component displaying text. can use Text standardize text across web app. can specify variant prop apply font styles Text. variant pulls Fluent UI React theme loaded page. specify variant prop, default, Text applies styling specifying variant value medium. Text control inline wrap default. can specify block enable block nowrap enable nowrap. ellipsis overflow work properly, block nowrap manually set true. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Text — Text","text":"","code":"Text(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Text — Text","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Text — Text","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Text — Text","text":" React.ElementType<React.HTMLAttributes<HTMLElement>>  Optionally render component another component type primitive. block  boolean  Whether text displayed block element.Note order ellipsis overflow work properly, block nowrap set true. nowrap  boolean  Whether text wrapped.Note order ellipsis overflow work properly, block nowrap set true. variant  keyof IFontStyles  Optional font type Text.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Text — Text","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   Text(variant = \"xLarge\", \"Some text with a nice Fluent UI font\") }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/TextField.html","id":null,"dir":"Reference","previous_headings":"","what":"TextField — MaskedTextField","title":"TextField — MaskedTextField","text":"Text fields (TextField) give people way enter edit text. ’re used forms, modal dialogs, tables, surfaces text input required. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TextField.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TextField — MaskedTextField","text":"","code":"MaskedTextField(...)  TextField(...)  TextField.shinyInput(inputId, ..., value = defaultValue)  updateTextField.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/TextField.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TextField — MaskedTextField","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TextField.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TextField — MaskedTextField","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TextField.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"TextField — MaskedTextField","text":"ariaLabel  string  Aria label text field. autoAdjustHeight  boolean  multiline text fields, whether auto adjust text field height. autoComplete  string  Whether input field autocomplete enabled. tells browser display options based earlier typed values. Common values '' '' possible values see following links: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#Values https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill borderless  boolean  Whether text field borderless. className  string  Optional class name added container component. componentRef  IRefObject<ITextField>  Optional callback access ITextField component. Use instead ref accessing public methods properties component. defaultValue  string  Default value text field. provide text field uncontrolled component; otherwise, use value property. deferredValidationTime  number  Text field start validate users stop typing deferredValidationTime milliseconds. Updates prop respected. description  string  Description displayed text field provide additional details text enter. disabled  boolean  Disabled state text field. errorMessage  string | JSX.Element  Static error message displayed text field. Use onGetErrorMessage dynamically change error message displayed () based current value. errorMessage onGetErrorMessage mutually exclusive (errorMessage takes precedence). iconProps  IIconProps  Props optional icon, displayed far right end text field. inputClassName  string  Optional class name added specifically input/textarea element. label  string  Label displayed text field (read screen readers). mask  string  used MaskedTextField: masking string defines mask's behavior. backslash escape character. Special format characters : '9': [0-9] '': [-zA-Z] '': [-zA-Z0-9]   maskChar  string  used MaskedTextField: character show place unfilled characters mask.   maskFormat  { [key: string]: RegExp; }  used MaskedTextField: object defining format characters corresponding regexp values. Default format characters: { '9': /[0-9]/, '': /[-zA-Z]/, '': /[-zA-Z0-9]/ } multiline  boolean  Whether text field multiline text field. onChange  (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void  Callback input value changes. called input change events. (later version, probably called change event.) onGetErrorMessage  (value: string) => string | JSX.Element | PromiseLike<string | JSX.Element> | undefined  Function used determine whether input value valid get error message . Mutually exclusive static string errorMessage (take precedence ).returns string | JSX.Element: - valid, returns empty string. - invalid, returns error message text field show red border show error message text field.returns Promise<string | JSX.Element>: - resolved value displayed error message. - rejected, value thrown away. onNotifyValidationResult  (errorMessage: string | JSX.Element, value: string | undefined) => void  Function called validation completes. onRenderDescription  IRenderFunction<ITextFieldProps>  Custom renderer description. onRenderLabel  IRenderFunction<ITextFieldProps>  Custom renderer label. call defaultRender, ensure give custom-rendered label id set textfield's aria-labelledby prop id. onRenderPrefix  IRenderFunction<ITextFieldProps>  Custom render function prefix. onRenderSuffix  IRenderFunction<ITextFieldProps>  Custom render function suffix. prefix  string  Prefix displayed text field contents. included value. Ensure descriptive label present assist screen readers, value include prefix. readOnly  boolean  true, text field readonly. resizable  boolean  multiline text fields, whether field resizable. styles  IStyleFunctionOrObject<ITextFieldStyleProps, ITextFieldStyles>  Call provide customized styling layer top variant rules. suffix  string  Suffix displayed text field contents. included value. Ensure descriptive label present assist screen readers, value include suffix. theme  ITheme  Theme (provided customization). underlined  boolean  Whether text field underlined. validateOnFocusIn  boolean  Run validation focus moves input, validate change.(Unless prop /validateOnFocusOut set true, validation run every change.) validateOnFocusOut  boolean  Run validation focus moves input, validate change.(Unless prop /validateOnFocusIn set true, validation run every change.) validateOnLoad  boolean  Whether validation run input initially rendered. value  string  Current value text field. provide text field controlled component maintaining current state; otherwise, use defaultValue property.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/TextField.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"TextField — MaskedTextField","text":"Use multiline text field long entries expected. place text field middle sentence, sentence structure might make sense languages. example, \"Remind [textfield] weeks\" instead read, \"Remind many weeks: [textfield]\". Format text field expected entry. example, someone needs enter phone number, use input mask indicate three sets digits entered.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TextField.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"TextField — MaskedTextField","text":"Include short label text field communicate information entered. use placeholder text instead label. Placeholder text poses variety accessibility issues (including possible problems color/contrast, people thinking form input already filled ). part form, make clear fields required vs. optional. input required, add \"(required)\" label. exclusively use \"\\*\" indicate required inputs often read screen readers. example, \"First name (required)\". Use sentence-style capitalization—capitalize first word. info, see Capitalization Microsoft Writing Style Guide.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/TextField.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TextField — MaskedTextField","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     TextField.shinyInput(ns(\"text\")),     textOutput(ns(\"textValue\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$textValue <- renderText({       sprintf(\"Value: %s\", input$text)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme — ThemeProvider","title":"Theme — ThemeProvider","text":"details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result. ThemeProvider utility applies contextual theming child components. See official docs details.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme — ThemeProvider","text":"","code":"ThemeProvider(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme — ThemeProvider","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme — ThemeProvider","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme — ThemeProvider","text":"","code":"# Example 1 library(shiny) library(shiny.fluent)  options <- list(   list(key = \"A\", text = \"Option A\"),   list(key = \"B\", text = \"Option B\") ) theme <- list(   palette = list(     themePrimary = \"#8dd400\",     themeLighterAlt = \"#060800\",     themeLighter = \"#172200\",     themeLight = \"#2a3f00\",     themeTertiary = \"#557f00\",     themeSecondary = \"#7cba00\",     themeDarkAlt = \"#97d816\",     themeDark = \"#a6de35\",     themeDarker = \"#bce766\",     neutralLighterAlt = \"#323130\",     neutralLighter = \"#31302f\",     neutralLight = \"#2f2e2d\",     neutralQuaternaryAlt = \"#2c2b2a\",     neutralQuaternary = \"#2a2928\",     neutralTertiaryAlt = \"#282726\",     neutralTertiary = \"#c8c8c8\",     neutralSecondary = \"#d0d0d0\",     neutralPrimaryAlt = \"#dadada\",     neutralPrimary = \"#ffffff\",     neutralDark = \"#f4f4f4\",     black = \"#f8f8f8\",     white = \"#323130\"   ) )  ui <- function(id) {   ns <- NS(id)   ThemeProvider(     theme = theme,     applyTo = \"body\",     Stack(       tokens = list(childrenGap = \"10px\"),       style = list(width = 250),       PrimaryButton(text = \"PrimaryButton\"),       Checkbox(label = \"Checkbox\"),       ChoiceGroup(label = \"ChoiceGroup\", options = options)     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }  # Example 2 library(shiny) library(shiny.fluent)  options <- list(   list(key = \"A\", text = \"Option A\"),   list(key = \"B\", text = \"Option B\") )  # Use JSON created in Theme Designer # https://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/heads/master/theming-designer/ theme <- '{   \"themePrimary\": \"#324f09\",   \"themeLighterAlt\": \"#dfead1\",   \"themeLighter\": \"#c4d7ab\",   \"themeLight\": \"#abc388\",   \"themeTertiary\": \"#92b069\",   \"themeSecondary\": \"#7c9c4e\",   \"themeDarkAlt\": \"#678937\",   \"themeDark\": \"#547624\",   \"themeDarker\": \"#426214\",   \"neutralLighterAlt\": \"#f8ebce\",   \"neutralLighter\": \"#f4e8cb\",   \"neutralLight\": \"#eadec2\",   \"neutralQuaternaryAlt\": \"#dacfb5\",   \"neutralQuaternary\": \"#d0c5ad\",   \"neutralTertiaryAlt\": \"#c8bea6\",   \"neutralTertiary\": \"#595858\",   \"neutralSecondary\": \"#373636\",   \"neutralPrimaryAlt\": \"#2f2e2e\",   \"neutralPrimary\": \"#000000\",   \"neutralDark\": \"#151515\",   \"black\": \"#0b0b0b\",   \"white\": \"#fff2d4\" }'   ui <- function(id) {   ns <- NS(id)   ThemeProvider(     theme = parseTheme(json = theme),     applyTo = \"body\",     Stack(       tokens = list(childrenGap = \"10px\"),       style = list(width = 250),       PrimaryButton(text = \"PrimaryButton\"),       Checkbox(label = \"Checkbox\"),       ChoiceGroup(label = \"ChoiceGroup\", options = options)     )   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Toggle.html","id":null,"dir":"Reference","previous_headings":"","what":"Toggle — Toggle","title":"Toggle — Toggle","text":"toggle represents physical switch allows someone  choose  two mutually exclusive options.  example, “/”, “Show/Hide”. Choosing option produce immediate result. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Toggle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toggle — Toggle","text":"","code":"Toggle(...)  Toggle.shinyInput(inputId, ..., value = defaultValue)  updateToggle.shinyInput(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Toggle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Toggle — Toggle","text":"... Props pass component. allowed props listed Details section. inputId ID component. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Toggle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Toggle — Toggle","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Toggle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Toggle — Toggle","text":"ariaLabel  string  Text screen-reader announce name toggle.  IComponentAs<React.HTMLAttributes<HTMLElement>>  Render root element another type. checked  boolean  Checked state toggle. maintaining state , use property. Otherwise use defaultChecked. componentRef  IRefObject<IToggle>  Optional callback access IToggle interface. Use instead ref accessing public methods properties component. defaultChecked  boolean  Initial state toggle. want toggle maintain state, use . Otherwise use checked. disabled  boolean  Optional disabled flag. inlineLabel  boolean  Whether label (onText/offText) positioned inline toggle control. Left (right RTL) side /text provided VS right (left RTL) side /text. Caution: providing /text user may get confused differentiating /states toggle. keytipProps  IKeytipProps  Optional keytip toggle label  string | JSX.Element  label toggle. offAriaLabel  string offText  string  Text display toggle . Caution: providing /text user may get confused differentiating /states toggle. onAriaLabel  string onChange  (event: React.MouseEvent<HTMLElement>, checked?: boolean) => void  Callback issued value changes. onChanged  (checked: boolean) => void onText  string  Text display toggle . Caution: providing /text user may get confused differentiating /states toggle. role  'checkbox' | 'switch' | 'menuitemcheckbox'  (Optional) Specify whether use \"switch\" role (ARIA 1.1) checkbox role (ARIA 1.0). unspecified, defaults \"switch\". styles  IStyleFunctionOrObject<IToggleStyleProps, IToggleStyles>  Optional styles component. theme  ITheme  Theme provided HOC.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Toggle.html","id":"layout","dir":"Reference","previous_headings":"","what":"Layout","title":"Toggle — Toggle","text":"people need perform extra steps changes take effect, use check box instead. example, must click \"Submit\", \"Next\", \"OK\" button apply changes, use check box.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Toggle.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"Toggle — Toggle","text":"replace /labels specific labels setting. example, might use Show/Hide setting \"Show images\". Keep descriptive text short concise—two four words; preferably nouns. example, \"Focused inbox\" \"WiFi\".","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Toggle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Toggle — Toggle","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   div(     Toggle.shinyInput(ns(\"toggle\"), value = TRUE),     textOutput(ns(\"toggleValue\"))   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {     output$toggleValue <- renderText({       sprintf(\"Value: %s\", input$toggle)     })   }) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Tooltip.html","id":null,"dir":"Reference","previous_headings":"","what":"Tooltip — TooltipHost","title":"Tooltip — TooltipHost","text":" good tooltip briefly describes unlabeled controls provides bit additional information  labeled controls, useful.  can also help customers navigate UI offering additional—redundant—information control labels, icons, links. tooltip always add valuable information; use sparingly. two components can use display tooltip: Tooltip: styled tooltip can display chosen target. TooltipHost: wrapper automatically shows tooltip wrapped element hovered focused. details examples visit official docs. R package handle every case, advanced use cases need work using original docs achieve desired result.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Tooltip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tooltip — TooltipHost","text":"","code":"TooltipHost(...)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/Tooltip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tooltip — TooltipHost","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Tooltip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tooltip — TooltipHost","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Tooltip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tooltip — TooltipHost","text":"calloutProps  ICalloutProps  Additional properties pass Callout. className  string  Class name apply tooltip , host. apply class host, use hostClassName styles.root. closeDelay  number  Number milliseconds delay closing tooltip, user time hover tooltip interact . Hovering tooltip count hovering host, tooltip stay open user actively interacting . componentRef  IRefObject<ITooltipHost>  Optional callback access ITooltipHost interface. Use instead ref accessing public methods properties component. content  string | JSX.Element | JSX.Element[]  Content display Tooltip. delay  TooltipDelay  Length delay showing tooltip hover. directionalHint  DirectionalHint  tooltip anchored targetElement. directionalHintForRTL  DirectionalHint  element positioned RTL layouts. specified, mirror directionalHint used. hostClassName  string  Class name apply tooltip host. id  string  Optional ID pass tooltip (used host ). Auto-generated provided. onTooltipToggle  onTooltipToggle?(isTooltipVisible: boolean): void;  Notifies tooltip becomes visible hidden, whatever trigger . overflowMode  TooltipOverflowMode  unset (default), tooltip always shown even overflow.set, show tooltip specified element (Self Parent) overflow. set Parent, parent element also used tooltip's target element.Note even Self mode, TooltipHost check whether children overflow. setAriaDescribedBy  boolean  Whether mark TooltipHost root element described tooltip. specified, caller pass id TooltipHost (passed Tooltip) mark appropriate element aria-describedby id. styles  IStyleFunctionOrObject<ITooltipHostStyleProps, ITooltipHostStyles>  Call provide customized styling layer top variant rules. theme  ITheme  Theme provided higher-order component. tooltipProps  ITooltipProps  Additional properties pass Tooltip. calloutProps  ICalloutProps  Properties pass Callout. componentRef  IRefObject<ITooltip>  Optional callback access ITooltip interface. Use instead ref accessing public methods properties component. content  string | JSX.Element | JSX.Element[]  Content passed tooltip delay  TooltipDelay  Length delay. Set TooltipDelay.zero want delay. directionalHint  DirectionalHint  tooltip anchored targetElement. directionalHintForRTL  DirectionalHint  element positioned RTL layouts. specified, mirror directionalHint used instead maxWidth  string | null  Max width tooltip onRenderContent  IRenderFunction<ITooltipProps>  Render function populate tooltip content. styles  IStyleFunctionOrObject<ITooltipStyleProps, ITooltipStyles>  Call provide customized styling layer top variant rules. targetElement  HTMLElement  Element anchor Tooltip . theme  ITheme  Theme provided higher-order component.","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/Tooltip.html","id":"content","dir":"Reference","previous_headings":"","what":"Content","title":"Tooltip — TooltipHost","text":"Don’t use tooltip restate button name ’s already shown UI. control UI element unlabeled, use simple, descriptive noun phrase. example: “Highlighting pen”. capitalize first word (unless subsequent word proper noun), don’t use period. disabled control   use explanation, provide brief description state control enabled.  example: “feature available line charts.” use periods complete sentences. UI label needs explanation: Briefly describe can   UI element. Use imperative verb form. example, \"Find text file\" (\"Finds text file\"). include end punctuation unless least one complete sentence. truncated label   label ’s likely truncate languages: Provide untruncated label tooltip. provide tooltip untruncated info provided elsewhere page flow. Optional: another line, provide clarifying description, needed.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/Tooltip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tooltip — TooltipHost","text":"","code":"library(shiny) library(shiny.fluent)  ui <- function(id) {   ns <- NS(id)   TooltipHost(     content = \"This is the tooltip content\",     delay = 0,     Text(\"Hover over me\")   ) }  server <- function(id) {   moduleServer(id, function(input, output, session) {}) }  if (interactive()) {   shinyApp(ui(\"app\"), function(input, output) server(\"app\")) }"},{"path":"https://appsilon.github.io/shiny.fluent/reference/component.html","id":null,"dir":"Reference","previous_headings":"","what":"Documentation template for remaining components — component","title":"Documentation template for remaining components — component","text":"Documentation template remaining components","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Documentation template for remaining components — component","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Documentation template for remaining components — component","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/fluentPage.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic Fluent UI page — fluentPage","title":"Basic Fluent UI page — fluentPage","text":"Creates Fluent UI page sensible defaults (included Fabric CSS classes, proper class given body tag, suppressed Bootstrap).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/fluentPage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic Fluent UI page — fluentPage","text":"","code":"fluentPage(..., suppressBootstrap = TRUE)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/fluentPage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic Fluent UI page — fluentPage","text":"... contents document body. suppressBootstrap Whether suppress Bootstrap.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/fluentPage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic Fluent UI page — fluentPage","text":"Object can passed UI Shiny app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/fluentPage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basic Fluent UI page — fluentPage","text":"Bootstrap library suppressed default, work well Fluent UI general.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/fluentPeople.html","id":null,"dir":"Reference","previous_headings":"","what":"A dataset of sample people based on Fluent UI examples — fluentPeople","title":"A dataset of sample people based on Fluent UI examples — fluentPeople","text":"dataset sample people based Fluent UI examples","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/fluentPeople.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A dataset of sample people based on Fluent UI examples — fluentPeople","text":"","code":"fluentPeople"},{"path":"https://appsilon.github.io/shiny.fluent/reference/fluentPeople.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A dataset of sample people based on Fluent UI examples — fluentPeople","text":"object class tbl_df (inherits tbl, data.frame) 7 rows 11 columns.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/fluentPeople.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A dataset of sample people based on Fluent UI examples — fluentPeople","text":"https://developer.microsoft.com/en-us/fluentui#/controls/web/peoplepicker","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/fluentSalesDeals.html","id":null,"dir":"Reference","previous_headings":"","what":"A randomly generated dataset of imaginary sales deals — fluentSalesDeals","title":"A randomly generated dataset of imaginary sales deals — fluentSalesDeals","text":"Sales deals Top 10 companies Fortune 500 dataset (located https://hifld-geoplatform.opendata.arcgis.com/datasets/fortune-500-corporate-headquarters) randomly generated person fluentPeople.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/fluentSalesDeals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A randomly generated dataset of imaginary sales deals — fluentSalesDeals","text":"","code":"fluentSalesDeals"},{"path":"https://appsilon.github.io/shiny.fluent/reference/fluentSalesDeals.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A randomly generated dataset of imaginary sales deals — fluentSalesDeals","text":"object class tbl_df (inherits tbl, data.frame) 100 rows 30 columns.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/parseTheme.html","id":null,"dir":"Reference","previous_headings":"","what":"parseTheme — parseTheme","title":"parseTheme — parseTheme","text":"Reads theme JSON generated Theme Designer: https://fabricweb.z5.web.core.windows.net/pr-deploy-site/refs/heads/master/theming-designer/ parses object digestable ThemeProvider","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/parseTheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parseTheme — parseTheme","text":"","code":"parseTheme(path = NULL, json = NULL)"},{"path":"https://appsilon.github.io/shiny.fluent/reference/parseTheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"parseTheme — parseTheme","text":"path path JSON file containing theme created Theme Designer json JSON string containing theme created Theme Designer","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/parseTheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"parseTheme — parseTheme","text":"list Fluent theme can used ThemeProvider","code":""},{"path":[]},{"path":"https://appsilon.github.io/shiny.fluent/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. shiny.react JS, reactOutput, renderReact, setInput, triggerEvent","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/runExample.html","id":null,"dir":"Reference","previous_headings":"","what":"Run example shiny.fluent apps. — runExample","title":"Run example shiny.fluent apps. — runExample","text":"Based shiny::runExample, takes arguments.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/runExample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run example shiny.fluent apps. — runExample","text":"","code":"runExample(   example = NA,   port = getOption(\"shiny.port\"),   launch.browser = getOption(\"shiny.launch.browser\", interactive()),   host = getOption(\"shiny.host\", \"127.0.0.1\"),   display.mode = c(\"auto\", \"normal\", \"showcase\") )"},{"path":"https://appsilon.github.io/shiny.fluent/reference/runExample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run example shiny.fluent apps. — runExample","text":"example Example run. NA list examples. port TCP port application listen launch.browser Whether open app browser host IPv4 address listen . display.mode Display mode app.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/runExample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run example shiny.fluent apps. — runExample","text":"function normally return; interrupt R stop application (usually pressing Ctrl+C Esc).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/shinyFluentDependency.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny Fluent JS dependency — shinyFluentDependency","title":"Shiny Fluent JS dependency — shinyFluentDependency","text":"Shiny Fluent JS dependency","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/shinyFluentDependency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny Fluent JS dependency — shinyFluentDependency","text":"","code":"shinyFluentDependency()"},{"path":"https://appsilon.github.io/shiny.fluent/reference/shinyFluentDependency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny Fluent JS dependency — shinyFluentDependency","text":"HTML dependency object.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/shinyInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Documentation template for components with .shinyInput wrappers — shinyInput","title":"Documentation template for components with .shinyInput wrappers — shinyInput","text":"Documentation template components .shinyInput wrappers","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/shinyInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Documentation template for components with .shinyInput wrappers — shinyInput","text":"inputId ID component. value Starting value. session Object passed session argument Shiny server. ... Props pass component. allowed props listed Details section.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/reference/shinyInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Documentation template for components with .shinyInput wrappers — shinyInput","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/news/index.html","id":"shinyfluent-030","dir":"Changelog","previous_headings":"","what":"shiny.fluent 0.3.0","title":"shiny.fluent 0.3.0","text":"CRAN release: 2023-01-24 Added ThemeProvider component (#47). Added ShimmeredDetailsList component (#34). .shinyInput wrappers now sensible debounce consistent vanilla Shiny (#130). Added update functions buttons (#12). Dropdown.shinyInput now supports multiselection (#42).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/news/index.html","id":"shinyfluent-022","dir":"Changelog","previous_headings":"","what":"shiny.fluent 0.2.2","title":"shiny.fluent 0.2.2","text":"Make behavior DatePicker.shinyInput value = NULL consistent vanilla Shiny (#118).","code":""},{"path":"https://appsilon.github.io/shiny.fluent/news/index.html","id":"shinyfluent-020","dir":"Changelog","previous_headings":"","what":"shiny.fluent 0.2.0","title":"shiny.fluent 0.2.0","text":"first public release, several big interface changes: Removed withReact(). Components now work without ! Added .shinyInput suffix components interface modified match vanilla Shiny inputs. corresponding components without suffix now expose unaltered React interface. Changed naming convention camelCase. Added setInput() triggerEvent() helpers.","code":""},{"path":"https://appsilon.github.io/shiny.fluent/news/index.html","id":"shinyfluent-010","dir":"Changelog","previous_headings":"","what":"shiny.fluent 0.1.0","title":"shiny.fluent 0.1.0","text":"Initial release made available early access group.","code":""}]
